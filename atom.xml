<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>聘宝研发</title>
  <subtitle>一群有追求的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.pinbot.me/"/>
  <updated>2017-06-29T09:27:58.000Z</updated>
  <id>http://blog.pinbot.me/</id>
  
  <author>
    <name>聘宝研发</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Sphinx快速制作文档</title>
    <link href="http://blog.pinbot.me/2017/06/25/%E7%94%A8Sphinx%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    <id>http://blog.pinbot.me/2017/06/25/用Sphinx快速制作文档/</id>
    <published>2017-06-25T08:16:17.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档, 由 Georg Brandl 在BSD 许可证下开发. <a href="https://docs.python.org/3/" target="_blank" rel="external">新版的Python文档</a>就是由Sphinx生成的， 并且它已成为Python项目首选的文档工具,同时它对 C/C++ 项目也有很好的支持; 并计划对其它开发语言添加特殊支持. 本站当然也是使用 Sphinx 生成的，它采用reStructuredText! Sphinx还在继续开发. 下面列出了其良好特性,这些特性在Python官方文档中均有体现:</p>
<ul>
<li>丰富的输出格式: 支持 HTML (包括 Windows 帮助文档), LaTeX (可以打印PDF版本), manual pages（man 文档）, 纯文本</li>
<li>完备的交叉引用: 语义化的标签,并可以自动化链接函数,类,引文,术语及相似的片段信息</li>
<li>明晰的分层结构: 可以轻松的定义文档树,并自动化链接同级/父级/下级文章</li>
<li>美观的自动索引: 可自动生成美观的模块索引</li>
<li>精确的语法高亮: 基于 Pygments 自动生成语法高亮</li>
<li>开放的扩展: 支持代码块的自动测试,并包含Python模块的自述文档(API docs)等  </li>
</ul>
<p>Sphinx 使用 reStructuredText 作为标记语言, 可以享有 Docutils 为reStructuredText提供的分析，转换等多种工具.<br><a id="more"></a></p>
<h1 id="安装sphinx"><a href="#安装Sphinx" class="headerlink" title="安装Sphinx"></a>安装Sphinx</h1><p>Sphinx为Python语言的一个第三方库。我们需要在终端中输入下列命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install sphinx</div></pre></td></tr></table></figure></p>
<h1 id="创建sphinx项目"><a href="#创建Sphinx项目" class="headerlink" title="创建Sphinx项目"></a>创建Sphinx项目</h1><p>创建一个用于存放文档的文件夹，然后在该文件夹路径下运行下列命令快速生成Sphinx项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sphinx-quickstart</div></pre></td></tr></table></figure></p>
<p>接下来会让你选择一些配置：</p>
<ol>
<li><p>设置文档的根路径（回车，使用默认设置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter the root path for documentation.</div><div class="line">&gt; Root path for the documentation [.]:</div></pre></td></tr></table></figure>
</li>
<li><p>是否分离source和build目录（输入y,选择分离，方便管理）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">You have two options for placing the build directory for Sphinx output.</div><div class="line">Either, you use a directory &quot;_build&quot; within the root path, or you separate</div><div class="line">&quot;source&quot; and &quot;build&quot; directories within the root path.</div><div class="line">&gt; Separate source and build directories (y/n) [n]:</div></pre></td></tr></table></figure>
</li>
<li><p>设定模板前缀（回车，使用默认选项）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Inside the root directory, two more directories will be created; &quot;_templates&quot;</div><div class="line">for custom HTML templates and &quot;_static&quot; for custom stylesheets and other static</div><div class="line">files. You can enter another prefix (such as &quot;.&quot;) to replace the underscore.</div><div class="line">&gt; Name prefix for templates and static dir [_]:</div></pre></td></tr></table></figure>
</li>
<li><p>输入项目名称和作者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The project name will occur in several places in the built documentation.</div><div class="line">&gt; Project name: Sphinx-test</div><div class="line">&gt; Author name(s): test</div></pre></td></tr></table></figure>
</li>
<li><p>输入项目版本号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sphinx has the notion of a &quot;version&quot; and a &quot;release&quot; for the</div><div class="line">software. Each version can have multiple releases. For example, for</div><div class="line">Python the version is something like 2.5 or 3.0, while the release is</div><div class="line">something like 2.5.1 or 3.0a1.  If you don&apos;t need this dual structure,</div><div class="line">just set both to the same value.</div><div class="line">&gt; Project version []: 1.0.0</div><div class="line">&gt; Project release [1.0.0]:</div></pre></td></tr></table></figure>
</li>
<li><p>文档语言（回车，默认即可）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">If the documents are to be written in a language other than English,</div><div class="line">you can select a language here by its language code. Sphinx will then</div><div class="line">translate text that it generates into that language.</div><div class="line"></div><div class="line">For a list of supported codes, see</div><div class="line">http://sphinx-doc.org/config.html#confval-language.</div><div class="line">&gt; Project language [en]:</div></pre></td></tr></table></figure>
</li>
<li><p>设定文档文就按的后缀</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The file name suffix for source files. Commonly, this is either &quot;.txt&quot;</div><div class="line">or &quot;.rst&quot;.  Only files with this suffix are considered documents.</div><div class="line">&gt; Source file suffix [.rst]:</div></pre></td></tr></table></figure>
</li>
<li><p>设定首页名称（回车，选择默认index即可）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">One document is special in that it is considered the top node of the</div><div class="line">&quot;contents tree&quot;, that is, it is the root of the hierarchical structure</div><div class="line">of the documents. Normally, this is &quot;index&quot;, but if your &quot;index&quot;</div><div class="line">document is a custom template, you can also set this to another filename.</div><div class="line">&gt; Name of your master document (without suffix) [index]:</div></pre></td></tr></table></figure>
</li>
<li><p>根据需要选择是否开启epub输出(一般用不到，回车默认不开启即可)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sphinx can also add configuration for epub output:</div><div class="line">&gt; Do you want to use the epub builder (y/n) [n]:</div></pre></td></tr></table></figure>
</li>
<li><p>根据需求选择是否开启相应的Sphinx拓展功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Please indicate if you want to use one of the following Sphinx extensions:</div><div class="line">&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y</div><div class="line">&gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]: y</div><div class="line">&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y</div><div class="line">&gt; todo: write &quot;todo&quot; entries that can be shown or hidden on build (y/n) [n]: y</div><div class="line">&gt; coverage: checks for documentation coverage (y/n) [n]: y</div><div class="line">&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]: y</div><div class="line">&gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y</div><div class="line">Note: imgmath and mathjax cannot be enabled at the same time.</div><div class="line">imgmath has been deselected.</div><div class="line">&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]: y</div><div class="line">&gt; viewcode: include links to the source code of documented Python objects (y/n) [n]: y</div><div class="line">&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: n</div></pre></td></tr></table></figure>
</li>
<li><p>创建项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">A Makefile and a Windows command file can be generated for you so that you</div><div class="line">only have to run e.g. `make html&apos; instead of invoking sphinx-build</div><div class="line">directly.</div><div class="line">&gt; Create Makefile? (y/n) [y]: y</div><div class="line">&gt; Create Windows command file? (y/n) [y]: y</div><div class="line"></div><div class="line">Creating file ./conf.py.</div><div class="line">Creating file ./index.rst,.md.</div><div class="line">Creating file ./Makefile.</div><div class="line">Creating file ./make.bat.</div><div class="line"></div><div class="line">Finished: An initial directory structure has been created.</div><div class="line"></div><div class="line">You should now populate your master file ./index.rst,.md and create other documentation</div><div class="line">source files. Use the Makefile to build the docs, like so:</div><div class="line">   make builder</div><div class="line">where &quot;builder&quot; is one of the supported builders, e.g. html, latex or linkcheck.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>项目创建以后目录结构如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Makefile</div><div class="line">├── build</div><div class="line">├── make.bat</div><div class="line">└── source</div><div class="line">    ├── _static</div><div class="line">    ├── _templates</div><div class="line">    ├── conf.py</div><div class="line">    └── index.rst</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>build</strong>:用来存放通过make html生成文档网页文件的目录</li>
<li><strong>source</strong>：存放用于生成文档的源文件</li>
<li><strong>conf.py</strong>: Sphinx的配置文件</li>
<li><strong>index.rst</strong>: 主文档<h1 id="定义文档结构"><a href="#定义文档结构" class="headerlink" title="定义文档结构"></a>定义文档结构</h1>主文档index.rst的主要功能是被转换成欢迎页, 它包含一个目录表（ “table of contents tree”或者 toctree ). Sphinx 主要功能是使用 reStructuredText, 把许多文件组织成一份结构合理的文档.</li>
</ul>
<p>toctree指令初始值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div></pre></td></tr></table></figure></p>
<p>你可以在 content 的位置添加文档列表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line"></div><div class="line">   tutorial.md</div><div class="line">   ...</div></pre></td></tr></table></figure></p>
<p>注：文档文件放在与index.rst同级目录下。</p>
<h1 id="支持markdown文件-更改文档主题"><a href="#支持markdown文件、更改文档主题" class="headerlink" title="支持markdown文件、更改文档主题"></a>支持markdown文件、更改文档主题</h1><p>Spinx本身不支持.md文件生成文档，需要我们使用第三方库recommonmark进行转换。<br>首先分别运行下列命令安装recommonmark与sphinx_rtd_theme库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install recommonmark</div><div class="line"></div><div class="line">pip install sphinx_rtd_theme</div></pre></td></tr></table></figure></p>
<p>安装好，在conf.py中修改下列两个配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source_suffix = [&apos;.rst&apos;, &apos;.md&apos;, &apos;.MD&apos;]</div><div class="line">html_theme = &apos;sphinx_rtd_theme&apos;</div></pre></td></tr></table></figure></p>
<p>并新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source_parsers = &#123;</div><div class="line">    &apos;.md&apos;: CommonMarkParser,</div><div class="line">    &apos;.MD&apos;: CommonMarkParser,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h1><p>在Sphinx项目所在的文件夹路径下运行下列命令生成文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make html</div></pre></td></tr></table></figure></p>
<p>生成后的文档位于build/html文件夹内，用浏览器打开index.html即可看到生成后的文档。</p>
<hr>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Sphinx 使用手册</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation" target="_blank" rel="external">使用 sphinx 制作简洁而又美观的文档</a></li>
<li><a href="https://www.biaodianfu.com/sphinx-documentation.html" target="_blank" rel="external">使用Sphinx制作说明文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档, 由 Georg Brandl 在BSD 许可证下开发. &lt;a href=&quot;https://docs.python.org/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新版的Python文档&lt;/a&gt;就是由Sphinx生成的， 并且它已成为Python项目首选的文档工具,同时它对 C/C++ 项目也有很好的支持; 并计划对其它开发语言添加特殊支持. 本站当然也是使用 Sphinx 生成的，它采用reStructuredText! Sphinx还在继续开发. 下面列出了其良好特性,这些特性在Python官方文档中均有体现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丰富的输出格式: 支持 HTML (包括 Windows 帮助文档), LaTeX (可以打印PDF版本), manual pages（man 文档）, 纯文本&lt;/li&gt;
&lt;li&gt;完备的交叉引用: 语义化的标签,并可以自动化链接函数,类,引文,术语及相似的片段信息&lt;/li&gt;
&lt;li&gt;明晰的分层结构: 可以轻松的定义文档树,并自动化链接同级/父级/下级文章&lt;/li&gt;
&lt;li&gt;美观的自动索引: 可自动生成美观的模块索引&lt;/li&gt;
&lt;li&gt;精确的语法高亮: 基于 Pygments 自动生成语法高亮&lt;/li&gt;
&lt;li&gt;开放的扩展: 支持代码块的自动测试,并包含Python模块的自述文档(API docs)等  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sphinx 使用 reStructuredText 作为标记语言, 可以享有 Docutils 为reStructuredText提供的分析，转换等多种工具.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.pinbot.me/tags/python/"/>
    
      <category term="sphinx" scheme="http://blog.pinbot.me/tags/sphinx/"/>
    
  </entry>
  
  <entry>
    <title>Python打包发布一条龙</title>
    <link href="http://blog.pinbot.me/2016/11/29/Python%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E4%B8%80%E6%9D%A1%E9%BE%99/"/>
    <id>http://blog.pinbot.me/2016/11/29/Python打包发布一条龙/</id>
    <published>2016-11-29T14:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天介绍一下 Python 项目的打包及分发。</p>
<a id="more"></a>
<h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="distutils"><a href="#distutils" class="headerlink" title="distutils"></a>distutils</h3><p><a href="https://docs.python.org/2/distutils/" target="_blank" rel="external">distutils</a> 是于2000年发布的 Python 项目创建打包工具。</p>
<p>但现在很少直接使用, 而是使用 setuptools 。</p>
<h3 id="setuptools"><a href="#setuptools" class="headerlink" title="setuptools"></a>setuptools</h3><p><a href="http://setuptools.readthedocs.io/en/latest/" target="_blank" rel="external">setuptools</a> 于2004年发布, 是 distutils 的增强版本, 包含 <code>setup</code> 和 <code>find_packages</code> 等常见函数。</p>
<p>另外它包含了 easy_install 这个包安装工具, 使用Eggs包来进行安装(扩展名为 .egg ), 如果你不幸用 Windows 做过 Python 开发, 应该对它不陌生。</p>
<p>另外现在在 macOS 的 Python 环境中也附带了这个工具。</p>
<p>常见用法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ easy_install redisdict-0.0.1-py2.7.egg</div></pre></td></tr></table></figure>
<p>Eggs文件实际是一个压缩包, 解压后目录结构大致如下, 具体可以参看 <a href="http://setuptools.readthedocs.io/en/latest/formats.html" target="_blank" rel="external">The Internal Structure of Python Eggs¶</a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── EGG-INFO</div><div class="line">│   ├── PKG-INFO</div><div class="line">│   ├── SOURCES.txt</div><div class="line">│   ├── dependency_links.txt</div><div class="line">│   ├── requires.txt</div><div class="line">│   ├── top_level.txt</div><div class="line">│   └── zip-safe</div><div class="line">├── redisdict</div><div class="line">│   ├── __init__.py</div></pre></td></tr></table></figure>
<p>说到 Eggs 就得谈谈 Wheel, <a href="https://www.python.org/dev/peps/pep-0427/" target="_blank" rel="external">Wheel</a> 是2012年发布的Python包格式, 类似于 Eggs , 其目录结构大致如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── redisdict</div><div class="line">│   └── __init__.py</div><div class="line">└── redisdict-0.0.1.dist-info</div><div class="line">    ├── DESCRIPTION.rst</div><div class="line">    ├── METADATA</div><div class="line">    ├── RECORD</div><div class="line">    ├── WHEEL</div><div class="line">    ├── metadata.json</div><div class="line">    └── top_level.txt</div></pre></td></tr></table></figure>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p><a href="https://pip.pypa.io/en/stable/" target="_blank" rel="external">pip</a> 是 PyPA(Python Packaging Authority) 推荐、时下最主流的包安装工具, 发布于2013年, pip 支持从常见的VCS系统(例如git)进行安装, 也可以安装Eggs包, Wheel包。</p>
<h2 id="使用-setuptools-打包"><a href="#使用-setuptools-打包" class="headerlink" title="使用 setuptools 打包"></a>使用 setuptools 打包</h2><p>我们以 RedisDict 这个模块为例, 首先在项目中新建 <code>setup.py</code> 文件, 并引入 <code>setuptools</code> 。<br>之后使用 <code>setuptools.setup</code> 方法对项目进行打包, 方法的参数设定可以参看 <a href="https://packaging.python.org/distributing/#setup-args" target="_blank" rel="external">setup-args</a> 。</p>
<p>示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import setuptools</div><div class="line">import codecs</div><div class="line"></div><div class="line"></div><div class="line">def get_requirements(filename):</div><div class="line">    return codecs.open(&apos;requirements/&apos; + filename, encoding=&apos;utf-8&apos;).read().splitlines()</div><div class="line"></div><div class="line"></div><div class="line">setuptools.setup(</div><div class="line">    name=&apos;redisdict&apos;,</div><div class="line">    version=&apos;0.0.1&apos;,</div><div class="line">    packages=setuptools.find_packages(exclude=[&apos;tests&apos;, &apos;tests.*&apos;]),</div><div class="line">    url=&apos;https://github.com/kxrr/redisdict&apos;,</div><div class="line">    license=&apos;MIT&apos;,</div><div class="line">    author=&apos;kxrr&apos;,</div><div class="line">    author_email=&apos;hi@kxrr.us&apos;,</div><div class="line">    description=&apos;A dict-like object using Redis as the backend.&apos;,</div><div class="line">    install_requires=get_requirements(&apos;default.txt&apos;),</div><div class="line">    tests_require=get_requirements(&apos;test.txt&apos;),</div><div class="line">)</div></pre></td></tr></table></figure>
<p>之后, 我们可以使用下面命令将项目打包为压缩文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python setup.py check  # 检查</div><div class="line">$ python setup.py sdist  # 打包为 .tar.gz </div><div class="line">$ python setup.py bdist_egg  #  创建 Eggs包</div><div class="line">$ python setup.py bdist_wheel  # 创建 Wheel包</div></pre></td></tr></table></figure>
<p>生成的文件均位于 dist 目录下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dist</div><div class="line">├── redisdict-0.0.1-py2-none-any.whl</div><div class="line">├── redisdict-0.0.1-py2.7.egg</div><div class="line">└── redisdict-0.0.1.tar.gz</div></pre></td></tr></table></figure>
<p>别外也可以通过 setuptools 将项目打包成其它格式(比如exe), 有兴趣的可以自己看看。</p>
<h2 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h2><h3 id="发布到自建-pypi-server"><a href="#发布到自建-PyPI-Server" class="headerlink" title="发布到自建 PyPI Server"></a>发布到自建 PyPI Server</h3><p>只需要通过 <code>scp</code> 命令将打好的包传到我们的 PyPI Server 上去:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp dist/redisdict-0.0.1-py2.py3-none-any.whl deploy@pypi.pinbot.me:/home/deploy/packages</div></pre></td></tr></table></figure>
<p>上传完成后可以使用 pip 进行安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install redisdict -i http://pypi.pinbot.me/simple/ --trusted-host pypi.pinbot.me</div></pre></td></tr></table></figure>
<h3 id="发布到官方-pypi-server"><a href="#发布到官方-PyPI-Server" class="headerlink" title="发布到官方 PyPI Server"></a>发布到官方 PyPI Server</h3><p>首先到 <a href="https://pypi.python.org/pypi?%3Aaction=register_form" target="_blank" rel="external">PyPI</a> 注册一个帐号, 在邮箱内确认。</p>
<p>之后在家目录新建一个 <code>.pypirc</code> 文件, 写入下面内容(注意填入自己的帐号密码):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[pypirc]</div><div class="line">servers = pypi</div><div class="line">[server-login]</div><div class="line">username:username</div><div class="line">password:password</div></pre></td></tr></table></figure>
<p>接下来就可以开始上传了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python setup.py register  # 将包注册到 PyPI</div><div class="line">$ python setup.py register sdist upload  # 上传</div></pre></td></tr></table></figure>
<p>运行过后根据提示操作即可发布完成。</p>
<hr>
<p>Packaging User Guide: <a href="https://packaging.python.org/key_projects/" target="_blank" rel="external">https://packaging.python.org/key_projects/</a><br>Celery setup.py: <a href="https://github.com/celery/celery/blob/master/setup.py" target="_blank" rel="external">https://github.com/celery/celery/blob/master/setup.py</a><br>What was the problem with packaging?: <a href="http://pythonhosted.org/distlib/overview.html#what-was-the-problem-with-packaging" target="_blank" rel="external">http://pythonhosted.org/distlib/overview.html#what-was-the-problem-with-packaging</a><br>Uploading your project to pypi: <a href="https://packaging.python.org/distributing/#uploading-your-project-to-pypi" target="_blank" rel="external">https://packaging.python.org/distributing/#uploading-your-project-to-pypi</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天介绍一下 Python 项目的打包及分发。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.pinbot.me/tags/python/"/>
    
      <category term="setup.py" scheme="http://blog.pinbot.me/tags/setup-py/"/>
    
      <category term="pypi" scheme="http://blog.pinbot.me/tags/pypi/"/>
    
  </entry>
  
  <entry>
    <title>Django入门进阶</title>
    <link href="http://blog.pinbot.me/2016/11/18/Django%E5%85%A5%E9%97%A8%E8%BF%9B%E9%98%B6/"/>
    <id>http://blog.pinbot.me/2016/11/18/Django入门进阶/</id>
    <published>2016-11-17T16:58:51.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Adam at 2016-11-18 00:58:51</p>
<p>我们前面讲了快速熟悉<code>Django</code><a href="http://hopperclouds.github.io/2016/10/29/Django%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="external"><code>架构网站的方式</code></a>，接下来我们来深入了解一下<code>Django框架</code>。它不仅提供了建站的方法，也提供了一整套的从开发简单的网站到一个完整维护迭代的开发模式，下面几个方面非常重要。</p>
<a id="more"></a>
<h2 id="学会调试"><a href="#学会调试" class="headerlink" title="学会调试"></a>学会调试</h2><ul>
<li><p>单步调试<br>直接在代码中插入下面这一行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#polls/views.py</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"><span class="keyword">import</span> pdb; pdb.set_trace() <span class="comment">#这一行</span></div></pre></td></tr></table></figure>
<p>运行程序，就可以在服务器端命令行中一步步的跟踪执行结果。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[26/Nov/2016 14:17:49] "GET /polls/ HTTP/1.1" 200 72</div><div class="line">Performing system checks...</div><div class="line">&gt; /myFirstDjango/mysite/polls/views.py(6)&lt;module&gt;()</div><div class="line">-&gt; def index(request):</div><div class="line">(Pdb) l ＃这是调试命令：展示当前运行代码</div><div class="line">  1  	from django.shortcuts import get_object_or_404, render</div><div class="line">  2</div><div class="line">  3  	from .models import Question</div><div class="line">  4  	import pdb; pdb.set_trace()</div><div class="line">  5  	# Create your views here.</div><div class="line">  6  -&gt;	def index(request):</div><div class="line">  7  	    latest_question_list = Question.objects.order_by('-pub_date')[:5]</div><div class="line">  8  	    context = &#123;</div><div class="line">  9  	        'latest_question_list': latest_question_list,</div><div class="line"> 10  	    &#125;</div><div class="line"> 11  	    return render(request, 'polls/index.html', context)</div><div class="line">(Pdb) n ＃这是调试命令: 下一步</div><div class="line">&gt; /Users/gzadamlv/myFirstDjango/mysite/polls/views.py(13)&lt;module&gt;()</div><div class="line">-&gt; def detail(request, question_id):</div><div class="line">(Pdb) h ＃这是调试命令：获取帮助，查看所有可用命令</div><div class="line">Documented commands (type help &lt;topic&gt;):</div><div class="line">========================================</div><div class="line">EOF    bt         cont      enable  jump  pp       run      unt</div><div class="line">a      c          continue  exit    l     q        s        until</div><div class="line">alias  cl         d         h       list  quit     step     up</div><div class="line">args   clear      debug     help    n     r        tbreak   w</div><div class="line">b      commands   disable   ignore  next  restart  u        whatis</div><div class="line">break  condition  down      j       p     return   unalias  where</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>Shell 调试方式<br>用下面的命令进入命令行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite git:(master) ✗ python manage.py shell</div><div class="line">Python 2.7.10 (default, Oct 23 2015, 19:19:21)</div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">(InteractiveConsole)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过在命令行引入程序中使用的模块、函数来跟踪返回结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; django.setup()</div><div class="line">&gt;&gt;&gt; import mysite</div><div class="line">&gt;&gt;&gt; from django.shortcuts import get_object_or_404, render</div><div class="line">&gt;&gt;&gt; from polls.models import Question</div><div class="line">&gt;&gt;&gt; latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:5]</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(latest_question_list)</div><div class="line">&lt;QuerySet [&lt;Question: 你会学习python吗？&gt;]&gt;</div></pre></td></tr></table></figure></p>
<h2 id="学会测试"><a href="#学会测试" class="headerlink" title="学会测试"></a>学会测试</h2><p>修改models.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="keyword">import</span> datetime</div></pre></td></tr></table></figure></p>
<p>给class Question增加一个方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>添加测试文件：polls/tests.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionMethodTests</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        was_published_recently() should return False for questions</div><div class="line">        whose pub_date is in the future.</div><div class="line">        """</div><div class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</div><div class="line">        future_question = Question(pub_date=time)</div><div class="line">        self.assertIs(future_question.was_published_recently(), <span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<p>运行测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite git:(master) ✗ python manage.py <span class="built_in">test</span> polls</div><div class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</div><div class="line">F</div><div class="line">======================================================================</div><div class="line">FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionMethodTests)</div><div class="line">----------------------------------------------------------------------</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/Users/gzadamlv/myFirstDjango/mysite/polls/tests.py"</span>, line 14, <span class="keyword">in</span> test_was_published_recently_with_future_question</div><div class="line">    self.assertIs(future_question.was_published_recently(), False)</div><div class="line">AssertionError: True is not False</div><div class="line"></div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 1 <span class="built_in">test</span> <span class="keyword">in</span> 0.002s</div><div class="line"></div><div class="line">FAILED (failures=1)</div><div class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure></p>
<p>修改was_published_recently方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)</span></div><div class="line">now = timezone.now()</div><div class="line"><span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</div></pre></td></tr></table></figure></p>
<p>再运行测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite git:(master) ✗ python manage.py test polls</div><div class="line">Creating test database <span class="keyword">for</span> alias <span class="string">'default'</span>...</div><div class="line">.</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.001</span>s</div><div class="line"></div><div class="line">OK</div><div class="line">Destroying test database <span class="keyword">for</span> alias <span class="string">'default'</span>...</div></pre></td></tr></table></figure></p>
<h2 id="学会写文档"><a href="#学会写文档" class="headerlink" title="学会写文档"></a>学会写文档</h2><blockquote>
<p>安装： <code>pip install Sphinx</code><br>运行 <code>sphinx-quickstart</code> 命令(下面几项要选<code>yes</code>)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Please indicate <span class="keyword">if</span> you want to use one of the following Sphinx extensions:</div><div class="line">&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y</div><div class="line">&gt; doctest: automatically <span class="built_in">test</span> code snippets <span class="keyword">in</span> doctest blocks (y/n) [n]: y</div><div class="line">&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y</div><div class="line">&gt; todo: write <span class="string">"todo"</span> entries that can be shown or hidden on build (y/n) [n]: y</div><div class="line">&gt; coverage: checks <span class="keyword">for</span> documentation coverage (y/n) [n]: y</div></pre></td></tr></table></figure>
<blockquote>
<p>生成文档： <code>make html</code><br>打开网页：<code>_build/html/index.html</code></p>
</blockquote>
<p>默认模版不太好看，我们新加一个主题：<code>pip install sphinx_rtd_theme</code><br>在<code>conf.py</code>最后增加：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sphinx_rtd_theme</div><div class="line">html_theme = <span class="string">'sphinx_rtd_theme'</span></div></pre></td></tr></table></figure></p>
<p>再<code>make html</code>，初始化文档生成成功：<br><img src="http://img.pinbot.me:8080/uploads/2016/11/30/blob_1480436514924.png" alt="2016-11-30-截图" title="blob_1480436514924.png"></p>
<p>但是我们会发现并没有看到程序中的文档，别着急，还差两步。</p>
<p>先用<code>sphinx-apidoc</code>把<code>app</code>目录中<code>python</code>程序的文档内容提取出来，保存到<code>api</code>这个目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sphinx-apidoc -o api ./app -f</div></pre></td></tr></table></figure></p>
<p>最后，我们需要编辑index.rst这个文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Contents:</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">   :maxdepth: <span class="number">2</span></div><div class="line"></div><div class="line">   api/polls.rst  <span class="comment">#增加这行</span></div></pre></td></tr></table></figure></p>
<p>再次<code>make html</code>，大功告成～</p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/11/30/blob_1480436951111.png" alt="2016-11-30-截图" title="blob_1480436951111.png"></p>
<p>这是提取出来的具体文档：</p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/11/30/blob_1480437014840.png" alt="2016-11-30-截图" title="blob_1480437014840.png"></p>
<p>另外：如果<code>make html</code>出现下面错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sphinx autodoc ImportError: No module named</div></pre></td></tr></table></figure></p>
<p>可以试试这个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PYTHONPATH=$(pwd)</div></pre></td></tr></table></figure></p>
<p>别小看上面这三步，其实还有很多细节没能和大家演示，师傅领进门，修行靠个人哦～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Adam at 2016-11-18 00:58:51&lt;/p&gt;
&lt;p&gt;我们前面讲了快速熟悉&lt;code&gt;Django&lt;/code&gt;&lt;a href=&quot;http://hopperclouds.github.io/2016/10/29/Django%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;架构网站的方式&lt;/code&gt;&lt;/a&gt;，接下来我们来深入了解一下&lt;code&gt;Django框架&lt;/code&gt;。它不仅提供了建站的方法，也提供了一整套的从开发简单的网站到一个完整维护迭代的开发模式，下面几个方面非常重要。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.pinbot.me/categories/blog/"/>
    
    
      <category term="Django" scheme="http://blog.pinbot.me/tags/Django/"/>
    
      <category term="Python" scheme="http://blog.pinbot.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用R并行方式对数值型数据离散化</title>
    <link href="http://blog.pinbot.me/2016/11/09/%E4%BD%BF%E7%94%A8R%E5%B9%B6%E8%A1%8C%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%95%B0%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    <id>http://blog.pinbot.me/2016/11/09/使用R并行方式对数值型数据离散化/</id>
    <published>2016-11-09T14:48:37.000Z</published>
    <updated>2017-06-30T02:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据的特征按照其取值可以分为连续型和离散型。离散数值属性在数据挖掘的过程中具有重要的作用。比如在信用卡评分模型中，当自变量很多时，并非所有字段对于目标字段来说都是有效的，因此通常的做法是通过计算woe值和iv值(类似于信息增益)来初步挑选通过对目标变量重要的字段，然后建模逻辑回归模型。而这当中就需要对数值型数据离散化。<br>数值型数据离散化通常分为有监督离散化和无监督离散化。考虑到数据建模通常是建立目标字段和其影响因素之间的关系的量化，因此会选择有监督离散化。<br>R语言中用于数值型数据离散化的包discretization。安装和加载如下：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; install.packages(<span class="string">"discretization"</span>)</div><div class="line">&gt; <span class="keyword">library</span>(discretization)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>以R自带数据集iris为例，以”Species” 为目标字段，对”Sepal.Length”、”Sepal.Width”、”Petal.Length”、”Petal.Width”四个数值型属性离散化。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; lisan_result &lt;- mdlp(iris)</div><div class="line">&gt; class(lisan_result)</div><div class="line">[<span class="number">1</span>] <span class="string">"list"</span></div><div class="line">&gt; names(lisan_result)</div><div class="line">[<span class="number">1</span>] <span class="string">"cutp"</span>      <span class="string">"Disc.data"</span></div></pre></td></tr></table></figure>
<p>使用mdlp()方法对iris离散化，该方法默认数据框最后一列最后为目标字段。返回结果为列表。”cutp”为各列的分割点向量。”Disc.data”为离散化后的数据框。<br>该方法对于较小的样本量和维度时，程序运行时间还可以接受。但随着数据量的增大，数据维度的增加，程序运行时间会越来越长。因此考虑采用并行的方式对数据进行离散化。介绍R用于离散化的包parallel。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; install.packages(<span class="string">"parallel"</span>)</div><div class="line">&gt; <span class="keyword">library</span>(parallel)</div><div class="line">&gt; cores &lt;- detectCores()  <span class="comment">##查看本机虚拟核心数</span></div><div class="line">cores</div><div class="line">[<span class="number">1</span>] <span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>现在考虑以并行的方式实现离散化方法。考虑设计思路如下：<br>1.将字段10个为一组分别与目标字段组合成数据框，(不足10个时以实际数量字段与目标字段组合)存放在一个列表中。列表的元素即离散字段与目标字段构成的数据框。<br>2.启动M个附属进程，并初始化。M&lt;=本机虚拟核心数。使用parLapply()作用于步骤1中建立的列表数据。此时既有M个附属进程对数据进行离散化。<br>3.将步骤2中的离散化结果合并。<br>4.将上述步骤封装成函数。整理后使得返回结果与mdlp()函数一致。这样方便调用。<br>将上述设计思路写成R代码，如下：输入离散数据、使用核心数，返回结果与使用mdlp()函数相同<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">parallel_lisan &lt;- <span class="keyword">function</span>(lisan_data,cores_num)&#123;</div><div class="line"></div><div class="line">   <span class="keyword">library</span>(parallel)</div><div class="line">   <span class="keyword">library</span>(discretization)</div><div class="line"></div><div class="line">    res &lt;- list()</div><div class="line">    lisan_data_v &lt;- list()</div><div class="line">    cut_point &lt;- list()</div><div class="line">    Disc.data &lt;- data.frame(c(rep(<span class="literal">NA</span>,nrow(lisan_data))))</div><div class="line"></div><div class="line">    name_num = ncol(lisan_data)-<span class="number">1</span>      <span class="comment">##将原始数据分割成多列，先考虑每组10列。不足的单独分为一组。</span></div><div class="line">    group_num = floor(name_num/<span class="number">10</span>)</div><div class="line">    last_group_num = name_num%%<span class="number">10</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>( name_num &gt; <span class="number">10</span>)&#123;                <span class="comment">##当原始数据列数多余10列</span></div><div class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:group_num)&#123;</div><div class="line">            lw_flag &lt;- lisan_data[,ncol(lisan_data)]</div><div class="line">            lisan_data_v[[i]] &lt;- cbind(lisan_data[,(<span class="number">10</span>*i-<span class="number">9</span>):(<span class="number">10</span>*i)],lw_flag)</div><div class="line">          &#125;</div><div class="line">        lisan_data_v[[group_num+<span class="number">1</span>]] &lt;- lisan_data[,(<span class="number">10</span>*group_num+<span class="number">1</span>):ncol(lisan_data)]</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        lisan_data_v[[group_num+<span class="number">1</span>]] &lt;- lisan_data[,(<span class="number">10</span>*group_num+<span class="number">1</span>):ncol(lisan_data)]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cl &lt;- makeCluster(cores_num)                   <span class="comment">##初始化核心</span></div><div class="line">    results &lt;- parLapply(cl,lisan_data_v,mdlp)     <span class="comment">##对列表数据使用mdlp函数并行离散化</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(results))&#123;</div><div class="line">         <span class="keyword">for</span>(j <span class="keyword">in</span> <span class="number">1</span>:length(results[[i]][[<span class="number">1</span>]]))&#123;</div><div class="line">              cut_point[[(i-<span class="number">1</span>)*<span class="number">10</span>+j]] &lt;- results[[i]][[<span class="number">1</span>]][[j]]</div><div class="line">          &#125;</div><div class="line">        temp &lt;- as.data.frame(results[[i]][[<span class="number">2</span>]])</div><div class="line">        Disc.data &lt;- cbind(Disc.data,temp[,<span class="number">1</span>:(ncol(temp)-<span class="number">1</span>)])      <span class="comment">##合并离散数据结果</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Disc.data &lt;- Disc.data[,<span class="number">2</span>:ncol(Disc.data)]</div><div class="line">    Disc.data$lw_flag &lt;- lisan_data[,ncol(lisan_data)]</div><div class="line">    names(Disc.data) &lt;- names(lisan_data)</div><div class="line">    stopCluster(cl)</div><div class="line"></div><div class="line">    res[[<span class="string">"cutp"</span>]] &lt;- cut_point</div><div class="line">    res[[<span class="string">"Disc.data"</span>]] &lt;- Disc.data</div><div class="line"></div><div class="line">    <span class="keyword">return</span>(res)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据的特征按照其取值可以分为连续型和离散型。离散数值属性在数据挖掘的过程中具有重要的作用。比如在信用卡评分模型中，当自变量很多时，并非所有字段对于目标字段来说都是有效的，因此通常的做法是通过计算woe值和iv值(类似于信息增益)来初步挑选通过对目标变量重要的字段，然后建模逻辑回归模型。而这当中就需要对数值型数据离散化。&lt;br&gt;数值型数据离散化通常分为有监督离散化和无监督离散化。考虑到数据建模通常是建立目标字段和其影响因素之间的关系的量化，因此会选择有监督离散化。&lt;br&gt;R语言中用于数值型数据离散化的包discretization。安装和加载如下：&lt;br&gt;&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; install.packages(&lt;span class=&quot;string&quot;&gt;&quot;discretization&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;library&lt;/span&gt;(discretization)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://blog.pinbot.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://blog.pinbot.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>向量的相似性度量</title>
    <link href="http://blog.pinbot.me/2016/11/09/%E5%90%91%E9%87%8F%E7%9A%84%E7%9B%B8%E4%BC%BC%E6%80%A7%E5%BA%A6%E9%87%8F/"/>
    <id>http://blog.pinbot.me/2016/11/09/向量的相似性度量/</id>
    <published>2016-11-09T14:48:37.000Z</published>
    <updated>2017-06-30T02:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>author: 贺晓松</p>
<p>在机器学习或是数据挖掘的算法当中，经常需要比较不同样本特征向量的相似性，进而作为下一步的判断依据。比方说最近数据挖掘领域比较火的精准营销、<a href="http://www.doc88.com/p-0804527568994.html" target="_blank" rel="external">定点广告投放</a>、用户画像等。都需要计算不同数据样例特征向量的相似性，然后根据相似性或分类或排序等。因此，向量的相似性度量可以说是数据挖掘或机器学习领域的一个基础性工具。<br><a id="more"></a><br>需要用到相似度度量的方法类型分为：样本点的相似性度量、类与类之间的相似性度量、变量之间的相似性度量。<br>用数量化的方法描述事物之间的相似程度，一个事物通常需要多个维度来刻画。假设一群样本点需要用p个维度去描述，则每个样本点可以看成是p维空间中的一个点。因此，很自然地想到可以用距离来度量样本点之间的相似程度。假定p维空间中的两个点<img src="http://img.blog.csdn.net/20161031010613833" width="80" height="30" alt="图片名称" align="center">，<img src="http://img.blog.csdn.net/20161031011025460" width="80" height="30" align="center">，则x,y间的距离度量最常用的是闵氏距离：<br><img src="http://img.blog.csdn.net/20161031012420998" width="200" height="60" align="center"></p>
<p>当q=1,2，或q趋于无穷时可分别得到：</p>
<p>（1）曼哈顿距离(绝对值距离)：</p>
<p><img src="http://img.blog.csdn.net/20161031012628579" width="200" height="60" align="center"></p>
<p>从名字就可以猜出这种距离的计算方法了。想象你在曼哈顿要从一个十字路口开车到另外一个十字路口，驾驶距离是两点间的直线距离吗？显然不是，除非你能穿越大楼。实际驾驶距离就是这个“曼哈顿距离”。而这也是曼哈顿距离名称的来源， 曼哈顿距离也称为城市街区距离(City Block distance)。</p>
<p>（2）欧氏距离：</p>
<p><img src="http://img.blog.csdn.net/20161031012843004" width="200" height="60" align="center"></p>
<p>在闵氏距离中，最常用的是欧式距离。它的主要优点是当坐标轴进行正交旋转时，欧式距离是保持不变的。另外一定要采用相同量纲的变量，然后再计算距离。同时尽可能避免维度间的想关心，相关性会造成信息重叠，会片面强调某些变量的重要性。</p>
<p>（3）切比雪夫距离：<br><img src="http://img.blog.csdn.net/20161031014031362" width="180" height="40" align="center"></p>
<p>国际象棋玩过么？国王走一步能够移动到相邻的8个方格中的任意一个。那么国王从格子(x1,y1)走到格子(x2,y2)最少需要多少步？自己走走试试。你会发现最少步数总是max( | x2-x1 | , | y2-y1 | ) 步 。有一种类似的一种距离度量方法叫切比雪夫距离。</p>
<p>（4）夹角余弦距离<br>几何中夹角余弦可用来衡量两个向量方向的差异，机器学习中借用这一概念来衡量样本向量之间的差异。<br>(1)在二维空间中向量A(x1,y1)与向量B(x2,y2)的夹角余弦公式：<br><img src="http://img.blog.csdn.net/20161110152229918" width="200" height="60" align="center"><br>(2) 两个n维样本点a(x11,x12,…,x1n)和b(x21,x22,…,x2n)的夹角余弦<br>类似的，对于两个n维样本点a(x11,x12,…,x1n)和b(x21,x22,…,x2n)，可以使用类似于夹角余弦的概念来衡量它们间的相似程度。<br><img src="http://img.blog.csdn.net/20161110152523581" width="120" height="40" align="center"><br>即：<br><img src="http://img.blog.csdn.net/20161110152642107" width="200" height="80" align="center"><br>夹角余弦取值范围为[-1,1]。夹角余弦越大表示两个向量的夹角越小，夹角余弦越小表示两向量的夹角越大。当两个向量的方向重合时夹角余弦取最大值1，当两个向量的方向完全相反夹角余弦取最小值-1。<br> (5) 马氏距离<br>有M个样本向量X1~Xm，协方差矩阵记为S，均值记为向量μ，则其中样本向量X到u的马氏距离表示为：<br><img src="http://img.blog.csdn.net/20161110153056109" width="180" height="50" align="center"><br>而其中向量Xi与Xj之间的马氏距离定义为：<br><img src="http://img.blog.csdn.net/20161110153352735" width="180" height="50" align="center"><br>若协方差矩阵是单位矩阵（各个样本向量之间独立同分布）,则公式就成了：<br><img src="http://img.blog.csdn.net/20161110153502439" width="180" height="50" align="center"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;author: 贺晓松&lt;/p&gt;
&lt;p&gt;在机器学习或是数据挖掘的算法当中，经常需要比较不同样本特征向量的相似性，进而作为下一步的判断依据。比方说最近数据挖掘领域比较火的精准营销、&lt;a href=&quot;http://www.doc88.com/p-0804527568994.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;定点广告投放&lt;/a&gt;、用户画像等。都需要计算不同数据样例特征向量的相似性，然后根据相似性或分类或排序等。因此，向量的相似性度量可以说是数据挖掘或机器学习领域的一个基础性工具。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://blog.pinbot.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://blog.pinbot.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>web客户端存储方式</title>
    <link href="http://blog.pinbot.me/2016/11/09/web%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.pinbot.me/2016/11/09/web存储方式/</id>
    <published>2016-11-09T10:30:30.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p>近来，在使用angular.js建立web应用时，使用到$cacheFactory缓存服务对应用中的一些数据进行缓存，以提高网站性能，减少数据请求量，突然想对web客户端存储方式做一个总结。<br>存储方式：</p>
<ul>
<li>cookie</li>
<li>localStorage</li>
<li>sessionStorage</li>
</ul>
<p>我们来一一说明。<br><a id="more"></a><br>假设有这样一种情况，在某个用例流程中，由A页面跳至B页面，若在A页面中采用JS用变量temp保存了某一变量的值，在B页面的时候，同样需要使用JS来引用temp的变量值，对于JS中的全局变量或者静态变量的生命周期是有限的，当发生页面跳转或者页面关闭的时候，这些变量的值会重新载入，即没有达到保存的效果。这个问题，就可以使用cookie或者localStorage来保存该变量的值。</p>
<h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie的使用在前端开发中是很普遍的，基本人尽皆知，简单说明一下，不做太多赘述。<br>cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页。<br>另外，稍微了解一下cookie的结构，简单地说：cookie是以键值对的形式保存的，即key=value的格式。各个cookie之间一般是以“;”分隔。<br>cookie的写入，读取，删除可参考：<a href="http://www.jb51.net/article/14566.htm" target="_blank" rel="external">http://www.jb51.net/article/14566.htm</a>。</p>
<h3 id="localstorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>localStorage是html5提供的新的存储数据的方法。<br>在localStorage之前，客户端的数据是由cookie保存的。但是cookie不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。而localStorage，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。<br>localStorage有以下几个特点：<br>1.localStorage是一个普通对象，任何对象的操作都适用。<br>2.localStorage对象的属性值只能是字符串。<br>3.localStorage支持的默认空间大小为5M,现代浏览器支持良好。除了IE７及以下不支持外，其他标准浏览器都完全支持。<br>4.localStorage本身带有方法有：<br>　　添加键值对：localStorage.setItem(key,value)<br>　　获取键值：localStorage.getItem(key)<br>　　删除键值对：localStorage.removeItem(key)。<br>　　清除所有键值对：localStorage.clear()。<br>　　获取localStorage的属性名称（键名称）：localStorage.key(index)。<br>5、没有时间限制的数据存储。不主动清除，localStorage一直存在。</p>
<p>另外，假设有这样一种情况，在某个用例流程中，我们希望数据在页面强制刷新的时候或者关闭的时候，数据自动清空，不污染下次进入页面的数据。在页面服务不中断的时候保存数据。这个时候就可以用sessionStorage。</p>
<h3 id="sessionstorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>sessionStorage和localStorage拥有完全一样的特点，唯一的区别是，sessionStorage在页面强制刷新的时候或者关闭的时候，数据自动清空。而localStorage需要主动清除。</p>
<p>既然是$cacheFactory缓存服务引发的对存储方式的思考。当然需要来介绍一下$cacheFactory缓存服务：</p>
<h3 id="angularjs-cachefactory-缓存服务"><a href="#AngularJs-cacheFactory-缓存服务" class="headerlink" title="AngularJs $cacheFactory 缓存服务"></a>AngularJs $cacheFactory 缓存服务</h3><p>完全适用于sessionStorage的应用场景。可用于缓存angular模版和其他数据。$cacheFactory存储的数据也可以在不同controller中传递。<br>$cacheFoctory<br>用于生成一个用来存储缓存对象的服务，并且提供对对象的访问。<br>$cacheFactory.Cache<br>一个用于存储和检索数据的缓存对象。主要使用$http和脚本指令来缓存模板和其他数据。<br>该服务有以下方法：<br>put(key,value);<br>在缓存对象中插入一个键值对(key,value)。</p>
<p>get(key);<br>在缓存对象中通过指定key获取对应的值。</p>
<p>romove(key);<br>在缓存对象中通过指定key删除对应的值。</p>
<p>removeAll();<br>删除缓存对象中所有的键值对。</p>
<p>destroy();<br>销毁这个缓存对象。</p>
<p>info();<br>获取缓存对象信息（id，size）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;存储方式&quot;&gt;&lt;a href=&quot;#存储方式&quot; class=&quot;headerlink&quot; title=&quot;存储方式&quot;&gt;&lt;/a&gt;存储方式&lt;/h3&gt;&lt;p&gt;近来，在使用angular.js建立web应用时，使用到$cacheFactory缓存服务对应用中的一些数据进行缓存，以提高网站性能，减少数据请求量，突然想对web客户端存储方式做一个总结。&lt;br&gt;存储方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;localStorage&lt;/li&gt;
&lt;li&gt;sessionStorage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来一一说明。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>影响Lucene对文档打分的四种方式</title>
    <link href="http://blog.pinbot.me/2016/11/09/%E5%BD%B1%E5%93%8DLucene%E5%AF%B9%E6%96%87%E6%A1%A3%E6%89%93%E5%88%86%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.pinbot.me/2016/11/09/影响Lucene对文档打分的四种方式/</id>
    <published>2016-11-09T10:00:04.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="影响lucene对文档打分的四种方式"><a href="#影响Lucene对文档打分的四种方式" class="headerlink" title="影响Lucene对文档打分的四种方式"></a>影响Lucene对文档打分的四种方式</h1><a id="more"></a>
<h3 id="在索引阶段设置document-boost和field-boost存储在nrm文件中"><a href="#在索引阶段设置Document-Boost和Field-Boost，存储在-nrm-文件中" class="headerlink" title="在索引阶段设置Document Boost和Field Boost，存储在(.nrm)文件中"></a>在索引阶段设置Document Boost和Field Boost，存储在(.nrm)文件中</h3><p>如果希望某些文档和某些域比其他的域更重要，如果此文档和此域包含所要查询的词则应该得分较高，则可以在索引阶段设定文档的boost和域的boost值。<br>这些值是在索引阶段就写入索引文件的，存储在标准化因子(.nrm)文件中，一旦设定，除非删除此文档，否则无法改变。<br>如果不进行设定，则Document Boost和Field Boost默认为1。<br>Document Boost及FieldBoost的设定方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Document doc = <span class="keyword">new</span> Document();</div><div class="line">Field f = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"hello world"</span>, Field.Store.NO, Field.Index.ANALYZED);</div><div class="line">f.setBoost(<span class="number">100</span>);</div><div class="line">doc.add(f);</div><div class="line">doc.setBoost(<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p>两者是如何影响Lucene的文档打分的呢？<br>让我们首先来看一下Lucene的文档打分的公式：<br>score(q,d)   =   coord(q,d)  ·  queryNorm(q)  ·  ∑( tf(t in d)  ·  idf(t)2  ·  t.getBoost() ·  norm(t,d) )<br>t in q</p>
<p>Document Boost和Field Boost影响的是norm(t, d)，其公式如下:<br>norm(t,d)   =   doc.getBoost()  ·  lengthNorm(field)  ·  ∏f.getBoost()<br>field f in d named as t</p>
<p>它包括三个参数：</p>
<ul>
<li>Document boost：此值越大，说明此文档越重要。</li>
<li>Field boost：此域越大，说明此域越重要。</li>
<li>lengthNorm(field) = (1.0 / Math.sqrt(numTerms))：一个域中包含的Term总数越多，也即文档越长，此值越小，文档越短，此值越大。<br>其中第三个参数可以在自己的Similarity中影响打分，下面会论述。</li>
</ul>
<p>当然，也可以在添加Field的时候，设置Field.Index.ANALYZED_NO_NORMS或Field.Index.NOT_ANALYZED_NO_NORMS，完全不用norm，来节约空间。</p>
<p>根据Lucene的注释，No norms means that index-time field and document boosting and field length normalization are disabled.  The benefit is less memory usage as norms take up one byte of RAM per indexed field for every document in the index, during searching.  Note that once you index a given field with norms enabled, disabling norms will have no effect. 没有norms意味着索引阶段禁用了文档boost和域的boost及长度标准化。好处在于节省内存，不用在搜索阶段为索引中的每篇文档的每个域都占用一个字节来保存norms信息了。但是对norms信息的禁用是必须全部域都禁用的，一旦有一个域不禁用，则其他禁用的域也会存放默认的norms值。因为为了加快norms的搜索速度，Lucene是根据文档号乘以每篇文档的norms信息所占用的大小来计算偏移量的，中间少一篇文档，偏移量将无法计算。也即norms信息要么都保存，要么都不保存。</p>
<p>下面几个试验可以验证norms信息的作用：</p>
<p>试验一：Document Boost的作用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormsDocBoost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"testNormsDocBoost"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  writer.setUseCompoundFile(<span class="keyword">false</span>); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc1.add(f1); </div><div class="line">  doc1.setBoost(<span class="number">100</span>); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common hello"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">  doc2.add(f2); </div><div class="line">  writer.addDocument(doc2); </div><div class="line">  Document doc3 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f3 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common common"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">  doc3.add(f3); </div><div class="line">  writer.addDocument(doc3); </div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir)); </div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader); </div><div class="line">  TopDocs docs = searcher.search(<span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"contents"</span>, <span class="string">"common"</span>)), <span class="number">10</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果第一篇文档的域f1也为Field.Index.ANALYZED_NO_NORMS的时候，搜索排名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docid : 2 score : 1.2337708 </div><div class="line">docid : 1 score : 1.0073696 </div><div class="line">docid : 0 score : 0.71231794</div></pre></td></tr></table></figure></p>
<p>如果第一篇文档的域f1设为Field.Index.ANALYZED，则搜索排名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docid : 0 score : 39.889805 </div><div class="line">docid : 2 score : 0.6168854 </div><div class="line">docid : 1 score : 0.5036848</div></pre></td></tr></table></figure></p>
<p>试验二：Field Boost的作用<br>如果我们觉得title要比contents要重要，可以做一下设定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormsFieldBoost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"testNormsFieldBoost"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  writer.setUseCompoundFile(<span class="keyword">false</span>); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"title"</span>, <span class="string">"common hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  f1.setBoost(<span class="number">100</span>);</div><div class="line">  doc1.add(f1); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common hello"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">  doc2.add(f2); </div><div class="line">  writer.addDocument(doc2); </div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir)); </div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader); </div><div class="line">  QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"contents"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)); </div><div class="line">  Query query = parser.parse(<span class="string">"title:common contents:common"</span>); </div><div class="line">  TopDocs docs = searcher.search(query, <span class="number">10</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果第一篇文档的域f1也为Field.Index.ANALYZED_NO_NORMS的时候，搜索排名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 1 score : 0.49999997 </div><div class="line">docid : 0 score : 0.35355338</div></pre></td></tr></table></figure></p>
<p>如果第一篇文档的域f1设为Field.Index.ANALYZED，则搜索排名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 0 score : 19.79899 </div><div class="line">docid : 1 score : 0.49999997</div></pre></td></tr></table></figure></p>
<p>试验三：norms中文档长度对打分的影响<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormsLength</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"testNormsLength"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  writer.setUseCompoundFile(<span class="keyword">false</span>); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">  doc1.add(f1); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common hello hello hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">  doc2.add(f2); </div><div class="line">  writer.addDocument(doc2); </div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir)); </div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader); </div><div class="line">  QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"contents"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)); </div><div class="line">  Query query = parser.parse(<span class="string">"title:common contents:common"</span>); </div><div class="line">  TopDocs docs = searcher.search(query, <span class="number">10</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当norms被禁用的时候，包含两个common的第二篇文档打分较高：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 1 score : 0.13928263 </div><div class="line">docid : 0 score : 0.09848769</div></pre></td></tr></table></figure></p>
<p>当norms起作用的时候，虽然包含两个common的第二篇文档，由于长度较长，因而打分较低：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 0 score : 0.09848769 </div><div class="line">docid : 1 score : 0.052230984</div></pre></td></tr></table></figure></p>
<p>试验四：norms信息要么都保存，要么都不保存的特性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOmitNorms</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"testOmitNorms"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  writer.setUseCompoundFile(<span class="keyword">false</span>); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"title"</span>, <span class="string">"common hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc1.add(f1); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; </div><div class="line">    Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">    Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common hello hello hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED_NO_NORMS); </div><div class="line">    doc2.add(f2); </div><div class="line">    writer.addDocument(doc2); </div><div class="line">  &#125; </div><div class="line">  writer.close(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们添加10001篇文档，所有的文档都设为Field.Index.ANALYZED_NO_NORMS的时候，我们看索引文件，发现.nrm文件只有1K，也即其中除了保持一定的格式信息，并无其他数据。<br><img src="http://img.pinbot.me:8080/uploads/2016/11/11/blob_1478794734003.png" alt="2016-11-11-截图" title="blob_1478794734003.png"><br>当我们把第一篇文档设为Field.Index.ANALYZED，而其他10000篇文档都设为Field.Index.ANALYZED_NO_NORMS的时候，发现.nrm文件又10K，也即所有的文档都存储了norms信息，而非只有第一篇文档。<br><img src="http://img.pinbot.me:8080/uploads/2016/11/11/blob_1478794821028.png" alt="2016-11-11-截图" title="blob_1478794821028.png"></p>
<h3 id="在搜索语句中设置query-boost"><a href="#在搜索语句中，设置Query-Boost" class="headerlink" title="在搜索语句中，设置Query Boost."></a>在搜索语句中，设置Query Boost.</h3><p>在搜索中，我们可以指定，某些词对我们来说更重要，我们可以设置这个词的boost：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">common^4 hello</div></pre></td></tr></table></figure></p>
<p>使得包含common的文档比包含hello的文档获得更高的分数。<br>由于在Lucene中，一个Term定义为Field:Term，则也可以影响不同域的打分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">title:common^4 content:common</div></pre></td></tr></table></figure></p>
<p>使得title中包含common的文档比content中包含common的文档获得更高的分数。<br>实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBoost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"TestQueryBoost"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common1 hello hello"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc1.add(f1); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common2 common2 hello"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc2.add(f2); </div><div class="line">  writer.addDocument(doc2); </div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir)); </div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader); </div><div class="line">  QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"contents"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)); </div><div class="line">  Query query = parser.parse(<span class="string">"common1 common2"</span>); </div><div class="line">  TopDocs docs = searcher.search(query, <span class="number">10</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据tf/idf，包含两个common2的第二篇文档打分较高：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 1 score : 0.24999999 </div><div class="line">docid : 0 score : 0.17677669</div></pre></td></tr></table></figure></p>
<p>如果我们输入的查询语句为：”common1^100 common2”，则第一篇文档打分较高：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 0 score : 0.2499875 </div><div class="line">docid : 1 score : 0.0035353568</div></pre></td></tr></table></figure></p>
<p>那Query Boost是如何影响文档打分的呢？<br>根据Lucene的打分计算公式：<br>score(q,d)   =   coord(q,d)  ·  queryNorm(q)  · ∑( tf(t in d)  ·  idf(t)2  ·  t.getBoost() ·  norm(t,d) )<br>t in q<br>注：在queryNorm的部分，也有q.getBoost()的部分，但是对query向量的归一化(见向量空间模型与Lucene的打分机制[<a href="http://forfuture1978.javaeye.com/blog/588721])。" target="_blank" rel="external">http://forfuture1978.javaeye.com/blog/588721])。</a></p>
<h3 id="继承并实现自己的similarity"><a href="#继承并实现自己的Similarity" class="headerlink" title="继承并实现自己的Similarity"></a>继承并实现自己的Similarity</h3><p>Similariy是计算Lucene打分的最主要的类，实现其中的很多借口可以干预打分的过程。<br>(1) float computeNorm(String field, FieldInvertState state)<br>(2) float lengthNorm(String fieldName, int numTokens)<br>(3) float queryNorm(float sumOfSquaredWeights)<br>(4) float tf(float freq)<br>(5) float idf(int docFreq, int numDocs)<br>(6) float coord(int overlap, int maxOverlap)<br>(7) float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)</p>
<p>它们分别影响Lucene打分计算的如下部分：<br>score(q,d)   =   (6)coord(q,d)  ·  (3)queryNorm(q)  · ∑( (4)tf(t in d)  ·  (5)idf(t)2  ·  t.getBoost() ·  (1)norm(t,d) )<br>t in q<br>norm(t,d)   =   doc.getBoost()  ·  (2)lengthNorm(field)  ·  ∏f.getBoost()<br>field f in d named as t</p>
<p>下面逐个进行解释：<br>(1) float computeNorm(String field, FieldInvertState state)<br>影响标准化因子的计算，如上述，他主要包含了三部分：文档boost，域boost，以及文档长度归一化。此函数一般按照上面norm(t, d)的公式进行计算。<br>(2) float lengthNorm(String fieldName, int numTokens)<br>主要计算文档长度的归一化，默认是1.0 / Math.sqrt(numTerms)。<br>因为在索引中，不同的文档长度不一样，很显然，对于任意一个term，在长的文档中的tf要大的多，因而分数也越高，这样对小的文档不公平，举一个极端的例子，在一篇1000万个词的鸿篇巨著中，”lucene”这个词出现了11次，而在一篇12个词的短小文档中，”lucene”这个词出现了10次，如果不考虑长度在内，当然鸿篇巨著应该分数更高，然而显然这篇小文档才是真正关注”lucene”的。<br>因而在此处是要除以文档的长度，从而减少因文档长度带来的打分不公。<br>然而现在这个公式是偏向于首先返回短小的文档的，这样在实际应用中使得搜索结果也很难看。<br>于是在实践中，要根据项目的需要，根据搜索的领域，改写lengthNorm的计算公式。比如我想做一个经济学论文的搜索系统，经过一定时间的调研，发现大多数的经济学论文的长度在8000到10000词，因而lengthNorm的公式应该是一个倒抛物线型的，8000到10000词的论文分数最高，更短或更长的分数都应该偏低，方能够返回给用户最好的数据。<br>(3) float queryNorm(float sumOfSquaredWeights)<br>这是按照向量空间模型，对query向量的归一化。此值并不影响排序，而仅仅使得不同的query之间的分数可以比较。<br>(4) float tf(float freq)<br>freq是指在一篇文档中包含的某个词的数目。tf是根据此数目给出的分数，默认为Math.sqrt(freq)。也即此项并不是随着包含的数目的增多而线性增加的。<br>(5) float idf(int docFreq, int numDocs)<br>idf是根据包含某个词的文档数以及总文档数计算出的分数，默认为(Math.log(numDocs/(double)(docFreq+1)) + 1.0)。<br>由于此项计算涉及到总文档数和包含此词的文档数，因而需要全局的文档数信息，这给跨索引搜索造成麻烦。<br>从下面的例子我们可以看出，用MultiSearcher来一起搜索两个索引和分别用IndexSearcher来搜索两个索引所得出的分数是有很大差异的。<br>究其原因是MultiSearcher的docFreq(Term term)函数计算了包含两个索引中包含此词的总文档数，而IndexSearcher仅仅计算了每个索引中包含此词的文档数。当两个索引包含的文档总数是有很大不同的时候，分数是无法比较的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line">  MultiIndexSimilarity sim = <span class="keyword">new</span> MultiIndexSimilarity(); </div><div class="line">  File indexDir01 = <span class="keyword">new</span> File(<span class="string">"TestMultiIndex/TestMultiIndex01"</span>); </div><div class="line">  File indexDir02 = <span class="keyword">new</span> File(<span class="string">"TestMultiIndex/TestMultiIndex02"</span>); </div><div class="line">  IndexReader reader01 = IndexReader.open(FSDirectory.open(indexDir01)); </div><div class="line">  IndexReader reader02 = IndexReader.open(FSDirectory.open(indexDir02)); </div><div class="line">  IndexSearcher searcher01 = <span class="keyword">new</span> IndexSearcher(reader01); </div><div class="line">  searcher01.setSimilarity(sim); </div><div class="line">  IndexSearcher searcher02 = <span class="keyword">new</span> IndexSearcher(reader02); </div><div class="line">  searcher02.setSimilarity(sim); </div><div class="line">  MultiSearcher multiseacher = <span class="keyword">new</span> MultiSearcher(searcher01, searcher02); </div><div class="line">  multiseacher.setSimilarity(sim); </div><div class="line">  QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"contents"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)); </div><div class="line">  Query query = parser.parse(<span class="string">"common"</span>); </div><div class="line">  TopDocs docs = searcher01.search(query, <span class="number">10</span>); </div><div class="line">  System.out.println(<span class="string">"----------------------------------------------"</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">  System.out.println(<span class="string">"----------------------------------------------"</span>); </div><div class="line">  docs = searcher02.search(query, <span class="number">10</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">  System.out.println(<span class="string">"----------------------------------------------"</span>); </div><div class="line">  docs = multiseacher.search(query, <span class="number">20</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">结果为：</div><div class="line"></div><div class="line">------------------------------- </div><div class="line">docid : 0 score : 0.49317428 </div><div class="line">docid : 1 score : 0.49317428 </div><div class="line">docid : 2 score : 0.49317428 </div><div class="line">docid : 3 score : 0.49317428 </div><div class="line">docid : 4 score : 0.49317428 </div><div class="line">docid : 5 score : 0.49317428 </div><div class="line">docid : 6 score : 0.49317428 </div><div class="line">docid : 7 score : 0.49317428 </div><div class="line">------------------------------- </div><div class="line">docid : 0 score : 0.45709616 </div><div class="line">docid : 1 score : 0.45709616 </div><div class="line">docid : 2 score : 0.45709616 </div><div class="line">docid : 3 score : 0.45709616 </div><div class="line">docid : 4 score : 0.45709616 </div><div class="line">------------------------------- </div><div class="line">docid : 0 score : 0.5175894 </div><div class="line">docid : 1 score : 0.5175894 </div><div class="line">docid : 2 score : 0.5175894 </div><div class="line">docid : 3 score : 0.5175894 </div><div class="line">docid : 4 score : 0.5175894 </div><div class="line">docid : 5 score : 0.5175894 </div><div class="line">docid : 6 score : 0.5175894 </div><div class="line">docid : 7 score : 0.5175894 </div><div class="line">docid : 8 score : 0.5175894 </div><div class="line">docid : 9 score : 0.5175894 </div><div class="line">docid : 10 score : 0.5175894 </div><div class="line">docid : 11 score : 0.5175894 </div><div class="line">docid : 12 score : 0.5175894</div></pre></td></tr></table></figure>
<p>(6) float coord(int overlap, int maxOverlap)<br>一次搜索可能包含多个搜索词，而一篇文档中也可能包含多个搜索词，此项表示，当一篇文档中包含的搜索词越多，则此文档则打分越高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestCoord</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">  MySimilarity sim = <span class="keyword">new</span> MySimilarity(); </div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"TestCoord"</span>); </div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED); </div><div class="line">  Document doc1 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common hello world"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc1.add(f1); </div><div class="line">  writer.addDocument(doc1); </div><div class="line">  Document doc2 = <span class="keyword">new</span> Document(); </div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common common common"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">  doc2.add(f2); </div><div class="line">  writer.addDocument(doc2); </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123; </div><div class="line">    Document doc3 = <span class="keyword">new</span> Document(); </div><div class="line">    Field f3 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"world"</span>, Field.Store.NO, Field.Index.ANALYZED); </div><div class="line">    doc3.add(f3); </div><div class="line">    writer.addDocument(doc3); </div><div class="line">  &#125; </div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir)); </div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader); </div><div class="line">  searcher.setSimilarity(sim); </div><div class="line">  QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"contents"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)); </div><div class="line">  Query query = parser.parse(<span class="string">"common world"</span>); </div><div class="line">  TopDocs docs = searcher.search(query, <span class="number">2</span>); </div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123; </div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySimilarity</span> <span class="keyword">extends</span> <span class="title">Similarity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">coord</span><span class="params">(<span class="keyword">int</span> overlap, <span class="keyword">int</span> maxOverlap)</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面的实例，当coord返回1，不起作用的时候，文档一虽然包含了两个搜索词common和world，但由于world的所在的文档数太多，而文档二包含common的次数比较多，因而文档二分数较高：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 1 score : 1.9059997 </div><div class="line">docid : 0 score : 1.2936771</div></pre></td></tr></table></figure></p>
<p>而当coord起作用的时候，文档一由于包含了两个搜索词而分数较高：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySimilarity</span> <span class="keyword">extends</span> <span class="title">Similarity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">coord</span><span class="params">(<span class="keyword">int</span> overlap, <span class="keyword">int</span> maxOverlap)</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> overlap / (<span class="keyword">float</span>)maxOverlap; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docid : 0 score : 1.2936771 </div><div class="line">docid : 1 score : 0.95299983</div></pre></td></tr></table></figure>
<p>(7) float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)<br>由于Lucene引入了payload，因而可以存储一些自己的信息，用户可以根据自己存储的信息，来影响Lucene的打分。<br>payload的定义<br>我们知道，索引是以倒排表形式存储的，对于每一个词，都保存了包含这个词的一个链表，当然为了加快查询速度，此链表多用跳跃表进行存储。<br>Payload信息就是存储在倒排表中的，同文档号一起存放，多用于存储与每篇文档相关的一些信息。当然这部分信息也可以存储域里(stored Field)，两者从功能上基本是一样的，然而当要存储的信息很多的时候，存放在倒排表里，利用跳跃表，有利于大大提高搜索速度。<br>Payload的存储方式如下图：<br><img src="http://img.pinbot.me:8080/uploads/2016/11/11/blob_1478795553315.png" alt="2016-11-11-截图" title="blob_1478795553315.png"><br>由payload的定义，我们可以看出，payload可以存储一些不但与文档相关，而且与查询词也相关的信息。比如某篇文档的某个词有特殊性，则可以在这个词的这个文档的position信息后存储payload信息，使得当搜索这个词的时候，这篇文档获得较高的分数。<br>要利用payload来影响查询需要做到以下几点，下面举例用<b></b>标记的词在payload中存储1，否则存储0：<br>首先要实现自己的Analyzer从而在Token中放入payload信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoldAnalyzer</span> <span class="keyword">extends</span> <span class="title">Analyzer</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> TokenStream <span class="title">tokenStream</span><span class="params">(String fieldName, Reader reader)</span> </span>&#123;</div><div class="line">    TokenStream result = <span class="keyword">new</span> WhitespaceTokenizer(reader);</div><div class="line">    result = <span class="keyword">new</span> BoldFilter(result);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoldFilter</span> <span class="keyword">extends</span> <span class="title">TokenFilter</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> IS_NOT_BOLD = <span class="number">0</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> IS_BOLD = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> TermAttribute termAtt;</div><div class="line">  <span class="keyword">private</span> PayloadAttribute payloadAtt;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">BoldFilter</span><span class="params">(TokenStream input)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(input);</div><div class="line">    termAtt = addAttribute(TermAttribute.class);</div><div class="line">    payloadAtt = addAttribute(PayloadAttribute.class);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">incrementToken</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (input.incrementToken()) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">final</span> <span class="keyword">char</span>[] buffer = termAtt.termBuffer();</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> length = termAtt.termLength();</div><div class="line"></div><div class="line">      String tokenstring = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, length);</div><div class="line">      <span class="keyword">if</span> (tokenstring.startsWith(<span class="string">"&lt;b&gt;"</span>) &amp;&amp; tokenstring.endsWith(<span class="string">"&lt;/b&gt;"</span>)) &#123;</div><div class="line">        tokenstring = tokenstring.replace(<span class="string">"&lt;b&gt;"</span>, <span class="string">""</span>);</div><div class="line">        tokenstring = tokenstring.replace(<span class="string">"&lt;/b&gt;"</span>, <span class="string">""</span>);</div><div class="line">        termAtt.setTermBuffer(tokenstring);</div><div class="line">        payloadAtt.setPayload(<span class="keyword">new</span> Payload(int2bytes(IS_BOLD)));</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        payloadAtt.setPayload(<span class="keyword">new</span> Payload(int2bytes(IS_NOT_BOLD)));</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bytes2int</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mask = <span class="number">0xff</span>;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">      res &lt;&lt;= <span class="number">8</span>;</div><div class="line">      temp = b[i] &amp; mask;</div><div class="line">      res |= temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] int2bytes(<span class="keyword">int</span> num) &#123;</div><div class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">      b[i] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; (<span class="number">24</span> - i * <span class="number">8</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，实现自己的Similarity，从payload中读出信息，根据信息来打分。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayloadSimilarity</span> <span class="keyword">extends</span> <span class="title">DefaultSimilarity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">scorePayload</span><span class="params">(<span class="keyword">int</span> docId, String fieldName, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">byte</span>[] payload, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> isbold = BoldFilter.bytes2int(payload);</div><div class="line">    <span class="keyword">if</span>(isbold == BoldFilter.IS_BOLD)&#123;</div><div class="line">      System.out.println(<span class="string">"It is a bold char."</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      System.out.println(<span class="string">"It is not a bold char."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，查询的时候，一定要用PayloadXXXQuery(在此用PayloadTermQuery，在Lucene 2.4.1中，用BoostingTermQuery)，否则scorePayload不起作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPayloadScore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  PayloadSimilarity sim = <span class="keyword">new</span> PayloadSimilarity();</div><div class="line">  File indexDir = <span class="keyword">new</span> File(<span class="string">"TestPayloadScore"</span>);</div><div class="line">  IndexWriter writer = <span class="keyword">new</span> IndexWriter(FSDirectory.open(indexDir), <span class="keyword">new</span> BoldAnalyzer(), <span class="keyword">true</span>, IndexWriter.MaxFieldLength.LIMITED);</div><div class="line">  Document doc1 = <span class="keyword">new</span> Document();</div><div class="line">  Field f1 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common hello world"</span>, Field.Store.NO, Field.Index.ANALYZED);</div><div class="line">  doc1.add(f1);</div><div class="line">  writer.addDocument(doc1);</div><div class="line">  Document doc2 = <span class="keyword">new</span> Document();</div><div class="line">  Field f2 = <span class="keyword">new</span> Field(<span class="string">"contents"</span>, <span class="string">"common &lt;b&gt;hello&lt;/b&gt; world"</span>, Field.Store.NO, Field.Index.ANALYZED);</div><div class="line">  doc2.add(f2);</div><div class="line">  writer.addDocument(doc2);</div><div class="line">  writer.close();</div><div class="line"></div><div class="line">  IndexReader reader = IndexReader.open(FSDirectory.open(indexDir));</div><div class="line">  IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">  searcher.setSimilarity(sim);</div><div class="line">  PayloadTermQuery query = <span class="keyword">new</span> PayloadTermQuery(<span class="keyword">new</span> Term(<span class="string">"contents"</span>, <span class="string">"hello"</span>), <span class="keyword">new</span> MaxPayloadFunction());</div><div class="line">  TopDocs docs = searcher.search(query, <span class="number">10</span>);</div><div class="line">  <span class="keyword">for</span> (ScoreDoc doc : docs.scoreDocs) &#123;</div><div class="line">    System.out.println(<span class="string">"docid : "</span> + doc.doc + <span class="string">" score : "</span> + doc.score);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果scorePayload函数始终是返回1，则结果如下，<b></b>不起作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">It is not a bold char.</div><div class="line">It is a bold char.</div><div class="line">docid : 0 score : 0.2101998</div><div class="line">docid : 1 score : 0.2101998</div></pre></td></tr></table></figure></p>
<p>如果scorePayload函数如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayloadSimilarity</span> <span class="keyword">extends</span> <span class="title">DefaultSimilarity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">scorePayload</span><span class="params">(<span class="keyword">int</span> docId, String fieldName, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">byte</span>[] payload, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> isbold = BoldFilter.bytes2int(payload);</div><div class="line">    <span class="keyword">if</span>(isbold == BoldFilter.IS_BOLD)&#123;</div><div class="line">      System.out.println(<span class="string">"It is a bold char."</span>);</div><div class="line">      <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      System.out.println(<span class="string">"It is not a bold char."</span>);</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则结果如下，同样是包含hello，包含加粗的文档获得较高分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">It is not a bold char.</div><div class="line">It is a bold char.</div><div class="line">docid : 1 score : 2.101998</div><div class="line">docid : 0 score : 0.2101998</div></pre></td></tr></table></figure></p>
<h3 id="继承并实现自己的collector"><a href="#继承并实现自己的collector" class="headerlink" title="继承并实现自己的collector"></a>继承并实现自己的collector</h3><p>以上各种方法，已经把Lucene score计算公式的所有变量都涉及了，如果这还不能满足您的要求，还可以继承实现自己的collector。<br>在Lucene 2.4中，HitCollector有个函数public abstract void collect(int doc, float score)，用来收集搜索的结果。<br>其中TopDocCollector的实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">(<span class="keyword">int</span> doc, <span class="keyword">float</span> score)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (score &gt; <span class="number">0.0f</span>) &#123;</div><div class="line">    totalHits++;</div><div class="line">    <span class="keyword">if</span> (reusableSD == <span class="keyword">null</span>) &#123;</div><div class="line">      reusableSD = <span class="keyword">new</span> ScoreDoc(doc, score);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= reusableSD.score) &#123;</div><div class="line">      reusableSD.doc = doc;</div><div class="line">      reusableSD.score = score;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    reusableSD = (ScoreDoc) hq.insertWithOverflow(reusableSD);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此函数将docid和score插入一个PriorityQueue中，使得得分最高的文档先返回。<br>我们可以继承HitCollector，并在此函数中对score进行修改，然后再插入PriorityQueue，或者插入自己的数据结构。<br>比如我们在另外的地方存储docid和文档创建时间的对应，我们希望当文档时间是一天之内的分数最高，一周之内的分数其次，一个月之外的分数很低。<br>我们可以这样修改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> milisecondsOneDay = <span class="number">24L</span> * <span class="number">3600L</span> * <span class="number">1000L</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> millisecondsOneWeek = <span class="number">7L</span> * <span class="number">24L</span> * <span class="number">3600L</span> * <span class="number">1000L</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> millisecondsOneMonth = <span class="number">30L</span> * <span class="number">24L</span> * <span class="number">3600L</span> * <span class="number">1000L</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">(<span class="keyword">int</span> doc, <span class="keyword">float</span> score)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (score &gt; <span class="number">0.0f</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> time = getTimeByDocId(doc);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(time &lt; milisecondsOneDay) &#123;</div><div class="line"></div><div class="line">        score = score * <span class="number">1.0</span>;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &lt; millisecondsOneWeek)&#123;</div><div class="line"></div><div class="line">        score = score * <span class="number">0.8</span>;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &lt; millisecondsOneMonth) &#123;</div><div class="line"></div><div class="line">        score = score * <span class="number">0.3</span>;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        score = score * <span class="number">0.1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    totalHits++;</div><div class="line">    <span class="keyword">if</span> (reusableSD == <span class="keyword">null</span>) &#123;</div><div class="line">      reusableSD = <span class="keyword">new</span> ScoreDoc(doc, score);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= reusableSD.score) &#123;</div><div class="line">      reusableSD.doc = doc;</div><div class="line">      reusableSD.score = score;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    reusableSD = (ScoreDoc) hq.insertWithOverflow(reusableSD);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Lucene 3.0中，Collector接口为void collect(int doc)，TopScoreDocCollector实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">(<span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">float</span> score = scorer.score();</div><div class="line">  totalHits++;</div><div class="line">  <span class="keyword">if</span> (score &lt;= pqTop.score) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  pqTop.doc = doc + docBase;</div><div class="line">  pqTop.score = score;</div><div class="line">  pqTop = pq.updateTop();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样可以用上面的方式影响其打分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;影响Lucene对文档打分的四种方式&quot;&gt;&lt;a href=&quot;#影响Lucene对文档打分的四种方式&quot; class=&quot;headerlink&quot; title=&quot;影响Lucene对文档打分的四种方式&quot;&gt;&lt;/a&gt;影响Lucene对文档打分的四种方式&lt;/h1&gt;
    
    </summary>
    
      <category term="搜索引擎" scheme="http://blog.pinbot.me/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.pinbot.me/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="apache lucene" scheme="http://blog.pinbot.me/tags/apache-lucene/"/>
    
  </entry>
  
  <entry>
    <title>django自定义storage</title>
    <link href="http://blog.pinbot.me/2016/11/09/django%E8%87%AA%E5%AE%9A%E4%B9%89storage/"/>
    <id>http://blog.pinbot.me/2016/11/09/django自定义storage/</id>
    <published>2016-11-09T07:48:37.000Z</published>
    <updated>2017-06-30T02:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到了这样的一个问题，由于某些原因，需要把静态文件放到cdn上，之前使用的是django默认的storage（FileSystemStorage）。于是这里需要自定义storage。<br>第一次写storage，过程中遇到一些坑，记录下来。<br><a id="more"></a></p>
<h2 id="什么是storage"><a href="#什么是storage" class="headerlink" title="什么是storage"></a>什么是storage</h2><p>其实这个玩意要我说明白，好像有点难，于是我就按我的方法说，如果有错，谢谢指正！<br>首先，我们的web中使用了许多的模版文件，静态文件，如js,css，图片这些，我们在配置服务器的时候，让nginx对请求进行分发，将动态请求分发给uWSGI，将静态文件交由nginx处理，这里nginx将从文件系统中读取静态资源，这里的文件系统就是我们当前的storage。<br>但是这里我们是想用cdn，于是我们这里的静态资源不在从服务器上加载，而是从我们的cdn服务提供商那里加载，这里我们又有一个问题了，cdn服务提供商怎么给出正确的资源，于是我们就需要自己来写一个storage，将原来的文件系统更换为cdn提供商的空间。</p>
<h2 id="storage的结构和重写"><a href="#storage的结构和重写" class="headerlink" title="storage的结构和重写"></a>storage的结构和重写</h2><p>这里就需要参考django的官方文档了(<a href="https://docs.djangoproject.com/en/1.9/howto/custom-file-storage/" target="_blank" rel="external">原版</a>,<a href="http://python.usyiyi.cn/django/howto/custom-file-storage.html" target="_blank" rel="external">翻译版</a>)，由于我的外语水平不是很好，做的时候为了图效率，就没有花时间去琢磨英文官方文档，所以这里给一个翻译的文档地址，当然，如果你能很快看明白官方的文档，那去读原版是更好的选择。<br>首先，我们看文件系统的基类，其源码位于<code>django/core/files/storage.py</code>文件下。这里我就不贴它的代码了，如果需要查看结构，请自行到该文件下查看！<br>从文档中，我们可以了解的一些东西，这个类的子类需要不带参数实例化，于是我们需要在settings中加入自定义的参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">STATICFILES_STORAGE = <span class="string">'project.storage.CustomStorage'</span></div><div class="line">CUSTOM_STORAGE_OPTIONS = &#123;</div><div class="line">    <span class="string">'AccessKeyId'</span>: <span class="string">'your_accesskeyid'</span>,</div><div class="line">    <span class="string">'AccessKeySecret'</span>: <span class="string">'your_accesskeyidsecret'</span>,</div><div class="line">    <span class="string">'endpoint'</span>: <span class="string">'oss-cn-hangzhou.aliyuncs.com'</span>,</div><div class="line">    <span class="string">'oss_url'</span>: <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>,</div><div class="line">    <span class="string">'bucketname'</span>: <span class="string">'your_bucketname'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">COMPRESS_STORAGE = <span class="string">'project.storage.CustomCompressorFileStorage'</span></div><div class="line">STATIC_URL = <span class="string">'your_cdn_prefix_address'</span></div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>这里我们指定了STATICFILES_STORAGE为我们自定义的CustomStorage,如果不指定，那么系统将会使用默认的FileSystemStorage</li>
<li>CUSTOM_STORAGE_OPTIONS是一个你自定义的Storage初始化参数，这里我用字典来初始化，当然，你可以使用你觉得合理的任何数据类型。</li>
<li>COMPRESS_STORAGE是我们指定的压缩文件的存放位置，与STATICFILES_STORAGE同理。</li>
<li>STATIC_URL这个就是静态文件的路由前缀，例如你的文件系统中路径是’aa/bb.js’，你的cdn地址是’static.cdn.com’，这里就使用cdn地址作为你的STATIC_URL</li>
</ul>
<p>从文档中，我们可以知道，自定义的storage，必须实现_open,_save两个方法，我们参考源码可以知道，这两个方法分别被save和open两个方法调用，而这两个方法的作用分别是‘打开文件，读取内容’、‘将文件保存到指定的位置’，由此，我们需要自己定义的存储就在这里来实现。<br>由于这里我采用的是阿里云的oss，所以认证的过程，我们放在构造函数中完成，本着<code>D.R.Y</code>的原则，为了让多个自定义的storage可以使用，我们将它放在外部，只在构造函数里来使用它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">authticate</span><span class="params">(option)</span>:</span></div><div class="line">    auth = oss2.Auth(</div><div class="line">        option.get(<span class="string">'AccessKeyId'</span>),</div><div class="line">        option.get(<span class="string">'AccessKeySecret'</span>)</div><div class="line">    )</div><div class="line">    service = oss2.Service(</div><div class="line">        auth,</div><div class="line">        option.get(<span class="string">'endpoint'</span>)</div><div class="line">    )</div><div class="line">    bucket = oss2.Bucket(</div><div class="line">        auth,</div><div class="line">        option.get(<span class="string">'oss_url'</span>),</div><div class="line">        option.get(<span class="string">'bucketname'</span>)</div><div class="line">    )</div><div class="line"><span class="keyword">return</span> (auth, service, bucket)</div></pre></td></tr></table></figure></p>
<p>认证过后，就可以重写save过程了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_save</span><span class="params">(self, name, content)</span>:</span></div><div class="line">    self.bucket.put_object(</div><div class="line">        name,</div><div class="line">        content</div><div class="line">    )</div><div class="line">    <span class="keyword">return</span> name</div></pre></td></tr></table></figure></p>
<p>这里我们使用的是阿里云的oss，它的save就这么简单。文档可以直接google阿里云oss！这里就不贴出来了！<br>哈哈，这里是不是很简单！其实理解了它的各个方法，真的很简单…………<br>继续，由于open方法是打开本地文件系统的文件，我们就不重写它了。<br>其他的方法。文档中说到，delete()，exists()，listdir()，size()，url() 这几个方法都需要被覆写，不然就会抛出NotImplementedError异常。<br>这里我们通过源码可以解释一下，这些玩意在干嘛。</p>
<ul>
<li>delete方法：顾名思义，就是删除，此方法被调用时，从storage中删除文件</li>
<li>exists方法：额，还是顾名思义，就是判断是否存在该文件，返回布尔值</li>
<li>listdir方法：返回文件列表</li>
<li>size方法：返回文件大小</li>
<li>url方法：这个方法需要提一下，我在之前重写的时候，直接pass了，所以，我在打开xadmin时，就会一直报错，于是我就找了很久的原因，我在这个函数中下了断点，最后发现，这个函数是必须自己重新写的（如果你的文件是静态文件，可以通过url访问的话）。因为如果不重写它，返回的是一个None，于是该文件就没有url可以访问，在某些需要判断的地方，也会报错！</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不同的云服务提供商的上传方式可能不一样，但是原理都是一样的，重写save方法，改为上传到云端，重写需要使用的方法。最后collectstatic,compress即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到了这样的一个问题，由于某些原因，需要把静态文件放到cdn上，之前使用的是django默认的storage（FileSystemStorage）。于是这里需要自定义storage。&lt;br&gt;第一次写storage，过程中遇到一些坑，记录下来。&lt;br&gt;
    
    </summary>
    
      <category term="django" scheme="http://blog.pinbot.me/categories/django/"/>
    
    
      <category term="django" scheme="http://blog.pinbot.me/tags/django/"/>
    
      <category term="技术" scheme="http://blog.pinbot.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化</title>
    <link href="http://blog.pinbot.me/2016/11/09/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.pinbot.me/2016/11/09/mysql性能优化/</id>
    <published>2016-11-09T07:48:37.000Z</published>
    <updated>2017-06-30T02:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：liudong at 2016-11-09 15:48:37</p>
<p>##1、为查询优化你的查询<br>大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 查询缓存不开启</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE     signup_date &gt;= CURDATE()&quot;);</div><div class="line"></div><div class="line">// 开启查询缓存</div><div class="line">$today = date(&quot;Y-m-d&quot;);</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE signup_date &gt;= &apos;$today&apos;&quot;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>区别： CURDATE() ，MySQL的查询缓存对这个函数不起作用。所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</p>
<p>##2、EXPLAIN 你的SELECT查询<br>使用EXPLAIN关键字可以让你知道MySQL是如何处理你的SQL语句的。</p>
<p>有表关联的查询，如下列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select username, group_name</div><div class="line">from users u</div><div class="line">joins groups g on (u.group_id = g.id)</div></pre></td></tr></table></figure></p>
<p>发现查询缓慢，然后在group_id字段上增加索引，则会加快查询</p>
<p>##3、当只要一行数据时使用LIMIT 1<br>当你查询表的有些时候，你已经知道结果只会有一条结果，单因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。<br>在这种情况下，加上LIMIT 1 可以增加性能。这样一样， MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合记录的数据。<br>下面的示例，只是为了找一下是否有“成都”的用户，很明显，后面的会比前面的更有效率。（请注意，第一条中是Select *，第二条是Select 1）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 没有效率的：</div><div class="line">$r = mysql_query(&quot;SELECT * FROM user WHERE country = &apos;China&apos;&quot;);</div><div class="line">if (mysql_num_rows($r) &gt; 0) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 有效率的：</div><div class="line">$r = mysql_query(&quot;SELECT 1 FROM user WHERE country = &apos;China&apos; LIMIT 1&quot;);</div><div class="line">if (mysql_num_rows($r) &gt; 0) &#123;</div><div class="line">// ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##4、为搜索字段建索引<br>索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么，请为其建立索引吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">添加PRIMARY KEY（主键索引）</div><div class="line">mysql&gt;ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )</div><div class="line"></div><div class="line">添加UNIQUE(唯一索引)</div><div class="line">mysql&gt;ALTER TABLE `table_name` ADD UNIQUE (</div><div class="line">`column`</div><div class="line">)</div><div class="line"></div><div class="line">添加INDEX(普通索引)</div><div class="line">mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name ( `column` )</div><div class="line"></div><div class="line"></div><div class="line">添加FULLTEXT(全文索引)</div><div class="line">mysql&gt;ALTER TABLE `table_name` ADD FULLTEXT (</div><div class="line">`column`</div><div class="line">)</div><div class="line"></div><div class="line">添加多列索引</div><div class="line">mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</div></pre></td></tr></table></figure></p>
<p>##5、在Join表的时候使用相当类型的列，并将其索引<br>如果你的应用程序有很多JOIN查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。<br>而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把DECIMAL字段和一个INT字段JOIN在一起，MYSQL就无法使用他们的索引。对于那些STRING类型，还需要有相同的字符集才行（两个表的字符集有可能不一样）</p>
<p>##6、千万不要ORDER BY RAND()</p>
<p>##7、避免SELECT *<br>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">$r = mysql_query(&quot;SELECT * FROM user WHERE user_id = 1&quot;);</div><div class="line">$d = mysql_fetch_assoc($r);</div><div class="line">echo &quot;Welcome &#123;$d[&apos;username&apos;]&#125;&quot;;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">$r = mysql_query(&quot;SELECT username FROM user WHERE user_id = 1&quot;);</div><div class="line">$d = mysql_fetch_assoc($r);</div><div class="line">echo &quot;Welcome &#123;$d[&apos;username&apos;]&#125;&quot;;</div></pre></td></tr></table></figure></p>
<p>##8、永远为两张表设置一个ID<br>为数据库里的每张表都设置一个ID作为其主键，而最好的是一个INT型（推荐使用UNSIGNED），并设置上自动增长的AUTO INCREMENT标志。<br>就算是你 users 表有一个主键叫 “email”的字段，你也别让它成为主键。使用 VARCHAR 类型来当主键会使用得性能下降。另外，在你的程序中，你应该使用表的ID来构造你的数据结构。<br>而且，在MySQL数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区</p>
<p>##9、使用 ENUM 而不是 VARCHAR ？<br>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。</p>
<p>如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。</p>
<p>##10、从 PROCEDURE ANALYSE() 取得建议 ？<br>PROCEDURE ANALYSE() 会让 MySQL 帮你去分析你的字段和其实际的数据，并会给你一些有用的建议。只有表中有实际的数据，这些建议才会变得有用，因为要做一些大的决定是需要有数据作为基础的。</p>
<p>例如，如果你创建了一个 INT 字段作为你的主键，然而并没有太多的数据，那么，PROCEDURE ANALYSE()会建议你把这个字段的类型改成 MEDIUMINT 。或是你使用了一个 VARCHAR 字段，因为数据不多，你可能会得到一个让你把它改成 ENUM 的建议。这些建议，都是可能因为数据不够多，所以决策做得就不够准。</p>
<p>##11、尽可能的使用 NOT NULL<br>摘自MySQL官方文档<br>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”</p>
<p>##12、把IP地址存成 UNSIGNED INT<br>很多使用者都会创建一个 VARCHAR(15) 字段来存放字符串形式的IP而不是整形的IP。如果你用整形来存放，只需要4个字节，并且你可以有定长的字段。而且，这会为你带来查询上的优势，尤其是当你需要使用这样的WHERE条件：IP between ip1 and ip2。</p>
<p>##13、拆分大的 DELETE 或 INSERT 语句<br>如果有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。<br>下面是一个示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">while (1) &#123;</div><div class="line">//每次只做1000条</div><div class="line">mysql_query(&quot;DELETE FROM logs WHERE log_date &lt;= &apos;2009-11-01&apos; LIMIT 1000&quot;);</div><div class="line">if (mysql_affected_rows() == 0) &#123;</div><div class="line">    // 没得可删了，退出！</div><div class="line">    break;</div><div class="line">&#125;</div><div class="line">// 每次都要休息一会儿</div><div class="line">usleep(50000);</div></pre></td></tr></table></figure></p>
<p>##14、当查询较慢的时候，可用Join来改写一下该查询来进行优化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select sql_no_cache * from guang_deal_outs where deal_id in (select id from guang_deals where id = 100017151) ;</div><div class="line"> Empty set (18.87 sec)</div><div class="line"></div><div class="line">mysql&gt; select sql_no_cache a.* from guang_deal_outs a inner join guang_deals b on a.deal_id = b.id where b.id = 100017151;</div><div class="line"> Empty set (0.01 sec)</div><div class="line"></div><div class="line">原因</div><div class="line">mysql&gt; desc select sql_no_cache * from guang_deal_outs where deal_id in (select id from guang_deals where id = 100017151) ;</div><div class="line">+----+--------------------+-----------------+-------+---------------+---------+---------+-------+----------+-------------+</div><div class="line">| id | select_type        | table           | type  | possible_keys | key     | key_len | ref   | rows     | Extra       |</div><div class="line">+----+--------------------+-----------------+-------+---------------+---------    +---------+-------+----------+-------------+</div><div class="line">|  1 | PRIMARY            | guang_deal_outs | ALL   | NULL          | NULL    |     NULL    | NULL  | 18633779 | Using where |</div><div class="line">|  2 | DEPENDENT SUBQUERY | guang_deals     | const | PRIMARY       | PRIMARY |     4       | const |        1 | Using index |</div><div class="line">+----+--------------------+-----------------+-------+---------------+---------    +---------+-------+----------+-------------+</div><div class="line">2 rows in set (0.04 sec)</div><div class="line"></div><div class="line">mysql&gt; desc select sql_no_cache a.* from guang_deal_outs a inner join guang_deals b on a.deal_id = b.id where b.id = 100017151;</div><div class="line">+----+-------------+-------+-------+----------------------    +----------------------+---------+-------+------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys        | key                      | key_len | ref   | rows | Extra       |</div><div class="line">+----+-------------+-------+-------+----------------------    +----------------------+---------+-------+------+-------------+</div><div class="line">|  1 | SIMPLE      | b     | const | PRIMARY              | PRIMARY                  | 4       | const |    1 | Using index |</div><div class="line">|  1 | SIMPLE      | a     | ref   | idx_guang_dlout_dlid |     idx_guang_dlout_dlid | 4       | const |    1 |             |</div><div class="line">+----+-------------+-------+-------+----------------------    +----------------------+---------+-------+------+-------------+</div><div class="line"> 2 rows in set (0.05 sec)</div></pre></td></tr></table></figure></p>
<p>##15、子查询时用exists而不是用in<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">不推荐in</div><div class="line">select * from guang_deal_outs where deal_id in (select id from guang_deals where id = 100017151);</div><div class="line">推荐exists</div><div class="line">select * from guang_deal_outs where exists (select * from guang_deals where id = 100017151);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：liudong at 2016-11-09 15:48:37&lt;/p&gt;
&lt;p&gt;##1、为查询优化你的查询&lt;br&gt;大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 查询缓存不开启&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$r = mysql_query(&amp;quot;SELECT username FROM user WHERE     signup_date &amp;gt;= CURDATE()&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 开启查询缓存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$today = date(&amp;quot;Y-m-d&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$r = mysql_query(&amp;quot;SELECT username FROM user WHERE signup_date &amp;gt;= &amp;apos;$today&amp;apos;&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://blog.pinbot.me/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js基础入门</title>
    <link href="http://blog.pinbot.me/2016/11/09/Vue.js%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.pinbot.me/2016/11/09/Vue.js基础入门/</id>
    <published>2016-11-09T06:08:08.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者: 李纯利</p>
<p>Vue.js是一套构建用户界面的<code>渐进式框架</code>,Vue的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合;Vue.js 的目标是通过尽可能简单的 API 实现<code>响应的数据绑定和组合的视图组件</code>。<br><a id="more"></a></p>
<p>一、模板语法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">//数据绑定最常见的形式:&#123;&#123; &#125;&#125;的文本插入.</span></div><div class="line">    <span class="comment">//HTML</span></div><div class="line">    &lt;div id=<span class="string">'app'</span>&gt;</div><div class="line">        &lt;!-- 文本 --&gt;</div><div class="line">        &lt;!-- v-once指令只能执行一次性地插值 --&gt;</div><div class="line">        &lt;div v-once&gt;&#123;&#123;message | capitalize&#125;&#125;&lt;/div&gt;</div><div class="line">        &lt;!-- 纯HTML --&gt;</div><div class="line">        &lt;div v-html="htmlStr"&gt;&lt;/div&gt;</div><div class="line">        &lt;!-- 属性 --&gt;</div><div class="line">        &lt;div v-bind:class="vueJs"&gt;&lt;/div&gt;</div><div class="line">        &lt;!-- 使用JavaScript表达式 --&gt;</div><div class="line">        &lt;div v-bind:title="num + 1"&gt;&lt;/div&gt;</div><div class="line">        &lt;!-- 修饰符 --&gt;</div><div class="line">        &lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;</div><div class="line">        &lt;!-- 缩写 --&gt;</div><div class="line">        &lt;!-- 完整语法 --&gt;</div><div class="line">        &lt;div v-bind:class="vueJs"&gt;&lt;/div&gt;</div><div class="line">        &lt;div v-on:click="greet"&gt;&lt;/div&gt;</div><div class="line">        &lt;!-- 缩写 --&gt;</div><div class="line">        &lt;div :class="vueJs"&gt;&lt;/div&gt;</div><div class="line">        &lt;div @click="greet"&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    <span class="comment">//js</span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">        <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">message</span>: <span class="string">'Hello Vue'</span>,</div><div class="line">            <span class="attr">htmlStr</span>: <span class="string">'&lt;span&gt;HTML&lt;/span&gt;'</span>,</div><div class="line">            <span class="attr">vueJs</span>: <span class="string">'vue-div'</span>,</div><div class="line">            <span class="attr">num</span>: <span class="number">2</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">filters</span>: &#123;</div><div class="line">            <span class="attr">capitalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">              <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></div><div class="line">              value = value.toString()</div><div class="line">              <span class="keyword">return</span> value..split(<span class="string">''</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        methods: &#123;</div><div class="line">            <span class="attr">onSubmit</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">                alert(<span class="string">'hello!'</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">greet</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(<span class="string">'缩写.'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><code>v-</code>前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。<br>二.计算属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div id='app'&gt;</div><div class="line">    &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">var app = new Vue(&#123;</div><div class="line">    el: '#app',</div><div class="line">    data: &#123;</div><div class="line">        message: 'HelloVue'</div><div class="line">    &#125;,</div><div class="line">    reverseMessage: &#123;</div><div class="line">        greet: function()&#123;</div><div class="line">            return this.message.split('').reverse().join('');</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>三.class与style绑定</p>
<p>语法:<code>v-bind:class</code>, <code>v-bind:style</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"static"</span></div><div class="line"> v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</div><div class="line">&lt;div v-bind:style="&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"&gt;&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">activeClass</span>: <span class="string">'active'</span>,</div><div class="line">        <span class="attr">errorClass</span>: <span class="string">'errors'</span>,</div><div class="line">        <span class="attr">activeColor</span>: <span class="string">'red'</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里也可以绑定返回对象的计算属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"classObject"</span>&gt;&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">classObject</span>: &#123;</div><div class="line">            <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'text-danger'</span>: <span class="literal">false</span></div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>四.条件渲染<br>语法:v-show,v-if,v-else<br>v-else必须紧跟在v-if,v-show后面,不然就不能被识别.<br>v-if与v-show的区别v-show始终保持在Dom中,用简单的display来切换的.<br>v-if有更高的切换消耗,如果频繁的切换还是使用v-show比较好.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;h1 v-if="ok"&gt;Yes&lt;/h1&gt;</div><div class="line">&lt;h1 v-else&gt;No&lt;/h1&gt;</div><div class="line">&lt;h1 v-show="ok"&gt;Yes&lt;/h1&gt;</div><div class="line">&lt;template v-if="ok"&gt;</div><div class="line">  &lt;h1&gt;1&lt;/h1&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>注意 v-show 不支持 <code>&lt;template&gt;</code> 语法.<br>五.列表渲染<br>语法: v-for<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"item of items"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>如同 v-if 模板，你也可以用带有 v-for 的 <code>&lt;template&gt;</code> 标签来渲染多个元素块.<br>在自定义组件里，你可以像任何普通元素一样用 v-for.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;my-component v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;&lt;/my-component&gt;</div></pre></td></tr></table></figure></p>
<p>六.事件处理器<br>语法:v-on:事件</p>
<p>事件修饰符:<br>.submit提交事件不再重载页面<br>.stop阻止单击事件冒泡<br>.prevent修饰符可以串联<br>.capture添加事件侦听器时使用事件捕获模式<br>.self只当事件在该元素本身（而不是子元素）触发时触发回调</p>
<p>按键修饰符:<br>全部的按键别名：<br>.enter,.tab,.delete (捕获 “删除” 和 “退格” 键),.esc,.space,.up,.down,.left,.right.</p>
<p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 可以使用 v-on:keyup.f</span></div><div class="line">Vue.config.keyCodes.f = <span class="number">113</span></div></pre></td></tr></table></figure></p>
<p>七.表单控件绑定<br>v-model 指令在表单控件元素上创建双向数据绑定.</p>
<p>修饰符:<br>.lazy在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步.<br>.number只能输入number类型的值.<br>.trim去掉首尾空格</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: 李纯利&lt;/p&gt;
&lt;p&gt;Vue.js是一套构建用户界面的&lt;code&gt;渐进式框架&lt;/code&gt;,Vue的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合;Vue.js 的目标是通过尽可能简单的 API 实现&lt;code&gt;响应的数据绑定和组合的视图组件&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue.js" scheme="http://blog.pinbot.me/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>使用python实现图片转字符画</title>
    <link href="http://blog.pinbot.me/2016/11/07/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    <id>http://blog.pinbot.me/2016/11/07/使用python实现图片转字符画/</id>
    <published>2016-11-07T12:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>可能不少人都见过这张图……</p>
<p><img src="https://media.giphy.com/media/DyK2Fy4Mcs6cw/giphy.gif" alt=""></p>
<p>这是一张多帧合成的gif图片, 每帧图片由ascii字符组成。</p>
<p>今天要讲的是如何将一张静态图片转为字符, 关于多帧合成gif的方法这里不涉及。</p>
<a id="more"></a>
<h2 id="灰度"><a href="#灰度" class="headerlink" title="灰度"></a>灰度</h2><p>首先介绍一下灰度的概念。</p>
<blockquote>
<p>灰度（Gray scale）数字图像是每个像素只有一个采样颜色的图像。这类图像通常显示为从最暗黑色到最亮的白色的灰度，尽管理论上这个采样可以任何颜色的不同深浅，甚至可以是不同亮度上的不同颜色。灰度图像与黑白图像不同，在计算机图像领域中黑白图像只有黑白两种颜色，灰度图像在黑色与白色之间还有许多级的颜色深度。</p>
</blockquote>
<p><img src="http://img.pinbot.me:8080/uploads/2016/11/7/blob_1478520980265.png" alt="rgb-gray" title="blob_1478520980265.png"></p>
<p>如下图所示, 左边的第一幅是原始的彩色照片, 右边的为灰度图片。</p>
<p>灰度图片可以用黑白的<strong>颜色深度</strong>来表示一张图片, 这样我们可以在程序中用较大块的字符(比如<code>M</code>或<code>N</code>)来表示深色的像素, 用小块的字符(比如<code>.</code>或<code>:</code>)表示浅色。</p>
<p>我们设置一个列表:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CHARS = list(<span class="string">"""MNHQ$OC?7&gt;!:-;. """</span>)</div><div class="line">CHARS_N = len(CHARS)</div></pre></td></tr></table></figure>
<p>从左住右, 表示的颜色深度依次递减。</p>
<h2 id="rgb-gt灰度-gt字符"><a href="#RGB-gt-灰度-gt-字符" class="headerlink" title="RGB-&gt;灰度-&gt;字符"></a>RGB-&gt;灰度-&gt;字符</h2><p>那么如何将彩色图片转为灰度呢？</p>
<p>常见的公式是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Gray = 0.30 * R + 0.59 * G + 0.11 * B</div></pre></td></tr></table></figure>
<p>不同的人眼对RGB颜色的感知并不相同，所以转换时候给予不同的权重。<br>这个原理也普遍应用于计算机图像处理系统。</p>
<p>这里我们使用<code>rgb2char</code>实现这个转换:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb2char</span><span class="params">(r, g, b, alpha=<span class="number">256</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> alpha == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">' '</span></div><div class="line">    gray = float(<span class="number">0.30</span> * r + <span class="number">0.59</span> * g + <span class="number">0.11</span> * b)</div><div class="line">    index = int(round(gray / <span class="number">256</span> * (CHARS_N - <span class="number">1</span>)))</div><div class="line">    <span class="keyword">return</span> CHARS[index]</div></pre></td></tr></table></figure>
<p>函数有一个<code>alpha</code>参数指的是图像的透明度, 为0是则表示该像素为透明像素, 我们将其转换为一个空格。</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>实现每个像素的转换函数后, 需要对整个图片的每个像素进行处理, 这里我们使用python官方的<code>PIL</code>库。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span><span class="params">(path)</span>:</span></div><div class="line">    im = Image.open(path)</div><div class="line">    im = im.resize((HEIGHT, WIDTH), Image.NEAREST)</div><div class="line">    <span class="keyword">return</span> im</div><div class="line">    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">image2text</span><span class="params">(im)</span>:</span></div><div class="line">    text = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(HEIGHT):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(WIDTH):</div><div class="line">            text.append(rgb2char(*im.getpixel((j, i))))</div><div class="line">        text.append(<span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(path)</span>:</span></div><div class="line">    image = get_image(path)</div><div class="line">    print(image2text(image))</div></pre></td></tr></table></figure>
<hr>
<p>至些, 基本的转换就完成了。完整的代码可以在<a href="https://gist.github.com/Kxrr/797688110cbdabb7f40a101cbcac7ef9" target="_blank" rel="external">这里</a>看到。</p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/11/7/blob_1478520477235.png" alt="pinbot-logo" title="blob_1478520477235.png"></p>
<p>另外如果要处理复杂图片的转换需要做许多优化, 大家可以自行研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能不少人都见过这张图……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/DyK2Fy4Mcs6cw/giphy.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一张多帧合成的gif图片, 每帧图片由ascii字符组成。&lt;/p&gt;
&lt;p&gt;今天要讲的是如何将一张静态图片转为字符, 关于多帧合成gif的方法这里不涉及。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.pinbot.me/tags/python/"/>
    
      <category term="ascii" scheme="http://blog.pinbot.me/tags/ascii/"/>
    
      <category term="image" scheme="http://blog.pinbot.me/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>Django快速入门</title>
    <link href="http://blog.pinbot.me/2016/10/29/Django%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.pinbot.me/2016/10/29/Django快速入门/</id>
    <published>2016-10-29T04:53:26.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Adam at 2016-10-29 12:53:26<br>(注：本教程来源于<a href="http://https://docs.djangoproject.com/en/1.10/" target="_blank" rel="external"><code>官方最新Django教程</code></a>)</p>
<p>作为一名前端开发，了解后端技术很有必要。作为一名<code>web</code>程序员，掌握<code>web</code>开发全栈技能，成为未来发展的必然趋势。既然聘宝的研发以<code>Python</code>开发为主，我们有必要先学习一下<code>Django</code>这个开发框架。</p>
<a id="more"></a>
<p>首先，为了快速进入学习，我们假设你已经安装好聘宝研发的<code>Python+Docker</code>开发环境。接着我们建立虚拟开发环境。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  ~ mkdir myFirstDjango</div><div class="line">➜  ~ cd myFirstDjango</div><div class="line">➜  myFirstDjango mkvirtualenv myFirstDjango</div><div class="line">New python executable <span class="keyword">in</span> myFirstDjango/bin/python</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line">(myFirstDjango)➜  myFirstDjango</div></pre></td></tr></table></figure>
<p>安装Django</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  myFirstDjango pip install django</div><div class="line">You are using pip version <span class="number">7.1</span><span class="number">.0</span>, however version <span class="number">8.1</span><span class="number">.2</span> <span class="keyword">is</span> available.</div><div class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> command.</div><div class="line">Collecting django</div><div class="line">  Downloading http://pypi.doubanio.com/packages/<span class="number">8</span>a/<span class="number">09</span>/<span class="number">46</span>f790104abca7eb93786139d3adde9366b1afd59a77b583a1f310dc8cbd/Django<span class="number">-1.10</span><span class="number">.2</span>-py2.py3-none-any.whl (<span class="number">6.8</span>MB)</div><div class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">6.8</span>MB <span class="number">1.5</span>MB/s</div><div class="line">Installing collected packages: django</div><div class="line">Successfully installed django<span class="number">-1.10</span><span class="number">.2</span></div></pre></td></tr></table></figure>
<p>创建一个项目mysite<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜ django-admin startproject mysite</div><div class="line"></div><div class="line">项目文件列表</div><div class="line">------------------</div><div class="line">mysite/					项目名称</div><div class="line">    manage.py			命令行工具</div><div class="line">    mysite/				代码目录</div><div class="line">        __init__.py		模块化申明文件，一般为空</div><div class="line">        settings.py		配置文件</div><div class="line">        urls.py			路由配置文件</div><div class="line">        wsgi.py			服务器文件</div><div class="line"></div><div class="line">启动本地开发环境：</div><div class="line">------------------</div><div class="line">(myFirstDjango)➜  myFirstDjango cd mysite &amp;&amp; python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (<span class="number">0</span> silenced).</div><div class="line"></div><div class="line">You have <span class="number">13</span> unapplied migration(s). Your project may <span class="keyword">not</span> work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</div><div class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</div><div class="line"></div><div class="line">October <span class="number">29</span>, <span class="number">2016</span> - <span class="number">05</span>:<span class="number">47</span>:<span class="number">37</span></div><div class="line">Django version <span class="number">1.10</span><span class="number">.2</span>, using settings <span class="string">'mysite.settings'</span></div><div class="line">Starting development server at http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</div><div class="line">Quit the server <span class="keyword">with</span> CONTROL-C.</div><div class="line"></div><div class="line">启动前需要用 migrate 做些数据库迁移修复工作：</div><div class="line">------------------</div><div class="line">(myFirstDjango)➜  mysite python manage.py migrate</div><div class="line">Operations to perform:</div><div class="line">  Apply all migrations: admin, auth, contenttypes, sessions</div><div class="line">Running migrations:</div><div class="line">  Applying contenttypes<span class="number">.0001</span>_initial... OK</div><div class="line">  Applying auth<span class="number">.0001</span>_initial... OK</div><div class="line">  Applying admin<span class="number">.0001</span>_initial... OK</div><div class="line">  Applying admin<span class="number">.0002</span>_logentry_remove_auto_add... OK</div><div class="line">  Applying contenttypes<span class="number">.0002</span>_remove_content_type_name... OK</div><div class="line">  Applying auth<span class="number">.0002</span>_alter_permission_name_max_length... OK</div><div class="line">  Applying auth<span class="number">.0003</span>_alter_user_email_max_length... OK</div><div class="line">  Applying auth<span class="number">.0004</span>_alter_user_username_opts... OK</div><div class="line">  Applying auth<span class="number">.0005</span>_alter_user_last_login_null... OK</div><div class="line">  Applying auth<span class="number">.0006</span>_require_contenttypes_0002... OK</div><div class="line">  Applying auth<span class="number">.0007</span>_alter_validators_add_error_messages... OK</div><div class="line">  Applying auth<span class="number">.0008</span>_alter_user_username_max_length... OK</div><div class="line">  Applying sessions<span class="number">.0001</span>_initial... OK</div><div class="line"></div><div class="line">再次启动开发环境：</div><div class="line">------------------</div><div class="line">(myFirstDjango)➜ python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></div></pre></td></tr></table></figure></p>
<p>浏览器访问： <a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a></p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/10/29/blob_1477720230271.png" alt=""></p>
<p>第一步完成了，我们还需要澄清一个细节，注意看这两个命令：</p>
<p><code>django-admin startproject</code> 和 <code>python manage.py startapp polls</code></p>
<p>这里面的<code>project</code>和<code>app</code>是有区别的：</p>
<p><code>app</code>可以看作是一个完成功能模块，而<code>project</code>可以看作成一个网站，由多个功能模块<code>app</code>组成。关键是模块<code>app</code>可以被多个<code>project</code>直接使用，这点非常重要，<code>DRY</code>万岁。</p>
<p>我们运行<code>python manage.py startapp polls</code>，生成一个新的投票模块<code>polls</code>。可以看到<code>mysite</code>目录下多了一个<code>polls</code>目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysite/</div><div class="line">    manage.py</div><div class="line">    mysite/</div><div class="line">    polls/</div><div class="line">        __init__.py</div><div class="line">        admin.py</div><div class="line">        apps.py</div><div class="line">        migrations/</div><div class="line">            __init__.py</div><div class="line">        models.py</div><div class="line">        tests.py</div><div class="line">        views.py</div></pre></td></tr></table></figure></p>
<p>接着，我们需要补充路由文件<code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#urls.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line">urlpatterns = [</div><div class="line">	url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>同样在<code>site</code>目录下也需要补充一个：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#urls.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line">urlpatterns = [</div><div class="line">	url(<span class="string">r'^polls/'</span>, include(<span class="string">'polls.urls'</span>)),  <span class="comment">#包含polls模块的路由</span></div><div class="line">	url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>同时在mysite/settings.py修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'polls.apps.PollsConfig'</span>,	<span class="comment">#引入安装的模块</span></div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>最后增加模版文件<code>mysite/polls/templates/polls/index.html</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% if latest_question_list %&#125; &lt;ul&gt;</div><div class="line">&#123;% for question in latest_question_list %&#125;</div><div class="line">&lt;li&gt;&lt;a href="/polls/&#123;&#123; question.id &#125;&#125;/"&gt;</div><div class="line">&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt; &#123;% else %&#125;</div><div class="line">&lt;p&gt;暂无投票。&lt;/p&gt; &#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>mysite</code>目录下，再次启动开发环境：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜ python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></div></pre></td></tr></table></figure></p>
<p>访问<code>http://0.0.0.0:8000/polls/</code>可以看到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">暂无投票。</div></pre></td></tr></table></figure></p>
<p>对，还没有投票内容。我们还需要建立<code>Model</code>制定数据结构，添加投票数据，然后从数据库获取投票数据。</p>
<p>为了讲解方便我们先使用<code>sqlite</code>作为默认的数据库存储数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mysite/settings.py</span></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</div><div class="line">		<span class="comment">#数据库文件保存的位置</span></div><div class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，编辑<code>polls/models.py</code>，制定<code>Model</code>数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> python_2_unicode_compatible</div><div class="line"><span class="meta">@python_2_unicode_compatible</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></div><div class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.question_text</div><div class="line"></div><div class="line"><span class="meta">@python_2_unicode_compatible</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</div><div class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.choice_text</div></pre></td></tr></table></figure>
<p>然后利用<code>makemigrations</code>工具生成数据库迁移文件<code>polls/migrations/0001_initial.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite python manage.py makemigrations polls</div><div class="line">Migrations <span class="keyword">for</span> <span class="string">'polls'</span>:</div><div class="line">  polls/migrations/<span class="number">0001</span>_initial.py:</div><div class="line">    - Create model Choice</div><div class="line">    - Create model Question</div><div class="line">    - Add field question to choice</div></pre></td></tr></table></figure></p>
<p>接着执行数据库迁移操作，这里应该包含建表的操作，这样我们就可以通过管理工具添加投票数据了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite python manage.py sqlmigrate polls <span class="number">0001</span></div><div class="line">BEGIN;</div><div class="line">--</div><div class="line">-- Create model Choice</div><div class="line">--</div><div class="line">CREATE TABLE <span class="string">"polls_choice"</span> (<span class="string">"id"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="string">"choice_text"</span> varchar(<span class="number">200</span>) NOT NULL, <span class="string">"votes"</span> integer NOT NULL);</div><div class="line">--</div><div class="line">-- Create model Question</div><div class="line">--</div><div class="line">CREATE TABLE <span class="string">"polls_question"</span> (<span class="string">"id"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="string">"question_text"</span> varchar(<span class="number">200</span>) NOT NULL, <span class="string">"pub_date"</span> datetime NOT NULL);</div><div class="line">--</div><div class="line">-- Add field question to choice</div><div class="line">--</div><div class="line">ALTER TABLE <span class="string">"polls_choice"</span> RENAME TO <span class="string">"polls_choice__old"</span>;</div><div class="line">CREATE TABLE <span class="string">"polls_choice"</span> (<span class="string">"id"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="string">"choice_text"</span> varchar(<span class="number">200</span>) NOT NULL, <span class="string">"votes"</span> integer NOT NULL, <span class="string">"question_id"</span> integer NOT NULL REFERENCES <span class="string">"polls_question"</span> (<span class="string">"id"</span>));</div><div class="line">INSERT INTO <span class="string">"polls_choice"</span> (<span class="string">"choice_text"</span>, <span class="string">"votes"</span>, <span class="string">"id"</span>, <span class="string">"question_id"</span>) SELECT <span class="string">"choice_text"</span>, <span class="string">"votes"</span>, <span class="string">"id"</span>, NULL FROM <span class="string">"polls_choice__old"</span>;</div><div class="line">DROP TABLE <span class="string">"polls_choice__old"</span>;</div><div class="line">CREATE INDEX <span class="string">"polls_choice_7aa0f6ee"</span> ON <span class="string">"polls_choice"</span> (<span class="string">"question_id"</span>);</div><div class="line">COMMIT;</div><div class="line">(myFirstDjango)➜  mysite</div></pre></td></tr></table></figure></p>
<p>完成后可以检查下是否迁移有错误发生：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite python manage.py check</div><div class="line">System check identified no issues (<span class="number">0</span> silenced).</div></pre></td></tr></table></figure></p>
<p>或者直接使用<code>migrate</code>命令执行所有未执行的迁移操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite python manage.py migrate</div><div class="line">Operations to perform:</div><div class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</div><div class="line">Running migrations:</div><div class="line">  Applying polls<span class="number">.0001</span>_initial... OK</div></pre></td></tr></table></figure></p>
<p>然后我们生成后台管理界面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(myFirstDjango)➜  mysite python manage.py createsuperuser</div><div class="line">Username (leave blank to use <span class="string">'super'</span>): admin</div><div class="line">Email address: yourname@gmail.com</div><div class="line">Password:</div><div class="line">Password (again):</div><div class="line">Superuser created successfully.</div></pre></td></tr></table></figure></p>
<p>在<code>polls/admin.py</code>里面注册可以管理的<code>Model</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</div><div class="line">admin.site.register(Question)</div><div class="line">admin.site.register(Choice)</div></pre></td></tr></table></figure></p>
<p>然后访问<code>http://0.0.0.0:8000/admin/</code><br><img src="http://img.pinbot.me:8080/uploads/2016/10/31/blob_1477848222580.png" alt=""></p>
<p>添加完投票内容后，</p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/10/31/blob_1477848419636.png" alt=""></p>
<p><img src="http://img.pinbot.me:8080/uploads/2016/10/31/blob_1477848476411.png" alt=""></p>
<p>修改一下<code>polls</code>的路由：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app_name = <span class="string">'polls'</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    <span class="comment"># the 'name' value as called by the &#123;% url %&#125; template tag</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>修改投票主页模版：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;a href="&#123;% url 'polls:detail' question.id %&#125;"&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<p>并且增加投票详细页的模版<code>detail.html</code>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&#123;% for choice in question.choice_set.all %&#125;</div><div class="line">&lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>访问<code>http://0.0.0.0:8000/polls/1/</code>，最简单的<code>Django</code>投票样例就完成了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">你会学习python吗？</div><div class="line">* 会</div><div class="line">* 不会</div><div class="line">* 不知道</div></pre></td></tr></table></figure></p>
<p>这是个非常简单的<code>MVC</code>架构，熟悉<code>Angular</code>的同学应该很快就能理解<code>Django</code>的做法，怎么样，<code>Python</code>也不难吧～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Adam at 2016-10-29 12:53:26&lt;br&gt;(注：本教程来源于&lt;a href=&quot;http://https://docs.djangoproject.com/en/1.10/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;官方最新Django教程&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;作为一名前端开发，了解后端技术很有必要。作为一名&lt;code&gt;web&lt;/code&gt;程序员，掌握&lt;code&gt;web&lt;/code&gt;开发全栈技能，成为未来发展的必然趋势。既然聘宝的研发以&lt;code&gt;Python&lt;/code&gt;开发为主，我们有必要先学习一下&lt;code&gt;Django&lt;/code&gt;这个开发框架。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.pinbot.me/categories/blog/"/>
    
    
      <category term="Django" scheme="http://blog.pinbot.me/tags/Django/"/>
    
      <category term="Python" scheme="http://blog.pinbot.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习之路</title>
    <link href="http://blog.pinbot.me/2016/10/10/Docker%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://blog.pinbot.me/2016/10/10/Docker学习之路/</id>
    <published>2016-10-10T12:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：liudong</p>
<h2 id="docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="docker是什么"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h3><p>Docker 是一个开源项目,Go 语言实现,遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护。Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 的基础是 Linux 容器（LXC）等技术。</p>
<p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。<br><img src="http://img.pinbot.me:8080/uploads/2016/10/10/blob_1476068288967.png" alt="2016-10-10-截图" title="blob_1476068288967.png"><br><img src="http://img.pinbot.me:8080/uploads/2016/10/10/blob_1476068344578.png" alt="2016-10-10-截图" title="blob_1476068344578.png"></p>
<a id="more"></a>
<h3 id="为什么要使用-docker"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a>为什么要使用 Docker？</h3><p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。<br>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
<h5 id="更快速的交付和部署"><a href="#更快速的交付和部署" class="headerlink" title="更快速的交付和部署"></a>更快速的交付和部署</h5><p>开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p>
<h5 id="更高效的虚拟化"><a href="#更高效的虚拟化" class="headerlink" title="更高效的虚拟化"></a>更高效的虚拟化</h5><p>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。</p>
<h5 id="更轻松的迁移和扩展"><a href="#更轻松的迁移和扩展" class="headerlink" title="更轻松的迁移和扩展"></a>更轻松的迁移和扩展</h5><p>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p>
<h5 id="更简单的管理"><a href="#更简单的管理" class="headerlink" title="更简单的管理"></a>更简单的管理</h5><p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。</p>
<h5 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h5><table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为 MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<h3 id="docker能做什么"><a href="#Docker能做什么？" class="headerlink" title="Docker能做什么？"></a>Docker能做什么？</h3><p>Docker可以解决虚拟机能够解决的问题，同时也能够解决虚拟机由于资源要求过高而无法解决的问题。Docker能处理的事情包括：<br>隔离应用依赖<br>创建应用镜像并进行复制<br>创建容易分发的即启即用的应用<br>允许实例简单、快速地扩展<br>测试应用并随后销毁它们</p>
<p>Docker背后的想法是创建软件程序可移植的轻量容器，让其可以在任何安装了Docker的机器上运行，而不用关心底层操作系统<br>基本概念</p>
<h2 id="docker-镜像-image"><a href="#Docker-镜像-（Image）" class="headerlink" title="Docker 镜像 （Image）"></a>Docker 镜像 （Image）</h2><p>镜像原理：Docker的镜像类似虚拟机的快照，但更轻量，非常非常轻量。Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。<br>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作；<br>创建Docker镜像有几种方式，多数是在一个现有镜像基础上创建新镜像，因为几乎你需要的任何东西都有了公共镜像，包括所有主流Linux发行版，你应该不会找不到你需要的镜像。不过，就算你想从头构建一个镜像，也有好几种方法。<br>要创建一个镜像，你可以拿一个镜像，对它进行修改来创建它的子镜像。实现前述目的的方式有两种：在一个文件中指定一个基础镜像及需要完成的修改；或通过“运行”一个镜像，对其进行修改并提交。不同方式各有优点，不过一般会使用文件来指定所做的变化。<br>Docker 镜像（Image）就是一个只读的模板，可以用来创建 Docker 容器。</p>
<p>简单命令  （Ubuntu系统）<br>安装Docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ wget -qO- https://get.docker.com/ | sh</div></pre></td></tr></table></figure></p>
<p>注：系统会提示你输入sudo密码，输入完成之后，就会下载脚本并且安装Docker及依赖包。</p>
<p>Docker命令工具需要root权限才能工作。你可以将你的用户放入docker组来避免每次都要使用sudo。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker pull ubuntu:latest</div></pre></td></tr></table></figure></p>
<p>列出docker镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker images</div></pre></td></tr></table></figure></p>
<p>上传镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker push ouruser/sinatra</div></pre></td></tr></table></figure></p>
<p>保存镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</div></pre></td></tr></table></figure></p>
<p>加载镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker load --input ubuntu_14.04.tar   # 或者 sudo docker load &lt; ubuntu_14.04.tar</div></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker rmi training/sinatra</div><div class="line">注：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器.</div></pre></td></tr></table></figure></p>
<p>清理所有未打过标签的本地镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker rmi $(docker images -q -f &quot;dangling=true&quot;)  #sudo docker rmi $(docker images --quiet --filter &quot;dangling=true&quot;)</div></pre></td></tr></table></figure></p>
<p>Dockerfile创建镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim Dockerfile</div><div class="line"># This is a comment</div><div class="line">FROM ubuntu:14.04</div><div class="line">MAINTAINER Docker Newbee &lt;newbee@docker.com&gt;</div><div class="line">RUN apt-get -qq update</div><div class="line">RUN apt-get -qqy install ruby ruby-dev</div><div class="line">RUN gem install sinatra</div><div class="line"></div><div class="line">$ sudo docker build -t=&quot;ouruser/sinatra:v2&quot; .</div><div class="line"></div><div class="line">注：其中 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</div><div class="line"></div><div class="line">$ sudo docker run -t -i ouruser/sinatra:v2 /bin/bash</div></pre></td></tr></table></figure></p>
<p>从本地文件系统导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04</div></pre></td></tr></table></figure></p>
<h3 id="docker-容器container"><a href="#Docker-容器（Container）" class="headerlink" title="Docker 容器（Container）"></a>Docker 容器（Container）</h3><p>Docker 利用容器（Container）来运行应用。</p>
<p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p>
<p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<p>*注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层。</p>
<h5 id="新建并后台启动容器"><a href="#新建并后台启动容器" class="headerlink" title="新建并后台启动容器"></a>新建并后台启动容器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -tid ubuntu /bin/bash</div><div class="line">注：-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开，-d 让容器进入后台运行.</div><div class="line">$ sudo docker ps</div><div class="line">CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                   PORTS                     NAMES</div><div class="line">b548b2d4a537        ubuntu                     &quot;/bin/bash&quot;              11 seconds ago      Up 10 seconds                                   zen_engelbart</div></pre></td></tr></table></figure>
<p>docker run 来创建容器时，Docker 在后台运行的标准操作包括：<br>检查本地是否存在指定的镜像，不存在就从公有仓库下载<br>利用镜像创建并启动一个容器<br>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层<br>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去<br>从地址池配置一个 ip 地址给容器<br>执行用户指定的应用程序<br>执行完毕后容器被终止</p>
<p>查看docker容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker ps</div></pre></td></tr></table></figure></p>
<p>启动已经停止的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker start ubuntu:14.04</div></pre></td></tr></table></figure></p>
<p>docker自带命令进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker attach zen_engelbart #zen_engelbart是容器名当退出容器后，容器会关闭</div><div class="line">$ docker exec -it zen_engelbart /bin/bash    #进入已经开启的容器，退出后容器能继续运行</div></pre></td></tr></table></figure></p>
<p>第三方工具进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;</div><div class="line">$ ./configure --without-ncurses</div><div class="line">$ make nsenter &amp;&amp; sudo cp nsenter /usr/local/bin</div></pre></td></tr></table></figure></p>
<p>容器的第一个进程的 PID，可以通过下面的命令获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ PID=$(docker inspect --format &quot;&#123;&#123; .State.Pid &#125;&#125;&quot; &lt;container&gt;)</div><div class="line">$ nsenter --target $PID --mount --uts --ipc --net --pid</div></pre></td></tr></table></figure></p>
<p>实例演示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -idt ubuntu</div><div class="line">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</div><div class="line">$ sudo docker ps</div><div class="line">CONTAINER ID    IMAGE        COMMAND          CREATED            STATUS          PORTS             NAMES</div><div class="line">243c32535da7  ubuntu:latest &quot;/bin/bash&quot;    18 seconds ago     Up 17 seconds                  nostalgic_hypatia</div><div class="line">$ PID=$(docker-pid 243c32535da7)</div><div class="line">10981</div><div class="line">$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid</div><div class="line">root@243c32535da7:/#</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">简单的方法是：下载 .bashrc_docker，并将内容放到 .bashrc 中。</div><div class="line">$ wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;</div><div class="line">$ echo &quot;[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker&quot; &gt;&gt; ~/.bashrc; source ~/.bashrc</div><div class="line"></div><div class="line">$ echo $(docker-pid &lt;container&gt;)</div><div class="line">$ docker-enter &lt;container&gt; ls</div></pre></td></tr></table></figure>
<p>获取容器日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker logs ubuntu:14.04</div></pre></td></tr></table></figure></p>
<p>导出容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo docker ps -a  </div><div class="line">CONTAINER ID   IMAGE       COMMAND           CREATED       STATUS     PORTS          NAMES</div><div class="line">9c365aaa875f   mysql  &quot;docker-entrypoint.sh&quot;   9 days ago   Exited 8 minutes ago   0.0.0.0:3308-&gt;3306/tcp   mysql_3308</div><div class="line">$ sudo docker export 9c365aaa875f &gt; mysql.tar</div></pre></td></tr></table></figure></p>
<p>导入容器快照<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat mysql.tar | sudo docker import - test/mysql:5.6</div><div class="line">$sudo docker import http://example.com/exampleimage.tgz example/imagerepo</div></pre></td></tr></table></figure></p>
<h3 id="docker-仓库repository"><a href="#Docker-仓库（Repository）" class="headerlink" title="Docker 仓库（Repository）"></a>Docker 仓库（Repository）</h3><p>仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p>
<p>最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。<br>*注：Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p>
<h3 id="dockerfile使用"><a href="#Dockerfile使用" class="headerlink" title="Dockerfile使用"></a>Dockerfile使用</h3><p>指令</p>
<p>指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。</p>
<h5 id="from"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><p>格式为 FROM <image>或FROM <image>:<tag>。</tag></image></image></p>
<p>第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。</p>
<h5 id="maintainer"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h5><p>格式为 MAINTAINER <name>，指定维护者信息。</name></p>
<h5 id="run"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><p>格式为 RUN <command> 或 RUN [“executable”, “param1”, “param2”]。</p>
<p>前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN [“/bin/bash”, “-c”, “echo hello”]。</p>
<p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行。</p>
<h5 id="cmd"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>支持三种格式</p>
<p>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；<br>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；<br>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数；<br>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p>
<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p>
<h5 id="expose"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h5><p>格式为 EXPOSE <port> [<port>…]。</port></port></p>
<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>
<h5 id="env"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><p>格式为 ENV <key> <value>。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</value></key></p>
<p>例如</p>
<p>ENV PG_MAJOR 9.3<br>ENV PG_VERSION 9.3.4<br>RUN curl -SL <a href="http://example.com/postgres-$PG_VERSION.tar.xz" target="_blank" rel="external">http://example.com/postgres-$PG_VERSION.tar.xz</a> | tar -xJC /usr/src/postgress &amp;&amp; …<br>ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH<br>ADD</p>
<p>格式为 ADD <src> <dest>。</dest></src></p>
<p>该命令将复制指定的 <src> 到容器中的 <dest>。 其中 <src> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</src></dest></src></p>
<h5 id="copy"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>格式为 COPY <src> <dest>。</dest></src></p>
<p>复制本地主机的 <src>（为 Dockerfile 所在目录的相对路径）到容器中的 <dest>。</dest></src></p>
<p>当使用本地目录为源目录时，推荐使用 COPY。</p>
<h5 id="entrypoint"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><p>两种格式：</p>
<p>ENTRYPOINT [“executable”, “param1”, “param2”]<br>ENTRYPOINT command param1 param2（shell中执行）。<br>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</p>
<p>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p>
<h5 id="volume"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h5><p>格式为 VOLUME [“/data”]。</p>
<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
<h5 id="user"><a href="#USER" class="headerlink" title="USER"></a>USER</h5><p>格式为 USER daemon。</p>
<p>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。</p>
<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。</p>
<h5 id="workdir"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h5><p>格式为 WORKDIR /path/to/workdir。</p>
<p>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。</p>
<p>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如</p>
<p>WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN pwd<br>则最终路径为 /a/b/c。</p>
<h5 id="onbuild"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h5><p>格式为 ONBUILD [INSTRUCTION]。</p>
<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>
<p>例如，Dockerfile 使用如下的内容创建了镜像 image-A。</p>
<p>[…]<br>ONBUILD ADD . /app/src<br>ONBUILD RUN /usr/local/bin/python-build –dir /app/src<br>[…]<br>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A指定基础镜像时，会自动执行 ONBUILD 指令内容，等价于在后面添加了两条指令。</p>
<h5 id="from-image-a"><a href="#FROM-image-A" class="headerlink" title="FROM image-A"></a>FROM image-A</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#Automatically run the following</div><div class="line">ADD . /app/src</div><div class="line">RUN /usr/local/bin/python-build --dir /app/src</div><div class="line">注：使用 ONBUILD 指令的镜像，推荐在标签中注明</div></pre></td></tr></table></figure>
<h3 id="实例演示dockerfile创建镜像运行djangouwsginginxsupervisor"><a href="#实例演示-dockerfile创建镜像，运行Django-uwsgi-nginx-supervisor" class="headerlink" title="实例演示(dockerfile创建镜像，运行Django+uwsgi+nginx+supervisor)"></a>实例演示(dockerfile创建镜像，运行Django+uwsgi+nginx+supervisor)</h3><p>启动mysql容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker run -d -e MYSQL_ROOT_PASSWORD=pinbot@123 --name mysql_3308 -v /data/mysql/data:/var/lib/mysql -p 3308:3306 mysql</div><div class="line">注：用mysql镜像后台启动容器，并设置root用户初始密码为谁pinbot123，挂载本地目录/data/mysql/data到容器mysql_3308 的/var/lib/mysql目录，映射本地3308端口到容器的3306端口</div></pre></td></tr></table></figure></p>
<p>用Dockerfile创建镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker build -t talentbi:1.0 .</div><div class="line">注：根据Dockerfile创建镜像，并命名为talentbi:1.0；</div></pre></td></tr></table></figure></p>
<p>后台启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker run -d -p 8001:8080 -v /home/bigdata/github/TalentMiner/:/home/bigdata/github/TalentMiner --name talentbi1.0 talentbi:1.0</div><div class="line">注：用talentbi:1.0镜像启动容器并后台运行，映射本地端口8001到容器内8080端口，挂载本地目录等</div></pre></td></tr></table></figure></p>
<p>进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker exec -ti talentbi1.1 /bin/bash</div></pre></td></tr></table></figure></p>
<p>端口映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A  DOCKER -p tcp --dport 8080 -j DNAT --to-destination 172.17.0.3:8080</div></pre></td></tr></table></figure></p>
<p>查看iptables列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -nL</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：liudong&lt;/p&gt;
&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h2&gt;&lt;h3 id=&quot;Docker是什么？&quot;&gt;&lt;a href=&quot;#Docker是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker是什么？&quot;&gt;&lt;/a&gt;Docker是什么？&lt;/h3&gt;&lt;p&gt;Docker 是一个开源项目,Go 语言实现,遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护。Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 的基础是 Linux 容器（LXC）等技术。&lt;/p&gt;
&lt;p&gt;下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。&lt;br&gt;&lt;img src=&quot;http://img.pinbot.me:8080/uploads/2016/10/10/blob_1476068288967.png&quot; alt=&quot;2016-10-10-截图&quot; title=&quot;blob_1476068288967.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.pinbot.me:8080/uploads/2016/10/10/blob_1476068344578.png&quot; alt=&quot;2016-10-10-截图&quot; title=&quot;blob_1476068344578.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://blog.pinbot.me/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之设计模式(单例模式,构造函数模式)</title>
    <link href="http://blog.pinbot.me/2016/10/10/JavaScript%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B(%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F,%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.pinbot.me/2016/10/10/JavaScript之设计模型(单例模式,构造函数模式)/</id>
    <published>2016-10-10T06:08:08.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者: 李纯利</p>
<h2 id="一-设计模式之单例模式"><a href="#一、设计模式之单例模式" class="headerlink" title="一、设计模式之单例模式"></a>一、设计模式之单例模式</h2><p>单例模式就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。<br><a id="more"></a><br>下面我们来看一个单例的最佳实践：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SingletonTester = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//参数：传递给单例的一个参数集合</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Singleton</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="comment">//设置args变量为接收的参数或者为空（如果没有提供的话）</span></div><div class="line">        <span class="keyword">var</span> args = args || &#123;&#125;;</div><div class="line">        <span class="comment">//设置name参数</span></div><div class="line">        <span class="keyword">this</span>.name = <span class="string">'SingletonTester'</span>;</div><div class="line">        <span class="comment">//设置pointX的值</span></div><div class="line">        <span class="keyword">this</span>.pointX = args.pointX || <span class="number">6</span>; <span class="comment">//从接收的参数里获取，或者设置为默认值</span></div><div class="line">        <span class="comment">//设置pointY的值</span></div><div class="line">        <span class="keyword">this</span>.pointY = args.pointY || <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//实例容器</span></div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="keyword">var</span> _static = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'SingletonTester'</span>,</div><div class="line">        <span class="comment">//获取实例的方法</span></div><div class="line">        <span class="comment">//返回Singleton的实例</span></div><div class="line">        getInstance: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (instance === <span class="literal">undefined</span>) &#123;</div><div class="line">                instance = <span class="keyword">new</span> Singleton(args);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> _static;</div><div class="line">&#125;)();</div><div class="line"><span class="keyword">var</span> singletonTest = SingletonTester.getInstance(&#123; <span class="attr">pointX</span>: <span class="number">5</span> &#125;);</div><div class="line"><span class="built_in">console</span>.log(singletonTest.pointX); <span class="comment">// 输出 5</span></div></pre></td></tr></table></figure>
<h2 id="二-设计模式之构造函数模式"><a href="#二、设计模式之构造函数模式" class="headerlink" title="二、设计模式之构造函数模式"></a>二、设计模式之构造函数模式</h2><p>介绍：构造函数用于创建特定类型的对象——不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。</p>
<p>基本用法：JavaScript没有类的概念，但是有特殊的构造函数。通过new关键字来调用定义的否早函数，你可以告诉JavaScript你要创建一个新对象并且新对象的成员声明都是构造函数里定义的。在构造函数内部，this关键字引用的是新创建的对象。基本用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, names</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.model = model;</div><div class="line">    <span class="keyword">this</span>.year = year;</div><div class="line">    <span class="keyword">this</span>.names = names;</div><div class="line">    <span class="keyword">this</span>.output= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">"喜欢"</span> + <span class="keyword">this</span>.names;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tom= <span class="keyword">new</span> Car(<span class="string">"大叔"</span>, <span class="number">30</span>, <span class="string">'萝莉'</span>);</div><div class="line"><span class="keyword">var</span> dudu= <span class="keyword">new</span> Car(<span class="string">"欧巴"</span>, <span class="number">24</span>, <span class="string">'御姐'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tom.output());</div><div class="line"><span class="built_in">console</span>.log(dudu.output());</div></pre></td></tr></table></figure>
<p>上面是一个非常简单的构造函数模式，但是使用继承就很麻烦了，而且output()在每次创建对象的时候都重新定义了，最好的方法是让所有Car类型的实例都共享这个output()方法，这样如果有大批量的实例的话，就会节约很多内存。<br>解决方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, names</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.model = model;</div><div class="line">    <span class="keyword">this</span>.year = year;</div><div class="line">    <span class="keyword">this</span>.names = names;</div><div class="line">    <span class="keyword">this</span>.output= formatCar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">"喜欢"</span> + <span class="keyword">this</span>.names;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法虽然可用,但是我们还有更好的办法哟!</p>
<h3 id="构造函数与原型"><a href="#构造函数与原型" class="headerlink" title="构造函数与原型"></a>构造函数与原型</h3><p>JavaScript里函数有个原型属性叫prototype，当调用构造函数创建对象的时候，所有该构造函数原型的属性在新创建对象上都可用.下面来看一下上面扩展的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, names</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.model = model;</div><div class="line">    <span class="keyword">this</span>.year = year;</div><div class="line">    <span class="keyword">this</span>.names = names;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</div><div class="line">主要是用来避免重写定义原型prototype对象</div><div class="line">*/</div><div class="line">Car.prototype.output= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">"喜欢"</span> + <span class="keyword">this</span>.names;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Car(<span class="string">"大叔"</span>, <span class="number">33</span>, <span class="string">'萝莉'</span>);</div><div class="line"><span class="keyword">var</span> dudu = <span class="keyword">new</span> Car(<span class="string">"欧巴"</span>, <span class="number">25</span>, <span class="string">'御姐'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tom.output());</div><div class="line"><span class="built_in">console</span>.log(dudu.output());</div></pre></td></tr></table></figure>
<p>这里，output()单实例可以在所有Car对象实例里共享使用。<br>另外：我们推荐构造函数以大写字母开头，以便区分普通的函数。</p>
<h3 id="强制使用new"><a href="#强制使用new" class="headerlink" title="强制使用new"></a>强制使用new</h3><p>如果不是new来创建对象,直接用在全局调用函数的话,this指向的是全局对象window,下面来验证一下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作为函数调用</span></div><div class="line"><span class="keyword">var</span> tom = Car(<span class="string">"大叔"</span>, <span class="number">30</span>, <span class="string">'萝莉'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> tom); <span class="comment">// "undefined"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.output()); <span class="comment">// "大叔喜欢萝莉"</span></div></pre></td></tr></table></figure>
<p>这个时候的tom是undefined,而window.output()会正确输出结果,而如果使用new关键字则没有这个问题,验证如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用new 关键字</span></div><div class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Car(<span class="string">"大叔"</span>, <span class="number">30</span>, <span class="string">'萝莉'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> tom); <span class="comment">// "object"</span></div><div class="line"><span class="built_in">console</span>.log(tom.output()); <span class="comment">// "大叔喜欢萝莉"</span></div></pre></td></tr></table></figure>
<p>上述的例子展示了不使用new的问题，那么我们有没有办法让构造函数强制使用new关键字呢，答案是肯定的，上代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, names</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Car)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(model, year, names);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.model = model;</div><div class="line">    <span class="keyword">this</span>.year = year;</div><div class="line">    <span class="keyword">this</span>.names = names;</div><div class="line">    <span class="keyword">this</span>.output = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">"喜欢"</span> + <span class="keyword">this</span>.names;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Car(<span class="string">"大叔"</span>, <span class="number">32</span>, <span class="string">'萝莉'</span>);</div><div class="line"><span class="keyword">var</span> dudu = Car(<span class="string">"欧巴"</span>, <span class="number">25</span>, <span class="string">'御姐'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> tom); <span class="comment">// "object"</span></div><div class="line"><span class="built_in">console</span>.log(tom.output()); <span class="comment">// "大叔喜欢萝莉"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> dudu); <span class="comment">// "object"</span></div><div class="line"><span class="built_in">console</span>.log(dudu.output()); <span class="comment">// "欧巴喜欢御姐"</span></div></pre></td></tr></table></figure></p>
<p>通过判断this的instanceof是不是Car来决定返回new Car还是继续执行代码，如果使用的是new关键字，则(this instanceof Car)为真，会继续执行下面的参数赋值，如果没有用new，(this instanceof Car)就为假，就会重新new一个实例返回。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: 李纯利&lt;/p&gt;
&lt;h2 id=&quot;一、设计模式之单例模式&quot;&gt;&lt;a href=&quot;#一、设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;一、设计模式之单例模式&quot;&gt;&lt;/a&gt;一、设计模式之单例模式&lt;/h2&gt;&lt;p&gt;单例模式就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://blog.pinbot.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>react.js components的生命周期</title>
    <link href="http://blog.pinbot.me/2016/10/10/react.js%20components%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://blog.pinbot.me/2016/10/10/react.js components的生命周期/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reactjs-components的生命周期"><a href="#react-js-components的生命周期" class="headerlink" title="react.js components的生命周期"></a>react.js components的生命周期</h2><p>React提供了和以往不一样的方式来看待视图，它以组件开发为基础。组件是React的核心概念，React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类。对React应用而言，你需要分割你的页面，使其成为一个个的组件。也就是说，你的应用是由这些组件组合而成的。你可以通过分割组件的方式去开发复杂的页面或某个功能区块，组件是可以被复用的。</p>
<p>之前我们简单介绍了react的由来、特点、应用场景。以及，jsx语法糖，使用React.createClass生成自定义标签，插入节点，添加css样式，这些都是react的基础，接下来，我们继续react compenents的生命周期。<br><a id="more"></a><br>组件的生命周期分成三个状态：<br>  Mounting：已插入真实 DOM，即Initial Render<br>  Updating：正在被重新渲染，即Props与State改变<br>  Unmounting：已移出真实 DOM，即Component Unmount</p>
<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。<br>     componentWillMount()<br>     componentDidMount()<br>     componentWillUpdate(object nextProps, object nextState)<br>     componentDidUpdate(object prevProps, object prevState)<br>     componentWillUnmount()<br>此外，React 还提供两种特殊状态的处理函数。<br> componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用<br> shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</p>
<p>Mounting阶段：<br>  componentWillMount—render—componentDidMount<br>Updating阶段：<br>  componentWillReceiveProps—shouldCOmponentUpdate—componentWillUpdate—render—componentDidUpdate<br>Unmounting阶段：<br>  coponentWillUnmount</p>
<p>一个完整的React Component的写法应该如下：</p>
<pre><code>var myComponent = React.createClass({

    // The object returned by this method sets the initial value of this.state
    getInitialState: function(){
        return {};
    },

    // The object returned by this method sets the initial value of this.props
    // If a complex object is returned, it is shared among all component instances
    getDefaultProps: function(){
        return {};
    },

    // Returns the jsx markup for a component
    // Inspects this.state and this.props create the markup
    // Should never update this.state or this.props
    render: function(){
        return (&lt;div&gt;&lt;/div&gt;);
    },

    // An array of objects each of which can augment the lifecycle methods
    mixins: [],

    // Functions that can be invoked on the component without creating instances
    statics: {
        aStaticFunction: function(){}
    },

    // -- Lifecycle Methods --

    // Invoked once before first render
    componentWillMount: function(){
        // Calling setState here does not cause a re-render
    },

    // Invoked once after the first render
    componentDidMount: function(){
        // You now have access to this.getDOMNode()
    },

    // Invoked whenever there is a prop change
    // Called BEFORE render
    componentWillReceiveProps: function(nextProps){
        // Not called for the initial render
        // Previous props can be accessed by this.props
        // Calling setState here does not trigger an an additional re-render
    },

    // Determines if the render method should run in the subsequent step
    // Called BEFORE a render
    // Not called for the initial render
    shouldComponentUpdate: function(nextProps, nextState){
        // If you want the render method to execute in the next step
        // return true, else return false
        return true;
    },

    // Called IMMEDIATELY BEFORE a render
    componentWillUpdate: function(nextProps, nextState){
        // You cannot use this.setState() in this method
    },

    // Called IMMEDIATELY AFTER a render
    componentDidUpdate: function(prevProps, prevState){
    },

    // Called IMMEDIATELY before a component is unmounted
    componentWillUnmount: function(){
    }
});
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react-js-components的生命周期&quot;&gt;&lt;a href=&quot;#react-js-components的生命周期&quot; class=&quot;headerlink&quot; title=&quot;react.js components的生命周期&quot;&gt;&lt;/a&gt;react.js components的生命周期&lt;/h2&gt;&lt;p&gt;React提供了和以往不一样的方式来看待视图，它以组件开发为基础。组件是React的核心概念，React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类。对React应用而言，你需要分割你的页面，使其成为一个个的组件。也就是说，你的应用是由这些组件组合而成的。你可以通过分割组件的方式去开发复杂的页面或某个功能区块，组件是可以被复用的。&lt;/p&gt;
&lt;p&gt;之前我们简单介绍了react的由来、特点、应用场景。以及，jsx语法糖，使用React.createClass生成自定义标签，插入节点，添加css样式，这些都是react的基础，接下来，我们继续react compenents的生命周期。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://blog.pinbot.me/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.pinbot.me/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>NotImplemented</title>
    <link href="http://blog.pinbot.me/2016/10/09/NotImplemented/"/>
    <id>http://blog.pinbot.me/2016/10/09/NotImplemented/</id>
    <published>2016-10-09T08:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在创建基类时常常会用到<code>raise NotImplementedError</code>这个语句, 但在写下这条语句时IDE可能会补全一个<code>NotImplemented</code>出来, NotImplemented是什么?</p>
<a id="more"></a>
<h2 id="notimplemented是什么"><a href="#NotImplemented是什么" class="headerlink" title="NotImplemented是什么"></a>NotImplemented是什么</h2><p>首先NotImplemented并不是一种异常, 而是Built-in的一种类型:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="built_in">NotImplemented</span>)</div><div class="line">&lt;type <span class="string">'NotImplementedType'</span>&gt;</div></pre></td></tr></table></figure>
<p>官方文档中是这么描述的:</p>
<blockquote>
<p>Special value which can be returned by the “rich comparison” special methods (__eq__(), __lt__(), and friends), to indicate that the comparison is not implemented with respect to the other type.</p>
</blockquote>
<h2 id="notimplemented的具体应用"><a href="#NotImplemented的具体应用" class="headerlink" title="NotImplemented的具体应用"></a>NotImplemented的具体应用</h2><p>根据文档描述, NotImplemented常用在object.__eq__这样的比较方法中。</p>
<p>在下面的例子中, 比较Pants和Socks对象时, 首先会调用Pants的__eq__方法, 返回的是<code>NotImplemented</code>则转而调用Socks的__eq__方法。</p>
<p>使用NotImplemented而不是抛出异常, 给了其它对象扩展的机会。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span></div><div class="line">        self.size = size</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pants</span><span class="params">(Entity)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Socks</span><span class="params">(Entity)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, self.__class__):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> self.size == other.size</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> Pants(<span class="number">5</span>) == Socks(<span class="number">5</span>)</div></pre></td></tr></table></figure>
<hr>
<p>文末留一个小问题:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></div></pre></td></tr></table></figure>
<p><code>Foo() &lt; Foo()</code>有输出吗? 如果有, 是什么？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在创建基类时常常会用到&lt;code&gt;raise NotImplementedError&lt;/code&gt;这个语句, 但在写下这条语句时IDE可能会补全一个&lt;code&gt;NotImplemented&lt;/code&gt;出来, NotImplemented是什么?&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://blog.pinbot.me/tags/Python/"/>
    
      <category term="NotImplemented" scheme="http://blog.pinbot.me/tags/NotImplemented/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs ORM框架Sequelizejs快速入门</title>
    <link href="http://blog.pinbot.me/2016/09/12/Nodejs-ORM%E6%A1%86%E6%9E%B6Sequelizejs%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.pinbot.me/2016/09/12/Nodejs-ORM框架Sequelizejs快速入门/</id>
    <published>2016-09-12T15:10:10.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者: Adam</p>
<h2 id="什么是orm"><a href="#什么是ORM？" class="headerlink" title="什么是ORM？"></a>什么是<code>ORM</code>？</h2><p>简单的讲就是对<code>SQL</code>查询语句的封装，让我们可以用<code>OOP</code>的方式操作数据库，优雅的生成安全、可维护的<code>SQL</code>代码。直观上，是一种<code>Model</code>和<code>SQL</code>的映射关系。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</div><div class="line">    <span class="attr">id</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Sequelize.INTEGER,</div><div class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">primaryKey</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">email</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Sequelize.STRING,</div><div class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">validate</span>: &#123;</div><div class="line">            <span class="attr">isEmail</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">unique</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</div><div class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></div><div class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="keyword">UNIQUE</span> (email)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="那么什么是sequelize"><a href="#那么什么是Sequelize？" class="headerlink" title="那么什么是Sequelize？"></a>那么什么是Sequelize？</h2><p>Sequelize是一款基于Nodejs功能强大的异步ORM框架。<br>同时支持PostgreSQL, MySQL, SQLite and MSSQL多种数据库，很适合作为Nodejs后端数据库的存储接口，为快速开发Nodejs应用奠定扎实、安全的基础。</p>
<p>既然Nodejs的强项在于异步，没有理由不找一个强大的支持异步的数据库框架，与之配合，双剑合并～</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入框架</span></div><div class="line"><span class="keyword">var</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</div><div class="line"><span class="comment">//初始化链接（支持连接池）</span></div><div class="line"><span class="keyword">var</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>,  &#123;</div><div class="line">  <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">dialect</span>: <span class="string">'mysql'</span>|<span class="string">'sqlite'</span>|<span class="string">'postgres'</span>|<span class="string">'mssql'</span>,</div><div class="line"></div><div class="line">  <span class="attr">pool</span>: &#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">min</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">idle</span>: <span class="number">10000</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// SQLite only</span></div><div class="line">  storage: <span class="string">'path/to/database.sqlite'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//定义数据模型</span></div><div class="line"><span class="keyword">var</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</div><div class="line">  <span class="attr">username</span>: Sequelize.STRING,</div><div class="line">  <span class="attr">birthday</span>: Sequelize.DATE</div><div class="line">&#125;);</div><div class="line"><span class="comment">//初始化数据</span></div><div class="line">sequelize.sync().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> User.create(&#123;</div><div class="line">    <span class="attr">username</span>: <span class="string">'janedoe'</span>,</div><div class="line">    <span class="attr">birthday</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1980</span>, <span class="number">6</span>, <span class="number">20</span>)</div><div class="line">  &#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">jane</span>) </span>&#123;</div><div class="line">  <span class="comment">//获取数据</span></div><div class="line">  <span class="built_in">console</span>.log(jane.get(&#123;</div><div class="line">    <span class="attr">plain</span>: <span class="literal">true</span></div><div class="line">  &#125;));</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">//异常捕获</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Unable to connect to the database:'</span>, err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="sequelize有哪些特色"><a href="#Sequelize有哪些特色？" class="headerlink" title="Sequelize有哪些特色？"></a>Sequelize有哪些特色？</h2><blockquote>
<p>强大的模型定义，支持虚拟类型。Javascript虽然被很多人诟病杂乱无章法，但是函数即对象这个特色，可以说是我的最爱，非常灵活强大。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Foo = sequelize.define(<span class="string">'foo'</span>, &#123;</div><div class="line">  <span class="attr">firstname</span>: Sequelize.STRING,</div><div class="line">  <span class="attr">lastname</span>: Sequelize.STRING</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">getterMethods</span>   : &#123;</div><div class="line">    <span class="attr">fullName</span>       : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">setterMethods</span>   : &#123;</div><div class="line">    <span class="attr">fullName</span>       : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> names = value.split(<span class="string">' '</span>);</div><div class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>));</div><div class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>));</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>支持完善的数据验证，减轻前后端的验证压力。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ValidateMe = sequelize.define(<span class="string">'foo'</span>, &#123;</div><div class="line">  <span class="attr">foo</span>: &#123;</div><div class="line">    <span class="attr">type</span>: Sequelize.STRING,</div><div class="line">    <span class="attr">validate</span>: &#123;</div><div class="line">      <span class="attr">is</span>: [<span class="string">"^[a-z]+$"</span>,<span class="string">'i'</span>],     <span class="comment">// 全匹配字母</span></div><div class="line">      is: <span class="regexp">/^[a-z]+$/i</span>,          <span class="comment">// 全匹配字母，用规则表达式写法</span></div><div class="line">      not: [<span class="string">"[a-z]"</span>,<span class="string">'i'</span>],       <span class="comment">// 不能包含字母</span></div><div class="line">      isEmail: <span class="literal">true</span>,            <span class="comment">// 检查邮件格式</span></div><div class="line">      isUrl: <span class="literal">true</span>,              <span class="comment">// 是否是合法网址</span></div><div class="line">      isIP: <span class="literal">true</span>,               <span class="comment">// 是否是合法IP地址</span></div><div class="line">      isIPv4: <span class="literal">true</span>,             <span class="comment">// 是否是合法IPv4地址</span></div><div class="line">      isIPv6: <span class="literal">true</span>,             <span class="comment">// 是否是合法IPv6地址</span></div><div class="line">      isAlpha: <span class="literal">true</span>,            <span class="comment">// 是否是字母</span></div><div class="line">      isAlphanumeric: <span class="literal">true</span>,     <span class="comment">// 是否是数字和字母</span></div><div class="line">      isNumeric: <span class="literal">true</span>,          <span class="comment">// 只允许数字</span></div><div class="line">      isInt: <span class="literal">true</span>,              <span class="comment">// 只允许整数</span></div><div class="line">      isFloat: <span class="literal">true</span>,            <span class="comment">// 是否是浮点数</span></div><div class="line">      isDecimal: <span class="literal">true</span>,          <span class="comment">// 是否是十进制书</span></div><div class="line">      isLowercase: <span class="literal">true</span>,        <span class="comment">// 是否是小写</span></div><div class="line">      isUppercase: <span class="literal">true</span>,        <span class="comment">// 是否大写</span></div><div class="line">      notNull: <span class="literal">true</span>,            <span class="comment">// 不允许为null</span></div><div class="line">      isNull: <span class="literal">true</span>,             <span class="comment">// 是否是null</span></div><div class="line">      notEmpty: <span class="literal">true</span>,           <span class="comment">// 不允许为空</span></div><div class="line">      equals: <span class="string">'specific value'</span>, <span class="comment">// 等于某些值</span></div><div class="line">      contains: <span class="string">'foo'</span>,          <span class="comment">// 包含某些字符</span></div><div class="line">      notIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],  <span class="comment">// 不在列表中</span></div><div class="line">      isIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],   <span class="comment">// 在列表中</span></div><div class="line">      notContains: <span class="string">'bar'</span>,       <span class="comment">// 不包含</span></div><div class="line">      len: [<span class="number">2</span>,<span class="number">10</span>],              <span class="comment">// 长度范围</span></div><div class="line">      isUUID: <span class="number">4</span>,                <span class="comment">// 是否是合法 uuids</span></div><div class="line">      isDate: <span class="literal">true</span>,             <span class="comment">// 是否是有效日期</span></div><div class="line">      isAfter: <span class="string">"2011-11-05"</span>,    <span class="comment">// 是否晚于某个日期</span></div><div class="line">      isBefore: <span class="string">"2011-11-05"</span>,   <span class="comment">// 是否早于某个日期</span></div><div class="line">      max: <span class="number">23</span>,                  <span class="comment">// 最大值</span></div><div class="line">      min: <span class="number">23</span>,                  <span class="comment">// 最小值</span></div><div class="line">      isArray: <span class="literal">true</span>,            <span class="comment">// 是否是数组</span></div><div class="line">      isCreditCard: <span class="literal">true</span>,       <span class="comment">// 是否是有效信用卡号</span></div><div class="line"></div><div class="line">      <span class="comment">// 自定义规则</span></div><div class="line">      isEven: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入偶数!'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>Sequelize的查询非常全面和灵活</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">Project.findAll(&#123;</div><div class="line">  <span class="comment">//复杂过滤，可嵌套</span></div><div class="line">  where: &#123;</div><div class="line">    <span class="attr">id</span>: &#123;</div><div class="line">      <span class="attr">$and</span>: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;           <span class="comment">// AND (a = 5)</span></div><div class="line">      $or: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;]  <span class="comment">// (a = 5 OR a = 6)</span></div><div class="line">      $gt: <span class="number">6</span>,                <span class="comment">// id &gt; 6</span></div><div class="line">      $gte: <span class="number">6</span>,               <span class="comment">// id &gt;= 6</span></div><div class="line">      $lt: <span class="number">10</span>,               <span class="comment">// id &lt; 10</span></div><div class="line">      $lte: <span class="number">10</span>,              <span class="comment">// id &lt;= 10</span></div><div class="line">      $ne: <span class="number">20</span>,               <span class="comment">// id != 20</span></div><div class="line">      $between: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// BETWEEN 6 AND 10</span></div><div class="line">      $notBetween: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// NOT BETWEEN 11 AND 15</span></div><div class="line">      $<span class="keyword">in</span>: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// IN [1, 2]</span></div><div class="line">      $notIn: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// NOT IN [1, 2]</span></div><div class="line">      $like: <span class="string">'%hat'</span>,         <span class="comment">// LIKE '%hat'</span></div><div class="line">      $notLike: <span class="string">'%hat'</span>       <span class="comment">// NOT LIKE '%hat'</span></div><div class="line">      $iLike: <span class="string">'%hat'</span>         <span class="comment">// ILIKE '%hat' (case insensitive)  (PG only)</span></div><div class="line">      $notILike: <span class="string">'%hat'</span>      <span class="comment">// NOT ILIKE '%hat'  (PG only)</span></div><div class="line">      $overlap: [<span class="number">1</span>, <span class="number">2</span>]       <span class="comment">// &amp;&amp; [1, 2] (PG array overlap operator)</span></div><div class="line">      $contains: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// @&gt; [1, 2] (PG array contains operator)</span></div><div class="line">      $contained: [<span class="number">1</span>, <span class="number">2</span>]     <span class="comment">// &lt;@ [1, 2] (PG array contained by operator)</span></div><div class="line">      $any: [<span class="number">2</span>,<span class="number">3</span>]            <span class="comment">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">status</span>: &#123;</div><div class="line">      <span class="attr">$not</span>: <span class="literal">false</span>,           <span class="comment">// status NOT FALSE</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">Project.all()</div><div class="line">Project.findById</div><div class="line">Project.findByOne</div><div class="line">Project.findOrCreate</div><div class="line">Project.findAndCountAll</div><div class="line"></div><div class="line">Project.count()</div><div class="line">Project.max()</div><div class="line"></div><div class="line"><span class="comment">//CRUD</span></div><div class="line">Project.create()</div><div class="line">Project.save()</div><div class="line">Project.update()</div><div class="line">Project.destroy()</div><div class="line"></div><div class="line"><span class="comment">//批量</span></div><div class="line">User.bulkCreate([])</div><div class="line"></div><div class="line"><span class="comment">//排序</span></div><div class="line">something.findOne(&#123;</div><div class="line">  <span class="attr">order</span>: [</div><div class="line">    <span class="string">'name'</span>,</div><div class="line">    <span class="comment">// 返回 `name`</span></div><div class="line">    <span class="string">'username DESC'</span>,</div><div class="line">    <span class="comment">// 返回 `username DESC`</span></div><div class="line">    [<span class="string">'username'</span>, <span class="string">'DESC'</span>],</div><div class="line">    <span class="comment">// 返回 `username` DESC</span></div><div class="line">    sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)),</div><div class="line">    <span class="comment">// 返回 max(`age`)</span></div><div class="line">    [sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)), <span class="string">'DESC'</span>],</div><div class="line">    <span class="comment">// 返回 max(`age`) DESC</span></div><div class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.col(<span class="string">'col1'</span>), <span class="number">12</span>, <span class="string">'lalala'</span>), <span class="string">'DESC'</span>],</div><div class="line">    <span class="comment">// 返回 otherfunction(`col1`, 12, 'lalala') DESC</span></div><div class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.fn(<span class="string">'awesomefunction'</span>, sequelize.col(<span class="string">'col'</span>))), <span class="string">'DESC'</span>]</div><div class="line">    <span class="comment">// 返回 otherfunction(awesomefunction(`col`)) DESC, 有可能是无限循环</span></div><div class="line">    [&#123; <span class="attr">raw</span>: <span class="string">'otherfunction(awesomefunction(`col`))'</span> &#125;, <span class="string">'DESC'</span>]</div><div class="line">    <span class="comment">// 也可以这样写</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 分页查询</span></div><div class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</div><div class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;)</div><div class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>关联查询 <code>include</code> 支持嵌套，这可能是<code>ORM</code>里面最难的部分。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</div><div class="line">  , Task = sequelize.define(<span class="string">'task'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</div><div class="line">  , Tool = sequelize.define(<span class="string">'tool'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</div><div class="line"></div><div class="line">Task.belongsTo(User) <span class="comment">// 增加外键属性 UserId 到 Task</span></div><div class="line">User.hasMany(Task) <span class="comment">// 给 Task 增加外键属性 userId</span></div><div class="line">User.hasMany(Tool, &#123; <span class="attr">as</span>: <span class="string">'Instruments'</span> &#125;) <span class="comment">// 给 Task 增加自定义外键属性 InstrumentsId</span></div><div class="line"></div><div class="line">Task.findAll(&#123; <span class="attr">include</span>: [ User ] &#125;)</div><div class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123;</div><div class="line">    <span class="attr">model</span>: Tool,</div><div class="line">    <span class="attr">as</span>: <span class="string">'Instruments'</span>,</div><div class="line">    <span class="attr">where</span>: &#123; <span class="attr">name</span>: &#123; <span class="attr">$like</span>: <span class="string">'%ooth%'</span> &#125; &#125;</div><div class="line">&#125;] &#125;)</div><div class="line">User.findAll(&#123; <span class="attr">include</span>: [<span class="string">'Instruments'</span>] &#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> User = <span class="keyword">this</span>.sequelize.define(<span class="string">'user'</span>, &#123;<span class="comment">/* attributes */</span>&#125;, &#123;<span class="attr">underscored</span>: <span class="literal">true</span>&#125;)</div><div class="line">  , Company  = <span class="keyword">this</span>.sequelize.define(<span class="string">'company'</span>, &#123;</div><div class="line">    <span class="attr">uuid</span>: &#123;</div><div class="line">      <span class="attr">type</span>: Sequelize.UUID,</div><div class="line">      <span class="attr">primaryKey</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">User.belongsTo(Company); <span class="comment">// 增加 company_uuid 外键属性到 user</span></div><div class="line">User.belongsTo(UserRole, &#123;<span class="attr">as</span>: <span class="string">'role'</span>&#125;);</div><div class="line"><span class="comment">// 自定义外键属性 roleId 到 user 而不是 userRoleId</span></div><div class="line"></div><div class="line">User.belongsTo(Company, &#123;<span class="attr">foreignKey</span>: <span class="string">'fk_companyname'</span>, <span class="attr">targetKey</span>: <span class="string">'name'</span>&#125;); <span class="comment">// 增加自定义外键属性 fk_companyname 到 User</span></div><div class="line">Person.hasOne(Person, &#123;<span class="attr">as</span>: <span class="string">'Father'</span>, <span class="attr">foreignKey</span>: <span class="string">'DadId'</span>&#125;)</div><div class="line"><span class="comment">// Person 增加外键属性 DadId</span></div><div class="line"></div><div class="line">Coach.hasOne(Team)  <span class="comment">// `coachId` 作为 Team 的外键属性</span></div><div class="line"></div><div class="line">Project.hasMany(User, &#123;<span class="attr">as</span>: <span class="string">'Workers'</span>&#125;)</div><div class="line"><span class="comment">// 给 User 增加外键属性 projectId ／ project_id</span></div><div class="line"></div><div class="line">Project.belongsToMany(User, &#123;<span class="attr">through</span>: <span class="string">'UserProject'</span>&#125;);</div><div class="line">User.belongsToMany(Project, &#123;<span class="attr">through</span>: <span class="string">'UserProject'</span>&#125;);</div><div class="line"><span class="comment">// 创建新的模型: UserProject 包含外键属性：projectId 和 userId</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>Sequelize</code>还有完善的迁移同步数据方案,<code>migrate so easy</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//$ sequelize db:migrate //用命令直接生成模版脚本，接下来的还是写js</div><div class="line">module.exports = &#123;</div><div class="line">  up: function(queryInterface, Sequelize) &#123;</div><div class="line">    // 需要修改数据库的操作</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  down: function(queryInterface, Sequelize) &#123;</div><div class="line">    // 取消修改的操作</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好的，快餐吃到这里，希望大家喜欢<code>nodejs</code>，能够快速开发<code>Node App</code>～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Adam&lt;/p&gt;
&lt;h2 id=&quot;什么是ORM？&quot;&gt;&lt;a href=&quot;#什么是ORM？&quot; class=&quot;headerlink&quot; title=&quot;什么是ORM？&quot;&gt;&lt;/a&gt;什么是&lt;code&gt;ORM&lt;/code&gt;？&lt;/h2&gt;&lt;p&gt;简单的讲就是对&lt;code&gt;SQL&lt;/code&gt;查询语句的封装，让我们可以用&lt;code&gt;OOP&lt;/code&gt;的方式操作数据库，优雅的生成安全、可维护的&lt;code&gt;SQL&lt;/code&gt;代码。直观上，是一种&lt;code&gt;Model&lt;/code&gt;和&lt;code&gt;SQL&lt;/code&gt;的映射关系。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pinbot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ORM" scheme="http://blog.pinbot.me/tags/ORM/"/>
    
      <category term="Nodejs" scheme="http://blog.pinbot.me/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN服务部署使用</title>
    <link href="http://blog.pinbot.me/2016/09/08/OpenVPN%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.pinbot.me/2016/09/08/OpenVPN服务部署使用/</id>
    <published>2016-09-08T12:00:00.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：liudong at 2016-09-08 20:00:00</p>
<p>OpenVPN服务部署使用</p>
<h2 id="1-服务端部署ubuntu"><a href="#1-服务端部署（Ubuntu）" class="headerlink" title="1 服务端部署（Ubuntu）"></a>1 服务端部署（Ubuntu）</h2><h3 id="11-安装openvpn-所需插件"><a href="#1-1-安装OpenVPN-所需插件" class="headerlink" title="1.1 安装OpenVPN 所需插件"></a>1.1 安装OpenVPN 所需插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openssl</div><div class="line">$ sudo apt-get install libssl-dev</div><div class="line">$ sudo apt-get install libpam0g-dev</div><div class="line">$ sudo apt-get install liblzo2-dev</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="12-安装openvpn"><a href="#1-2-安装OpenVPN" class="headerlink" title="1.2 安装OpenVPN"></a>1.2 安装OpenVPN</h3><p>注:以下安装方式任选一种,推荐apt-get方式安装</p>
<h4 id="121-apt-get安装openvpn"><a href="#1-2-1-apt-get安装OpenVPN" class="headerlink" title="1.2.1 apt-get安装OpenVPN"></a>1.2.1 apt-get安装OpenVPN</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$apt-get install openvpn</div><div class="line">$cd /etc/openvpn</div><div class="line">$mkdir conf log</div></pre></td></tr></table></figure>
<h4 id="122-源码安装openvpn建议使用222版本"><a href="#1-2-2-源码安装OpenVPN（建议使用2-2-2版本）" class="headerlink" title="1.2.2 源码安装OpenVPN（建议使用2.2.2版本）"></a>1.2.2 源码安装OpenVPN（建议使用2.2.2版本）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget http://swupdate.openvpn.org/community/releases/openvpn-2.2.2.tar.gz  </div><div class="line">$ tar -zxvf openvpn-2.2.2.tar.gz  </div><div class="line">$ mkdir /data/openvpn &amp;&amp; cd openvpn-2.2.2  </div><div class="line">$ ./configure --enable-password-save --prefix=/etc/openvpn  </div><div class="line">$ make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>
<p>注：–enable-password-save该选项是避免手工输入客户端密码；–prefix选项是真正的安装路径</p>
<h3 id="13-开启内核转发并配置源地址路由"><a href="#1-3-开启内核转发并配置源地址路由" class="headerlink" title="1.3 开启内核转发并配置源地址路由"></a>1.3 开启内核转发并配置源地址路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward </div><div class="line">$ iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE</div></pre></td></tr></table></figure>
<h3 id="14-服务端配置"><a href="#1-4-服务端配置" class="headerlink" title="1.4 服务端配置"></a>1.4 服务端配置</h3><h4 id="141-生成密钥"><a href="#1-4-1-生成密钥" class="headerlink" title="1.4.1 生成密钥"></a>1.4.1 生成密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cd openvpn-2.2.2/easy-rsa/2.0 </div><div class="line">$ source ./vars     # 在此之前，可以修改vars文件对国家省份等修改;配置dh的位数(默认是1024，可以改成export KEY_SIZE=2048)和下文生成的dh2048.pem相对应</div><div class="line">$ ./clean-all </div><div class="line">$ ./build-ca </div><div class="line">$ ./build-key-server server # 产生服务器证书，此处的server是文件名参数，可以任意修改。</div><div class="line">$ ./build-key-pass client1 # 生成客户端key，pass表示需要输入一个密码作为客户端启动时的凭证； ./build-key则不需要输入密码</div><div class="line">$ ./build-dh # 产生Diffie Hellman参数</div><div class="line">至此一个客户端所需的证书已经完毕，都在easy-rsa/2.0/keys文件夹下面，其中ca.crt server.crt server.csr server.key dh1024.pem是服务端所需证书文件，ca.crt ca.key client1.crt client1.csr client1.key是客户端所需证书文件。</div><div class="line">注：可以继续使用./build-key产生更多客户端证书,一个客户端证书只能同时用于一个客户端连接。</div></pre></td></tr></table></figure>
<h4 id="142-服务端配目录及文件"><a href="#1-4-2-服务端配目录及文件" class="headerlink" title="1.4.2 服务端配目录及文件"></a>1.4.2 服务端配目录及文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd openvpn &amp;&amp; mkdir conf # openvpn就是第2步中openvpn的安装目录 </div><div class="line">$ cp openvpn-2.2.2/sample-config-files/server.conf conf/</div><div class="line">$ cp openvpn-2.2.2/easy-rsa/2.0/keys/&#123;ca.crt,server.crt,server.csr,server.key,dh1024.pem&#125; conf/ # 拷贝openvpn-2.2.2/easy-rsa/2.0/keys/下的相关证书文件到openvpn/conf/目录下，注意:2048位的key则是dh2048.pem; 1024位的key则是dh1024.pem</div></pre></td></tr></table></figure>
<h4 id="143-服务端配置文件参数指定"><a href="#1-4-3-服务端配置文件参数指定" class="headerlink" title="1.4.3 服务端配置文件参数指定"></a>1.4.3 服务端配置文件参数指定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ vim conf/server.conf</div><div class="line">dev tap</div><div class="line">proto tcp</div><div class="line">port 1194</div><div class="line">ca /path/to/openvpn/conf/ca.crt</div><div class="line">cert /path/to/openvpn/conf/server.crt</div><div class="line">key /path/to/openvpn/conf/server.key</div><div class="line">dh /path/to/openvpn/conf/dh1024.pem</div><div class="line">user nobody</div><div class="line">group nogroup</div><div class="line">server 10.8.0.0 255.255.255.0     # 分配给clinet的ip段</div><div class="line">second time period</div><div class="line">keepalive 10 120                            # 每10秒ping一次，120秒内客户端没有动作就断开连接</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">verb 4</div><div class="line">log-append /path/to/openvpn/log/openvpn.log</div><div class="line">status /path/to/openvpn/log/openvpn-status.log</div><div class="line">client-to-client</div><div class="line">crl-verify /path/to/openvpn/conf/crl.pem            # 客户端证书连接限制</div><div class="line">comp-lzo</div></pre></td></tr></table></figure>
<h3 id="15-启动openvpn服务端"><a href="#1-5-启动OpenVPN服务端" class="headerlink" title="1.5 启动OpenVPN服务端"></a>1.5 启动OpenVPN服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /path/to/openvpn/sbin/openvpn --config /path/to/openvpn/conf/server.conf --daemon</div></pre></td></tr></table></figure>
<h3 id="16-检查验证"><a href="#1-6-检查验证" class="headerlink" title="1.6 检查验证"></a>1.6 检查验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ifconfig|grep inet|grep 10.8.0.1  </div><div class="line">inet 10.8.0.1 netmask 0xffffff00 broadcast 10.8.0.255</div></pre></td></tr></table></figure>
<p>注：得到IP为：10.8.0.1 则说明VPN服务端配置成功  </p>
<h3 id="17-设置openvpn服务端开机启动"><a href="#1-7-设置OpenVPN服务端开机启动" class="headerlink" title="1.7 设置OpenVPN服务端开机启动"></a>1.7 设置OpenVPN服务端开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/rc.local</div><div class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE</div><div class="line">/path/to/openvpn/sbin/openvpn --config /path/to/openvpn/conf/server.conf --daemon</div></pre></td></tr></table></figure>
<h2 id="2-openvpn-客户端部署mac系统"><a href="#2-OpenVPN-客户端部署-MAC系统" class="headerlink" title="2 OpenVPN 客户端部署(MAC系统)"></a>2 OpenVPN 客户端部署(MAC系统)</h2><h3 id="21-安装openvpn-所需插件"><a href="#2-1-安装OpenVPN-所需插件" class="headerlink" title="2.1 安装OpenVPN 所需插件"></a>2.1 安装OpenVPN 所需插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo brew install openssl</div></pre></td></tr></table></figure>
<h3 id="22-安装openvpn"><a href="#2-2-安装OpenVPN" class="headerlink" title="2.2 安装OpenVPN"></a>2.2 安装OpenVPN</h3><p>注:以下安装方式任选一种,推荐Brew方式安装</p>
<h4 id="221-brew-安装"><a href="#2-2-1-Brew-安装" class="headerlink" title="2.2.1 Brew 安装"></a>2.2.1 Brew 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">直接brew安装(推荐)</div><div class="line">$brew install openvpn</div><div class="line">$cd /usr/local/Cellar/openvpn/2.3.11_1</div><div class="line">$mkdir conf log</div><div class="line">$ln -s /usr/local/Cellar/openvpn/2.3.11_1/sbin/openvpn /usr/local/bin/openvpn</div></pre></td></tr></table></figure>
<h4 id="222-源码安装建议使用222版本"><a href="#2-2-2-源码安装（建议使用2-2-2版本）" class="headerlink" title="2.2.2 源码安装（建议使用2.2.2版本）"></a>2.2.2 源码安装（建议使用2.2.2版本）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget http://swupdate.openvpn.org/community/releases/openvpn-2.2.2.tar.gz  </div><div class="line">$ tar -zxvf openvpn-2.2.2.tar.gz  </div><div class="line">$ mkdir /data/openvpn &amp;&amp; cd openvpn-2.2.2  </div><div class="line">$ ./configure --enable-password-save --prefix=/etc/openvpn  </div><div class="line">$ make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>
<p>注：–enable-password-save该选项是避免手工输入客户端密码；–prefix选项是真正的安装路径</p>
<h3 id="23-服务端生成客户端所需密钥客户端部署可忽略此步骤"><a href="#2-3-服务端生成客户端所需密钥-客户端部署可忽略此步骤" class="headerlink" title="2.3 服务端生成客户端所需密钥(客户端部署可忽略此步骤)"></a>2.3 服务端生成客户端所需密钥(客户端部署可忽略此步骤)</h3><h4 id="231-服务端连接"><a href="#2-3-1-服务端连接" class="headerlink" title="2.3.1 服务端连接"></a>2.3.1 服务端连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务端所在机器：xxx.xxx.xxx.xxx  </div><div class="line">$ssh root@xxx.xxx.xxx.xxx  #连接方式</div><div class="line">$cd /media/openvpn/  服务端所在路径</div><div class="line">$cd /media/openvpn-2.2.2/easy-rsa/2.0  生成密钥所需路径</div></pre></td></tr></table></figure>
<h4 id="232-生成密钥"><a href="#2-3-2-生成密钥" class="headerlink" title="2.3.2 生成密钥"></a>2.3.2 生成密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ source ./vars  </div><div class="line">$ ./build-key-pass client-A    #此处设置密码为：openvpn123</div></pre></td></tr></table></figure>
<p>注：生成客户端key，pass表示需要输入一个密码作为客户端启动时的凭证； ./build-key则不需要输入密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-dh</div></pre></td></tr></table></figure></p>
<h4 id="233设置客户端密钥验证信息"><a href="#2-3-3设置客户端密钥验证信息" class="headerlink" title="2.3.3设置客户端密钥验证信息"></a>2.3.3设置客户端密钥验证信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /media/openvpn/conf/ccd/client-A  </div><div class="line">ifconfig-push 10.8.0.119 255.255.255.0</div></pre></td></tr></table></figure>
<p>注：此处的验证信息文件名需要和生成密钥时输入的名字保持一致;<br>10.8.0.119 指客户端被虚拟出来的IP  </p>
<h3 id="24-客户端配置"><a href="#2-4-客户端配置" class="headerlink" title="2.4 客户端配置"></a>2.4 客户端配置</h3><h4 id="241-拷贝密钥到客户端"><a href="#2-4-1-拷贝密钥到客户端" class="headerlink" title="2.4.1 拷贝密钥到客户端"></a>2.4.1 拷贝密钥到客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scp root@xxx.xxx.xxx.xxx:/media/openvpn-2.2.2/easy-rsa/2.0/keys/&#123;ca.crt,ca.key,client-A.crt,client-A.csr,client-A.key&#125;   /usr/local/Cellar/openvpn/2.3.11_1/conf/</div><div class="line">注:密钥可以由维护人员发放,联系刘东;</div></pre></td></tr></table></figure>
<h4 id="242-配置客户端密码文件"><a href="#2-4-2-配置客户端密码文件" class="headerlink" title="2.4.2 配置客户端密码文件"></a>2.4.2 配置客户端密码文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/local/Cellar/openvpn/2.3.11_1/conf/password.txt  </div><div class="line">openvpn123</div></pre></td></tr></table></figure>
<p>注:客户端密码文件和服务端生成密钥时输入的密码一致</p>
<h4 id="243-客户端配置文件"><a href="#2-4-3-客户端配置文件" class="headerlink" title="2.4.3 客户端配置文件"></a>2.4.3 客户端配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/local/Cellar/openvpn/2.3.11_1/conf/client.conf  </div><div class="line">client  </div><div class="line">dev tap  </div><div class="line">proto tcp  </div><div class="line">remote xxx.xxx.xxx.xxx 1194   #指定服务端外网IP及端口</div><div class="line">nobind  </div><div class="line">user nobody  </div><div class="line">group nogroup  </div><div class="line">ca /usr/local/Cellar/openvpn/2.3.11_1/conf/ca.crt  </div><div class="line">cert /usr/local/Cellar/openvpn/2.3.11_1/conf/client-A.crt  </div><div class="line">key /usr/local/Cellar/openvpn/2.3.11_1/conf/client-A.key  </div><div class="line">ping 15  </div><div class="line">ping-restart 45  </div><div class="line">ping-timer-rem  </div><div class="line">persist-key  </div><div class="line">persist-tun  </div><div class="line">ns-cert-type server  </div><div class="line">comp-lzo  </div><div class="line">verb 4  </div><div class="line">log-append /usr/local/Cellar/openvpn/2.3.11_1/log/openvpn.log  </div><div class="line">status /usr/local/Cellar/openvpn/2.3.11_1/log/openvpn-status.log  </div><div class="line">tcp-queue-limit 4096 # 256  </div><div class="line">bcast-buffers 4096</div></pre></td></tr></table></figure>
<h3 id="25-启动客户端"><a href="#2-5-启动客户端" class="headerlink" title="2.5 启动客户端"></a>2.5 启动客户端</h3><h4 id="251-命令行启动openvpn"><a href="#2-5-1-命令行启动OpenVPN" class="headerlink" title="2.5.1 命令行启动OpenVPN"></a>2.5.1 命令行启动OpenVPN</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /usr/local/bin/openvpn --config /usr/local/Cellar/openvpn/2.3.11_1/conf/client.conf --askpass /usr/local/Cellar/openvpn/2.3.11_1/conf/password.txt --daemon</div></pre></td></tr></table></figure>
<h4 id="252-gui启动openvpn"><a href="#2-5-2-GUI启动OpenVPN" class="headerlink" title="2.5.2 GUI启动OpenVPN"></a>2.5.2 GUI启动OpenVPN</h4><ul>
<li>下载Tunnelblick客户端<br>直接官网下载: <a href="https://tunnelblick.net/downloads.html" target="_blank" rel="external">https://tunnelblick.net/downloads.html</a>    </li>
<li>安装Tunnelblick客户端<br>Tunnelblick具体安装使用流程见：<a href="http://blog.csdn.net/sinat_25471067/article/details/43482837" target="_blank" rel="external">Mac系统Tunnelblick下载以及安装流程</a></li>
</ul>
<h3 id="26-检查验证"><a href="#2-6-检查验证" class="headerlink" title="2.6 检查验证"></a>2.6 检查验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ifconfig|grep inet|grep 10.8.0.119  </div><div class="line">inet 10.8.0.119 netmask 0xffffff00 broadcast 10.8.0.255</div></pre></td></tr></table></figure>
<p>注：得到IP为：10.8.0.x 则说明VPN客户端配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ping 10.8.0.1    #检查是否能ping通内网等机器</div></pre></td></tr></table></figure></p>
<h3 id="27-服务加入开机自启动"><a href="#2-7-服务加入开机自启动" class="headerlink" title="2.7 服务加入开机自启动"></a>2.7 服务加入开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /etc/rc.local</div><div class="line">/usr/local/bin/openvpn --config /usr/local/Cellar/openvpn/2.3.11_1/conf/client.conf --askpass /usr/local/Cellar/openvpn/2.3.11_1/conf/password.txt --daemon</div></pre></td></tr></table></figure>
<h2 id="3-openvpn-客户端部署ubuntu系统"><a href="#3-OpenVPN-客户端部署-Ubuntu系统" class="headerlink" title="3 OpenVPN 客户端部署(Ubuntu系统)"></a>3 OpenVPN 客户端部署(Ubuntu系统)</h2><h3 id="31-安装openvpn-所需插件"><a href="#3-1-安装OpenVPN-所需插件" class="headerlink" title="3.1 安装OpenVPN 所需插件"></a>3.1 安装OpenVPN 所需插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openssl</div><div class="line">$ sudo apt-get install libssl-dev</div><div class="line">$ sudo apt-get install libpam0g-dev</div><div class="line">$ sudo apt-get install liblzo2-dev</div></pre></td></tr></table></figure>
<h3 id="32-安装openvpn"><a href="#3-2-安装OpenVPN" class="headerlink" title="3.2 安装OpenVPN"></a>3.2 安装OpenVPN</h3><p>注:以下安装方式任选一种,推荐apt-get方式安装</p>
<h4 id="321-apt-get安装openvpn"><a href="#3-2-1-apt-get安装OpenVPN" class="headerlink" title="3.2.1 apt-get安装OpenVPN"></a>3.2.1 apt-get安装OpenVPN</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$apt-get install openvpn</div><div class="line">$cd /etc/openvpn</div><div class="line">$mkdir conf log</div></pre></td></tr></table></figure>
<h4 id="322-源码安装openvpn建议使用222版本"><a href="#3-2-2-源码安装OpenVPN（建议使用2-2-2版本）" class="headerlink" title="3.2.2 源码安装OpenVPN（建议使用2.2.2版本）"></a>3.2.2 源码安装OpenVPN（建议使用2.2.2版本）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget http://swupdate.openvpn.org/community/releases/openvpn-2.2.2.tar.gz  </div><div class="line">$ tar -zxvf openvpn-2.2.2.tar.gz  </div><div class="line">$ mkdir /data/openvpn &amp;&amp; cd openvpn-2.2.2  </div><div class="line">$ ./configure --enable-password-save --prefix=/etc/openvpn  </div><div class="line">$ make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>
<p>注：–enable-password-save该选项是避免手工输入客户端密码；–prefix选项是真正的安装路径</p>
<h3 id="33-服务端生成客户端所需密钥客户端部署可忽略此步骤"><a href="#3-3-服务端生成客户端所需密钥-客户端部署可忽略此步骤" class="headerlink" title="3.3 服务端生成客户端所需密钥(客户端部署可忽略此步骤)"></a>3.3 服务端生成客户端所需密钥(客户端部署可忽略此步骤)</h3><h4 id="331-服务端连接"><a href="#3-3-1-服务端连接" class="headerlink" title="3.3.1 服务端连接"></a>3.3.1 服务端连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务端所在机器：xxx.xxx.xxx.xxx  </div><div class="line">$ssh root@xxx.xxx.xxx.xxx  #连接方式</div><div class="line">$cd /media/openvpn/  服务端所在路径</div><div class="line">$cd /media/openvpn-2.2.2/easy-rsa/2.0  生成密钥所需路径</div></pre></td></tr></table></figure>
<h4 id="332-生成密钥"><a href="#3-3-2-生成密钥" class="headerlink" title="3.3.2 生成密钥"></a>3.3.2 生成密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ source ./vars  </div><div class="line">$ ./build-key-pass client-B    #此处设置密码为：openvpn123</div></pre></td></tr></table></figure>
<p>注：生成客户端key，pass表示需要输入一个密码作为客户端启动时的凭证； ./build-key则不需要输入密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-dh</div></pre></td></tr></table></figure></p>
<h4 id="333设置客户端密钥验证信息"><a href="#3-3-3设置客户端密钥验证信息" class="headerlink" title="3.3.3设置客户端密钥验证信息"></a>3.3.3设置客户端密钥验证信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /media/openvpn/conf/ccd/client-B  </div><div class="line">ifconfig-push 10.8.0.120 255.255.255.0</div></pre></td></tr></table></figure>
<p>注：此处的验证信息文件名需要和生成密钥时输入的名字保持一致;<br>10.8.0.120 指客户端被虚拟出来的IP  </p>
<h3 id="34-客户端配置"><a href="#3-4-客户端配置" class="headerlink" title="3.4 客户端配置"></a>3.4 客户端配置</h3><h4 id="341-拷贝密钥到客户端"><a href="#3-4-1-拷贝密钥到客户端" class="headerlink" title="3.4.1 拷贝密钥到客户端"></a>3.4.1 拷贝密钥到客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scp root@xxx.xxx.xxx.xxx:/media/openvpn-2.2.2/easy-rsa/2.0/keys/&#123;ca.crt,ca.key,client-B.crt,client-B.csr,client-B.key&#125;   /etc/openvpn/conf</div><div class="line">注:密钥可以由维护人员发放,联系刘东;</div></pre></td></tr></table></figure>
<h4 id="342-配置客户端密码文件"><a href="#3-4-2-配置客户端密码文件" class="headerlink" title="3.4.2 配置客户端密码文件"></a>3.4.2 配置客户端密码文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/openvpn/conf/password.txt  </div><div class="line">openvpn123</div></pre></td></tr></table></figure>
<p>注:客户端密码文件和服务端生成密钥时输入的密码一致</p>
<h4 id="343-客户端配置文件"><a href="#3-4-3-客户端配置文件" class="headerlink" title="3.4.3 客户端配置文件"></a>3.4.3 客户端配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/openvpn/conf/client.conf  </div><div class="line">client  </div><div class="line">dev tap  </div><div class="line">proto tcp  </div><div class="line">remote xxx.xxx.xxx.xxx 1194   #指定服务端外网IP及端口</div><div class="line"></div><div class="line">nobind  </div><div class="line">user nobody  </div><div class="line">group nogroup  </div><div class="line">ca /etc/openvpn/conf/ca.crt  </div><div class="line">cert /etc/openvpn/conf/client-B.crt  </div><div class="line">key /etc/openvpn/conf/client-B.key  </div><div class="line"></div><div class="line">ping 15  </div><div class="line"></div><div class="line">ping-restart 45  </div><div class="line">ping-timer-rem  </div><div class="line">persist-key  </div><div class="line">persist-tun  </div><div class="line">ns-cert-type server  </div><div class="line">comp-lzo  </div><div class="line"></div><div class="line">verb 4  </div><div class="line">log-append /etc/openvpn/log/openvpn.log  </div><div class="line">status /etc/openvpn/log/openvpn-status.log  </div><div class="line"></div><div class="line">tcp-queue-limit 4096 # 256  </div><div class="line">bcast-buffers 4096</div></pre></td></tr></table></figure>
<h3 id="35-启动客户端"><a href="#3-5-启动客户端" class="headerlink" title="3.5 启动客户端"></a>3.5 启动客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo openvpn --config /etc/openvpn/conf/client.conf --askpass /etc/openvpn/conf/password.txt --daemon</div></pre></td></tr></table></figure>
<h3 id="36-检查验证"><a href="#3-6-检查验证" class="headerlink" title="3.6 检查验证"></a>3.6 检查验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ifconfig|grep inet|grep 10.8.0.120  </div><div class="line">inet 10.8.0.120 netmask 0xffffff00 broadcast 10.8.0.255</div></pre></td></tr></table></figure>
<p>注：得到IP为：10.8.0.x 则说明VPN客户端配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ping 10.8.0.1    #检查是否能ping通内网等机器</div></pre></td></tr></table></figure></p>
<h3 id="37-服务加入开机自启动"><a href="#3-7-服务加入开机自启动" class="headerlink" title="3.7 服务加入开机自启动"></a>3.7 服务加入开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /etc/rc.local</div><div class="line">openvpn --config /etc/openvpn/conf/client.conf --askpass /etc/openvpn/conf/password.txt --daemon</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：liudong at 2016-09-08 20:00:00&lt;/p&gt;
&lt;p&gt;OpenVPN服务部署使用&lt;/p&gt;
&lt;h2 id=&quot;1-服务端部署（Ubuntu）&quot;&gt;&lt;a href=&quot;#1-服务端部署（Ubuntu）&quot; class=&quot;headerlink&quot; title=&quot;1 服务端部署（Ubuntu）&quot;&gt;&lt;/a&gt;1 服务端部署（Ubuntu）&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装OpenVPN-所需插件&quot;&gt;&lt;a href=&quot;#1-1-安装OpenVPN-所需插件&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装OpenVPN 所需插件&quot;&gt;&lt;/a&gt;1.1 安装OpenVPN 所需插件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install openssl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install libssl-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install libpam0g-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install liblzo2-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.pinbot.me/categories/blog/"/>
    
    
      <category term="运维" scheme="http://blog.pinbot.me/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>从程序员到架构师的成长之路</title>
    <link href="http://blog.pinbot.me/2016/09/07/%E4%BB%8E%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"/>
    <id>http://blog.pinbot.me/2016/09/07/从程序员到架构师的成长之路/</id>
    <published>2016-09-07T06:08:21.000Z</published>
    <updated>2016-09-27T17:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者: likaiguo</p>
<h2 id="从程序员到架构师的成长之路"><a href="#从程序员到架构师的成长之路" class="headerlink" title="从程序员到架构师的成长之路"></a>从程序员到架构师的成长之路</h2><hr>
<h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><ul>
<li>程序员的技术发展道路和职业规划</li>
<li>提升代码质量和开发效率的方法</li>
<li>什么是适合业务发展的好架构?</li>
<li>架构师日常工作,享受什么样的苦与乐?</li>
</ul>
<a id="more"></a>
<hr>
<h2 id="讲师简介"><a href="#讲师简介" class="headerlink" title="讲师简介"></a>讲师简介</h2><p><strong>李开国</strong></p>
<ul>
<li>对系统架构设计有深入理解</li>
<li>专注机器学习和自然语言处理</li>
<li>某互联网创业公司技术总监</li>
<li>前腾讯QQ离线数据挖掘工程师</li>
<li>OneAPM公开课:《推荐系统架构演进》讲师</li>
<li>趋势科技Big Data创意程序大赛中国区亚军,国际季军</li>
<li>中科大硕士研究生</li>
</ul>
<p>weixin: likaiguo<br>weibo : <a href="http://weibo.com/likaiguo" target="_blank" rel="external">http://weibo.com/likaiguo</a></p>
<hr>
<h2 id="课程大纲"><a href="#课程大纲-1" class="headerlink" title="课程大纲"></a>课程大纲</h2><ul>
<li>程序员的技术发展道路和职业规划</li>
<li>提升代码质量和开发效率的方法</li>
<li>什么是适合业务发展的好架构?</li>
<li>架构师日常工作,享受什么样的苦与乐?</li>
</ul>
<hr>
<h1 id="一程序员的技术发展道路和职业规划"><a href="#一-程序员的技术发展道路和职业规划" class="headerlink" title="一.程序员的技术发展道路和职业规划"></a>一.程序员的技术发展道路和职业规划</h1><hr>
<h2 id="明确入行的目的"><a href="#明确入行的目的" class="headerlink" title="明确入行的目的"></a>明确入行的目的</h2><ul>
<li><p>冲着“收入高”这一点</p>
</li>
<li><p>对技术充满热爱</p>
</li>
<li><p>有改变世界的冲动</p>
</li>
</ul>
<hr>
<h3 id="技术发展规划"><a href="#技术发展规划" class="headerlink" title="技术发展规划"></a>技术发展规划</h3><ul>
<li>软件业人才结构</li>
</ul>
<p>程序员是技术相关的职业生涯一个不错的开始，不论你以后是要做CTO还是总监等等，<br>只要你还做着技术大家庭中的一员，那现在的技术沉淀，都将是你未来的基石。</p>
<hr>
<h3 id="主要技术类岗位"><a href="#主要技术类岗位" class="headerlink" title="主要技术类岗位"></a>主要技术类岗位</h3><p><img src="http://img.pinbot.me:8080/uploads/2016/9/21/blob_1474445895893.png" alt="2016-9-21-截图" title="blob_1474445895893.png"></p>
<p><strong>选择合适的工具</strong></p>
<p>语言只不过是一个工具，“与其分散进攻，不如全力一击”<br>万变不离其宗</p>
<ul>
<li>面向过程</li>
<li>面向对象</li>
<li>函数式编程</li>
</ul>
<hr>
<h3 id="明确发展方向"><a href="#明确发展方向" class="headerlink" title="明确发展方向"></a>明确发展方向</h3><p>做啥???</p>
<hr>
<h3 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h3><p>最关键的一点: 你的梦想(理想)是什么? O(∩_∩)O哈哈~</p>
<ul>
<li>角色发展路线</li>
<li>不仅仅是coder<br>抽取《软技能：代码之外的生存之道》</li>
</ul>
<hr>
<h3 id="程序员来源"><a href="#程序员来源" class="headerlink" title="程序员来源"></a>程序员来源</h3><p>专业:</p>
<ul>
<li>科班计算机/软件工程类专业;</li>
<li>自动化,通信,信息科学类计算机相关专业;</li>
<li>生物相关理科专业;</li>
<li>文科类专业;</li>
</ul>
<p>大致分为以下几类:</p>
<p>专业科班<br>相关专业人员<br>半路出家<br>基于兴趣</p>
<hr>
<h2 id="职位跳转图谱软件工程师"><a href="#职位跳转图谱-软件工程师" class="headerlink" title="职位跳转图谱:软件工程师"></a>职位跳转图谱:软件工程师</h2><p><img src="http://img.pinbot.me:8080/uploads/2016/9/22/blob_1474503825790.png" alt="职位跳转图谱:软件工程师"></p>
<hr>
<h2 id="职位跳转图谱架构师"><a href="#职位跳转图谱-架构师" class="headerlink" title="职位跳转图谱:架构师"></a>职位跳转图谱:架构师</h2><p><img src="http://img.pinbot.me:8080/uploads/2016/9/22/blob_1474503676900.png" alt="职位跳转图谱:架构师"></p>
<hr>
<h3 id="职业通道的路线一览"><a href="#职业通道的路线一览" class="headerlink" title="职业通道的路线一览"></a>职业通道的路线一览</h3><p><img src="http://images.cnitblog.com/blog/558323/201310/11152938-58c7b0a283bd4209a96ab182ecf86cb2.jpg" alt=""></p>
<p>可能与有些公司的职位不符，毕竟公司不一样，规模和起名的习惯可能不一样，但是大体上是这么个路子。不要太拘泥于职位名称。</p>
<hr>
<h3 id="程序员职业发展路径"><a href="#程序员职业发展路径" class="headerlink" title="程序员职业发展路径"></a>程序员职业发展路径</h3><p>程序员工作两三年后，基本上都会考虑自己的未来发展方向。发展的路径主要有以下三种：</p>
<ul>
<li>程序员–系统分析员–架构师–技术经理(Team Leader)–&gt;(技术总监)–CTO；</li>
<li>程序员–&gt;高级工程师–&gt;资深工程师–&gt;技术专家–&gt;CTO;</li>
<li>程序员–项目组长–项目经理–项目总监–CTO；</li>
<li>程序员–&gt;产品经理–&gt;产品总监–&gt;CTO;</li>
<li>现在还多了另一条路，创业（创业合伙人）。现在技术创业的越来越多，大有流行趋势。</li>
</ul>
<p>（虽然都是CTO，主要的关注点和方向上有些不一样）</p>
<p>不管是项目经理还是技术经理与产品经理，都要求要熟悉业务，业务是需求的来源，没有不谈业务的技术，所以不管你从哪个方向发展，都要求对业务熟悉。</p>
<p>产品经理要求对业务最熟悉，项目经理次之，技术经理排最后。对于程序员来说，刚开始工作的前几年可以埋头扎到技术里面，一般这个时间在2-3年的时间，然后就应该多关注业务了。</p>
<p><a href="http://blog.jobbole.com/899/" target="_blank" rel="external">分享8年开发经验，浅谈程序员职业规划</a><br><a href="http://www.jianshu.com/p/707429df2b5a" target="_blank" rel="external">程序员的职业发展道路</a></p>
<ol>
<li>从技术向业务过渡</li>
<li>从程序员向技术管理发展</li>
<li>单方面向技术发展</li>
</ol>
<p><a href="http://www.cnblogs.com/zuoxiaolong/p/life15.html" target="_blank" rel="external">浅谈程序猿的职业规划，看你如何决定自己的未来吧</a></p>
<hr>
<h3 id="程序员职业发展路径"><a href="#程序员职业发展路径-1" class="headerlink" title="程序员职业发展路径"></a>程序员职业发展路径</h3><p>开发工程师：这个大家是最熟悉的，这个角色主要负责系统中某个模块或某个功能的设计与编码，有时候还会有数据库设计的工作等等。</p>
<p>研发经理：主要负责项目的技术选型，技术难题的攻克，技术人员的招聘，团队成员的技术培训与熏陶等一系列与技术相关的工作。</p>
<p>项目经理：主要负责项目进度的规划、跟进、落实、交付以及与客户的沟通等任务，是一个项目的监督者与管理者。</p>
<hr>
<h2 id="小组讨论"><a href="#小组讨论" class="headerlink" title="小组讨论:"></a>小组讨论:</h2><p style="
    text-align: center;
    font-size: 40px;
    margin-top: 200px;
">IT行业是吃青春饭???</p>

<p>程序员工作只能做到35岁吗？之后的路是怎么走的呢?</p>
<hr>
<h3 id="软件工程师年龄分布"><a href="#软件工程师年龄分布" class="headerlink" title="软件工程师年龄分布"></a>软件工程师年龄分布</h3><p><img src="http://img.pinbot.me:8080/uploads/2016/9/19/blob_1474280321485.png" alt="软件工程师年龄分布" title="blob_1474280321485.png"></p>
<hr>
<h3 id="高级软件工程师年龄分布"><a href="#高级软件工程师年龄分布" class="headerlink" title="高级软件工程师年龄分布"></a>高级软件工程师年龄分布</h3><p><img src="http://img.pinbot.me:8080/uploads/2016/9/19/blob_1474280438130.png" alt="高级软件工程师年龄分布" title="blob_1474280438130.png"></p>
<hr>
<h3 id="系统架构师年龄分布"><a href="#系统架构师年龄分布" class="headerlink" title="系统架构师年龄分布"></a>系统架构师年龄分布</h3><p><img src="http://img.pinbot.me:8080/uploads/2016/9/19/blob_1474280179571.png" alt="系统架构师年龄分布" title="blob_1474280179571.png"></p>
<hr>
<h3 id="it行业是吃青春饭"><a href="#IT行业是吃青春饭" class="headerlink" title="IT行业是吃青春饭???"></a>IT行业是吃青春饭???</h3><p>关于年龄的传说:</p>
<blockquote>
<p>你看的是五年前的文章吧，现在的主流说法是40岁。五年前是35岁，我大学那会儿是30岁。<br>时代是不断发展的。</p>
<p>我二十二的时候，他们说程序员只能干到25 。<br>我二十五的时候，他们说程序员只能干到27 。<br>我三十的时候，他们说程序员只能干到 35 。<br>我现在三十七了。我觉得再干三十年毫无压力。</p>
</blockquote>
<hr>
<h3 id="编程不是青春饭技术才是硬通货"><a href="#编程不是青春饭，技术才是硬通货。" class="headerlink" title="编程不是青春饭，技术才是硬通货。"></a>编程不是青春饭，技术才是硬通货。</h3><p>写程序可以说像盖房子，又不能说就是盖房子。<br>第一，盖房子要绝对的体力，人年纪越大，越吃力。写程序不一样，体力只是一部分，最重要的是智慧，同样的一个模块，你去看senior和刚毕业的小豆包们，绝对不一样。<br>第二，程序员，与其说软件工程师，是要求有完整的思维的，同样是计算机毕业的软件系的同学，北大青鸟和MIT的肯定不一样，所以知识和思维才是软件工程的核心~<br>第三，任何行业都会是优胜劣汰的~时间只是催化剂</p>
<hr>
<h2 id="成功无所谓年纪"><a href="#成功无所谓年纪" class="headerlink" title="成功无所谓年纪"></a>成功无所谓年纪</h2><p>如果你仍有斗志，上天就只能让你失踪于海难，让你出车祸，让你死于滑翔伞事故，让你得阿兹海默氏症，或者诸如此类的方式，才能无耻的战胜你。</p>
<blockquote>
<p>年纪大了、有家庭了、有小孩了，放不开手脚了。这个「现实」可不仅是程序员需要面对的，是所有人都需要面对的。</p>
</blockquote>
<p><strong>心态</strong> 真的太重要。</p>
<p>成功无所谓年纪:</p>
<ul>
<li><strong>你周围的人</strong></li>
<li><strong>国内外牛人</strong><br>各大公司的技术专家?<br>计算机语言的设计者?</li>
</ul>
<hr>
<h1 id="二提升代码质量和开发效率的方法"><a href="#二-提升代码质量和开发效率的方法" class="headerlink" title="二.提升代码质量和开发效率的方法"></a>二.提升代码质量和开发效率的方法</h1><hr>
<h2 id="第一原则-dry"><a href="#第一原则-DRY" class="headerlink" title="第一原则: DRY"></a>第一原则: DRY</h2><p>Don’t repeat youself!!!</p>
<hr>
<h3 id="1代码质量"><a href="#1-代码质量" class="headerlink" title="1.代码质量"></a>1.代码质量</h3><p>保证代码质量最简单的方法: 这个代码会给其他人review!</p>
<ul>
<li>团队代码规范</li>
<li>代码review</li>
<li>单元测试与集成测试</li>
<li>功能测试与性能测试</li>
<li>规范的需求和设计文档</li>
</ul>
<hr>
<h4 id="拥抱开源"><a href="#拥抱开源" class="headerlink" title="拥抱开源"></a>拥抱开源</h4><ul>
<li>阅读github上star或fork数高的代码</li>
<li>向开源社区提交代码</li>
<li>遵循开源社区的代码规范</li>
</ul>
<p><a href="http://docs.celeryproject.org/en/master/contributing.html" target="_blank" rel="external">celery对贡献者要求</a></p>
<p>Community Code of Conduct(社区行为准则)</p>
<ul>
<li>Be considerate(为别人着想) -&gt; 首先为人写程序,其次为机器</li>
<li>Be respectful(尊重)</li>
<li>Be collaborative(合作)</li>
<li>When you disagree, consult others(异见时询问他人)</li>
<li>When you’re unsure, ask for help(不确定时,寻求帮助)</li>
<li>Step down considerately(稳定的交接任务)</li>
</ul>
<hr>
<h4 id="找到合适的导师尤达"><a href="#找到合适的导师-尤达" class="headerlink" title="找到合适的导师(尤达)"></a>找到合适的导师(尤达)</h4><h3 id="向周围的人求教"><a href="#向周围的人求教" class="headerlink" title="向周围的人求教"></a>向周围的人求教</h3><ul>
<li>没有天才 &lt;极客与团队&gt;</li>
</ul>
<p>最直接的方式找认识的人,特别是团队中.</p>
<hr>
<h3 id="找到合适导师-书籍"><a href="#找到合适导师-书籍" class="headerlink" title="找到合适导师: 书籍"></a>找到合适导师: 书籍</h3><p>《代码整洁之道》<br>《代码大全》<br>《重构 改善既有代码的设计》</p>
<p>计划一年要读书的数量</p>
<p><a href="http://blog.jobbole.com/5886/" target="_blank" rel="external">StackOverflow讨论帖:哪本最具影响力的书，是每个程序员都应该读的 59本</a> [^books]</p>
<hr>
<h3 id="找到合适导师-公开课mooc"><a href="#找到合适导师-公开课-MOOC" class="headerlink" title="找到合适导师: 公开课/MOOC"></a>找到合适导师: 公开课/MOOC</h3><p>MOOC（Massive Open Online Courses）</p>
<ul>
<li>国外平台:<a href="http://www.skilledup.com/articles/the-best-mooc-provider-a-review-of-coursera-udacity-and-edx" target="_blank" rel="external">The Best MOOC Provider: A Review of Coursera, Udacity and Edx</a><ul>
<li>coursera <a href="https://www.coursera.org" target="_blank" rel="external">https://www.coursera.org</a></li>
<li>edx <a href="https://www.edx.org/" target="_blank" rel="external">https://www.edx.org/</a></li>
<li>优达学城 (Udacity) <a href="https://www.udacity.com/" target="_blank" rel="external">https://www.udacity.com/</a></li>
</ul>
</li>
<li>国内平台<ul>
<li>网易公开课 <a href="http://open.163.com/" target="_blank" rel="external">http://open.163.com/</a></li>
<li>慕课网 <a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a></li>
<li>麦子学院 <a href="http://www.maiziedu.com/" target="_blank" rel="external">http://www.maiziedu.com/</a></li>
<li>北京大学的公开课平台 <a href="http://mooc.pku.edu.cn/" target="_blank" rel="external">http://mooc.pku.edu.cn/</a></li>
<li>学堂在线 <a href="https://www.xuetangx.com/" target="_blank" rel="external">https://www.xuetangx.com/</a></li>
</ul>
</li>
</ul>
<p><strong>推荐</strong>: <a href="http://blog.sina.com.cn/s/blog_4caedc7a0102epu0.html" target="_blank" rel="external">在Coursera，随时都是学习的好时候–微软亚洲研究院副院长 张峥</a></p>
<hr>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li>产品设计文档</li>
<li>软件设计文档</li>
<li>测试用例文档</li>
<li>项目部署文档</li>
</ul>
<p>为什么需要有正式的文档?</p>
<hr>
<h3 id="重构-改善既有代码的设计"><a href="#重构-改善既有代码的设计" class="headerlink" title="重构: 改善既有代码的设计"></a>重构: 改善既有代码的设计</h3><p>重构：在不改变软件可观察行为的前提下改善其内部设计</p>
<p>为何重构：</p>
<ul>
<li>重构改进软件设计,提高软件质量</li>
<li>重构软件更容易理解,提升可读性</li>
<li>重构帮助找到bug,减少错误</li>
<li>重构提高编程速度,阻止系统腐烂变质</li>
</ul>
<p><a href="http://wdxtub.com/2016/08/09/refactoring-clip/" target="_blank" rel="external">书: 《重构 改善既有代码的设计》</a></p>
<hr>
<h4 id="重构-代码的坏味道"><a href="#重构-代码的坏味道" class="headerlink" title="重构: 代码的坏味道"></a>重构: 代码的坏味道</h4><ul>
<li>重复代码</li>
<li>过长函数</li>
<li>过大的类</li>
<li>过长参数列</li>
<li>发散式变化：类经常因为不同的原因在不同的方向上发生变化</li>
<li>霰弹式修改：每遇到某种变化，你都必须在许多不同的类内做出许多小修改</li>
<li>依恋情结：一个类的动作过分依赖其他类</li>
<li>数据泥团：不同地方的相同数据字段</li>
<li>基本类型偏执</li>
<li>Switch 惊悚现身：考虑用多态代替 switch</li>
</ul>
<hr>
<h4 id="重构-代码的坏味道"><a href="#重构-代码的坏味道-1" class="headerlink" title="重构: 代码的坏味道"></a>重构: 代码的坏味道</h4><ul>
<li>平行继承体系：为某个类增加一个子类的时候，也必须为另一个类相应增加一个子类<br>冗赘类</li>
<li>夸夸其谈未来性：某个抽象类其实没啥太大作用</li>
<li>令人迷惑的暂时字段</li>
<li>过度耦合的消息链</li>
<li>中间人：某个类接口有一半的函数都委托给其他类</li>
<li>狎昵关系：两个类过于亲密</li>
<li>异曲同工的类：两个函数做同一件事，却有着不同的签名</li>
<li>不完美的库类</li>
<li>纯稚的数据类：单纯的数据容器</li>
<li>被拒绝的遗赠：子类复用超类的行为，却又不愿意支持超类的接口</li>
<li>过多的注释：当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余</li>
</ul>
<hr>
<h3 id="构筑测试体系"><a href="#构筑测试体系" class="headerlink" title="构筑测试体系"></a>构筑测试体系</h3><p>测试</p>
<ul>
<li>确保所有测试都完全自动化，让它们检查自己的测试结果</li>
<li>一套测试就是一个强大的 bug 侦测器，能够大大缩减查找 bug 所需要的时间</li>
<li>频繁地运行测试。每次编译请把测试也考虑进去——每天至少执行每个测试一次</li>
<li>每当你收到 bug 报告，请先写一个单元测试来暴露 bug</li>
<li>编写未臻完善的测试并实际运行，好过对完美测试的无尽等待</li>
<li>考虑可能出错的边界条件，把测试火力集中在那儿</li>
<li>当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常</li>
<li>不要因为测试无法捕捉所有 bug 就不写测试，因为测试的确可以捕捉到大多数 bug</li>
</ul>
<p><a href="http://tech.youzan.com/code-coverage/" target="_blank" rel="external">浅谈代码覆盖率</a><br><a href="http://tech.youzan.com/layers_test_automation_practice/" target="_blank" rel="external">有赞分层自动化测试实践</a><br><a href="http://www.ibm.com/developerworks/cn/java/j-lo-agile/" target="_blank" rel="external">敏捷开发中高质量 Java 代码开发实践</a><br><a href="http://www.jianshu.com/p/31b21a0bf1e1" target="_blank" rel="external">写出高质量代码的10个Tips</a></p>
<hr>
<h2 id="2开发效率"><a href="#2-开发效率" class="headerlink" title="2.开发效率"></a>2.开发效率</h2><p><strong>效率</strong> 就是工作量除以时间。提高效率需要从这两方面着手，一是增大工作量，二是缩短工作时间。</p>
<p>【如何提升工作效率】<br>1、列出具体行动和细分目标，把待办清单画成流程图；<br>2、给每项清单任务附上优先度；<br>3、定时轮换任务调动积极性，花1小时在重要任务上，然后换着做一项容易而优先度较低的任务；<br>4、保持对重要任务的关注度，正在做一件事，却不时想着另外一个事，请把那件事记下来，忙完后再去做。</p>
<hr>
<h1 id="问程序员上班有什么提高效率技巧"><a href="#问-程序员上班有什么提高效率技巧？" class="headerlink" title="问:程序员上班有什么提高效率技巧？"></a>问:程序员上班有什么提高效率技巧？</h1><hr>
<h1 id="断网o_o哈哈~just-a-joke"><a href="#断网-O-∩-∩-O哈哈-Just-a-joke" class="headerlink" title="断网!O(∩_∩)O哈哈~(Just a joke!)"></a>断网!O(∩_∩)O哈哈~(Just a joke!)</h1><hr>
<h2 id="其他回答"><a href="#其他回答" class="headerlink" title="其他回答"></a>其他回答</h2><p>打开音乐播放器，戴上耳机，少刷sns；<br>有条件拔掉网线，无条件关掉浏览器\QQ，<br>手机静音，<br>暂时无视所有产品经理和设计师。</p>
<hr>
<h2 id="一切源于专注"><a href="#一切源于专注" class="headerlink" title="一切源于专注"></a>一切源于专注</h2><ul>
<li>专注并且避免重复.</li>
<li>DRY(Don’t repeat youself!!!)原则.</li>
<li>首先你得设置一个小目标. O(∩_∩)O!</li>
</ul>
<hr>
<h3 id="如何专注"><a href="#如何专注" class="headerlink" title="如何专注?"></a>如何专注?</h3><ul>
<li>方法: 番茄工作法</li>
<li>设置<strong>有优先级</strong>的任务列表(Todo List)</li>
<li>工具: <a href="https://pomotodo.com/app/" target="_blank" rel="external">番茄土豆</a></li>
</ul>
<p>关掉微信,QQ,邮件提醒;统一的时间,集中回复;</p>
<p><strong>设置可量化的目标</strong></p>
<ul>
<li>代码行数</li>
<li>文档数量</li>
<li>commit,bugfix数量</li>
<li>代码覆盖率 nose,CI</li>
</ul>
<hr>
<h3 id="设置deadline"><a href="#设置Deadline" class="headerlink" title="设置Deadline"></a>设置Deadline</h3><blockquote>
<p>美国的”自然科学基金委”(NSF)发现最近申请各种资金的科学项目提案太多了，审都审不过来，怎么办呢？<br>结果他们发现最好的解决办法就是。。。不设置申请的截止日期 (deadline)，总的提案数量自然减半； O(∩_∩)O!!!</p>
</blockquote>
<ul>
<li>保持对deadline的敬畏</li>
<li>一鼓作气,再而衰,三而竭</li>
</ul>
<hr>
<h3 id="我们要多线程么"><a href="#我们要多线程么" class="headerlink" title="我们要多线程么?"></a>我们要多线程么?</h3><p>为什么多任务并行一般都很糟?</p>
<ul>
<li>不停的上下文切换带来过多消耗</li>
<li>什么任务适合 进行多线程/多进程 并行<ul>
<li>例如: 跑步时候听听音乐;写程序时候听舒展的音乐</li>
<li>写作时候看电视???</li>
</ul>
</li>
</ul>
<p>例子:</p>
<ul>
<li>开车时候换挡/巡航模式</li>
<li>函数堆栈</li>
</ul>
<hr>
<h3 id="好记性不如烂笔头"><a href="#好记性不如烂笔头" class="headerlink" title="好记性不如烂笔头"></a>好记性不如烂笔头</h3><p><strong>书写</strong></p>
<ul>
<li>记云笔记，特别是费好大劲整理出来的资料。轻而易举就能拿到的资料没必要花时间记，利用搜索引擎即可。</li>
<li>桌上放一本白色草稿纸和笔，你随时需要利用图表捋顺思路。</li>
<li>思维导图: 捋顺思路后不妨花点时间整理成思维导图，下次看5秒的效果相当于花5分钟重整思路。</li>
</ul>
<p><strong>markdown让书写更美好</strong></p>
<ul>
<li>语法简洁</li>
<li>专注于内容</li>
<li>不去担心样式</li>
<li>纯文本便于版本管理</li>
</ul>
<p>markdown使用举例:</p>
<ul>
<li>文档书写: 强大的插件支持</li>
<li>书写博客: hexo等</li>
<li>PPT: landslide</li>
<li>论文: pandoc+latex</li>
</ul>
<hr>
<h3 id="责任心"><a href="#责任心" class="headerlink" title="责任心"></a>责任心</h3><ul>
<li><p>对自己负责: 对自己的承诺负责</p>
</li>
<li><p>自驱力: 自我驱动</p>
</li>
<li><p>外部问责</p>
</li>
</ul>
<hr>
<h3 id="找到你的time-killer"><a href="#找到你的Time-Killer" class="headerlink" title="找到你的Time Killer"></a>找到你的Time Killer</h3><p>找到最大的时间杀手</p>
<ul>
<li>找到最花费时间的地方;</li>
<li>找到自己的节奏: 什么时间段工作效率最高;</li>
<li>分配好工作内和工作外;</li>
<li>跟踪你的时间;</li>
</ul>
<p>是不是在:</p>
<ul>
<li>SNS</li>
<li>查看碎片信息: weibo,weixin,qq</li>
<li>看电视<br>上花费高昂?</li>
</ul>
<hr>
<h3 id="形成习惯"><a href="#形成习惯" class="headerlink" title="形成习惯"></a>形成习惯</h3><p>行为 惯例 习惯</p>
<blockquote>
<p>成就我们的恰恰是那些不断重复做的事情.因此,优秀不是一种行为,而是一种习惯. – 亚里士多德</p>
</blockquote>
<p>要培养工作习惯，并且要让其他人理解尊重你的工作习惯，你知道总被人打断的碎片化编程时间会杀了你</p>
<p>了解习惯</p>
<ul>
<li>习惯: 暗示,惯例,奖励</li>
</ul>
<p>找出坏习惯</p>
<ul>
<li>打开电脑后,查看email,各种QQ,微信,刷网页</li>
</ul>
<p>形成新习惯</p>
<ul>
<li>集中处理碎片任务</li>
<li>不加班，晚上早点睡觉，保持作息规律</li>
<li>工作时间设立小的计划</li>
</ul>
<hr>
<h3 id="快速解决coding中遇到的问题"><a href="#快速解决coding中遇到的问题" class="headerlink" title="快速解决coding中遇到的问题"></a>快速解决coding中遇到的问题</h3><ul>
<li>官方文档</li>
<li>Google(如果是技术问题避开百度吧!)</li>
<li>Github</li>
<li>Stackoverflow</li>
<li>源码</li>
</ul>
<hr>
<h3 id="对新技术充满热情"><a href="#对新技术充满热情" class="headerlink" title="对新技术充满热情"></a>对新技术充满热情</h3><ul>
<li>愿意使用新东西(慎重用于生产)</li>
<li>爱折腾</li>
</ul>
<hr>
<h3 id="不要重复造轮子"><a href="#不要重复造轮子" class="headerlink" title="不要重复造轮子"></a>不要重复造轮子</h3><ul>
<li>社会化编程的趋势越来越明显</li>
<li>研究和学习成熟的库</li>
<li>拥抱开源社区</li>
</ul>
<hr>
<h3 id="敢于造新轮子并分享开源它"><a href="#敢于造新轮子并分享-开源它" class="headerlink" title="敢于造新轮子并分享/开源它"></a>敢于造新轮子并分享/开源它</h3><p>我们并不总是满意其他人的封装和开源的工具包.慎重思考发现并不那么美好的时候,要敢于动手造一个新的了;</p>
<ul>
<li>找不到的轮子</li>
<li>不合适的轮子</li>
<li>不完美的轮子</li>
</ul>
<p>例如:</p>
<ul>
<li>gitchangelog</li>
<li>mkdocs</li>
<li>flask_admin</li>
<li>markdown_images <a href="http://img.pinbot.me:8088/" target="_blank" rel="external">http://img.pinbot.me:8088/</a></li>
</ul>
<hr>
<h2 id="小组讨论"><a href="#小组讨论-1" class="headerlink" title="小组讨论:"></a>小组讨论:</h2><p style="
    text-align: center;
    font-size: 40px;
    margin-top: 200px;
">阿里员工用脚本抢中秋节月饼,你怎么看???</p>

<hr>
<h4 id="自动化一切"><a href="#自动化一切" class="headerlink" title="自动化一切"></a>自动化一切</h4><p><strong>Automate everything!!!</strong></p>
<p>非常具有工程师思维. 只是没有做好边界条件测试;</p>
<ul>
<li><strong>自动化一切</strong><blockquote>
<p>各种自动化工具: fabrickk,ansible,docker等<br>自动化测试</p>
</blockquote>
</li>
<li><strong>工程师天生是追求效率的</strong><br>有人说认为程序员花大量的时间做自动化的工具，还不如人肉的效率高，比如，写自动化的脚本花5个小时，而重复做这件事200次只花3个小时。有这样的理解的人根本不懂工程。<br>一方面，这个工具可以共享重用，更多的人可以从中受益，这次我花5个小时开发这个工具，下次只用1小时改一下就可以用在别的地方，这是着眼于未来而不是眼下的成本。更重要的是，这是一种文化，一种提高效率的文化，他会鼓励和激发出更多的这样的事情发生。</li>
<li><strong>人类之所以比别的动物聪明就是会使用和发明工具.</strong><br>而古语也有云：“工欲善其事，必先利其器”，看看美军的装备你就知道战争工具的好坏有多重要了，一个公司的强大之处在执行力，而执行力的强大之处在于你有什么样的支持工具。这些，已经不是工程师文化，而是人类发展的文化。</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/22644277" target="_blank" rel="external">月饼事件-新篇章,leon lee最后回应</a></p>
<hr>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>熟练使用快捷键，不单能提高操作之间的切换速度。更重要的是它能时刻提醒你，你的软件还有这样那样的功能（尤其是IDE上的功能）。</p>
<ul>
<li>不要让手指离开键盘<br>编辑器之神: vim<br>我用到的vim模式演示<br>  vim<br>  所有编辑器: haroopad,Sublime,eclipse,pycharm<br>  浏览器: vimium<br>  命令行: oh-my-zsh vi插件</li>
</ul>
<p>其他各种快捷键<br>F2,F5-8,F12,C,V…</p>
<hr>
<h3 id="工欲善其事必先利其器"><a href="#工欲善其事必先利其器" class="headerlink" title="工欲善其事必先利其器"></a>工欲善其事必先利其器</h3><p>效率提升工具集推荐<br><strong>硬件层面</strong></p>
<ul>
<li>跑的更快的设备(Mac经验谈,SSD)</li>
<li>宽度合适的屏幕,多配一块屏幕辅助，省得来回切换窗口。</li>
<li>键盘<br><strong>代码书写</strong></li>
<li>合适的IDE</li>
<li>vim/emacs/sublime 编辑器</li>
<li>纯文本的威力</li>
<li>文档书写:markdown<br><strong>协作工具</strong></li>
<li>团队协作工具tower</li>
<li>代码版本管理git</li>
<li>持续集成Jenkins<br><strong>vim模式无处不在,各种插件</strong></li>
<li>浏览量网页: chrome的vimium插件</li>
<li>代码编辑器: 启用vim模式(eclipse,sublime)</li>
<li>书写文档: vim模式</li>
<li>命令行: oh-my-zsh,vim跳转</li>
</ul>
<hr>
<h3 id="减少无效沟通"><a href="#减少无效沟通" class="headerlink" title="减少无效沟通"></a>减少无效沟通</h3><ul>
<li>减少无效会议</li>
<li>用有效的非即时团队沟通软件如Tower、 Trello等,建立任务清单</li>
<li>无法快速用即时通讯软件完成的采用当面沟通或电话</li>
</ul>
<hr>
<h3 id="没有银弹"><a href="#没有银弹" class="headerlink" title="没有银弹"></a>没有银弹</h3><p>No sliver bullet!!!</p>
<p>不存在一个神奇的方法或技术“银弹”，实现数量级以上的程序员的工作效率的提升。</p>
<p>《人月神话》</p>
<hr>
<h1 id="三什么是适合业务发展的好架构"><a href="#三-什么是适合业务发展的好架构" class="headerlink" title="三.什么是适合业务发展的好架构?"></a>三.什么是适合业务发展的好架构?</h1><hr>
<h2 id="架构设计是由需求驱动而非模型驱动"><a href="#架构设计是由需求驱动，而非模型驱动。" class="headerlink" title="架构设计是由需求驱动，而非模型驱动。"></a>架构设计是由需求驱动，而非模型驱动。</h2><p>软件需求</p>
<ul>
<li>功能需求</li>
<li>质量属性（非功能需求）</li>
<li>设计约束</li>
</ul>
<p>不管是高层次的架构设计也好，还是最简单的功能实现也罢，对需求的把握都是至关重要的。<br>需求才是我们付出所有努力想要达到的目的，脱离了需求，就是“答非所问”。同样，大多的反复和变更都是因为对需求的把握不够精准，因此我们要给予需求足够的重视。</p>
<p><a href="http://www.tuicool.com/articles/6NRjqir" target="_blank" rel="external">一线架构师阅读体会-需求之于架构</a></p>
<hr>
<h2 id="唯一不变的就是变化本身把握好需求"><a href="#唯一不变的就是变化本身-把握好需求" class="headerlink" title="唯一不变的就是变化本身,把握好需求"></a>唯一不变的就是变化本身,把握好需求</h2><ul>
<li>架构是不断演进的<br>架构，平台不是买来的，也不是用一个开源就能获得的，也不是设计出来，而是长期演化才能落地生根的。</li>
<li>架构需要验证<br>在系统真正地投入生产使用之前，再好的架构都只是假设，产品越晚被使用者使用，失败的成本和风险就越高，而小步行进，通过MVP快速实验，获取客户反馈，迭代演化产品，能有效地减少失败的成本和风险。</li>
</ul>
<hr>
<h2 id="什么是软件架构"><a href="#什么是软件架构" class="headerlink" title="什么是软件架构"></a>什么是软件架构</h2><ul>
<li>什么是架构</li>
<li>架构的种类<ul>
<li>功能架构</li>
<li>技术架构</li>
<li>服务器架构</li>
<li>企业架构</li>
<li>网络架构</li>
<li>数据库架构</li>
<li>….</li>
</ul>
</li>
<li>软件架构定义</li>
</ul>
<hr>
<h1 id="架构重要么"><a href="#架构重要么" class="headerlink" title="架构重要么?"></a>架构重要么?</h1><hr>
<h2 id="软件架构好处"><a href="#软件架构好处" class="headerlink" title="软件架构好处"></a>软件架构好处</h2><ul>
<li>让团队跟随清晰的愿景和路线图</li>
<li>技术领导力和更好的协调</li>
<li>与人交流的刺激因素: 以便于回答与重要决策,非功能需求、限制和其他横切关注点相关的问题</li>
<li>识别和减轻风险的框架</li>
<li>方法和标准的一致性,随之而来的结构良好的代码库</li>
<li>正在构建的产品的坚实基础</li>
<li>与不同的听众,以不同层次的抽象来交流解决方案的结构</li>
</ul>
<hr>
<h3 id="基本概念篇"><a href="#基本概念篇" class="headerlink" title="基本概念篇"></a>基本概念篇</h3><ul>
<li>解析软件架构概念<ul>
<li>软件架构是应用程序与系统架构的结合</li>
<li>即从代码结构到将代码部署到生产环境,与一个软件系统重要元素相关的所有东西都是软件架构</li>
</ul>
</li>
<li>应用程序架构<ul>
<li>应用程序架构讨论的是软件设计低级别切面,通常只考虑单一的技术栈(如:java,.net,python)</li>
<li>结构单元以软件为基础</li>
</ul>
</li>
<li>系统架构<ul>
<li>更大规模的应用程序架构</li>
<li>端到端软件系统在较高层次的整体结构.组件和服务更高层次的抽象.</li>
<li>结构单元是各种软硬件,从编程语言框架到服务器和基础设施</li>
</ul>
</li>
</ul>
<hr>
<h3 id="架构设计基础"><a href="#架构设计基础" class="headerlink" title="架构设计基础"></a>架构设计基础</h3><ul>
<li><a href="https://wizardforcel.gitbooks.io/tutorialspoint-misc/content/design-patterns/1.html" target="_blank" rel="external">各种经典的设计模式(GoF)</a></li>
<li>&lt;设计原本&gt;</li>
</ul>
<hr>
<h3 id="设计的基本原则"><a href="#设计的基本原则" class="headerlink" title="设计的基本原则"></a>设计的基本原则</h3><ul>
<li>Don’t Repeat Yourself (DRY)</li>
<li>Keep It Simple, Stupid (KISS)</li>
<li>Program to an interface, not an implementation<br>设计模式中最根本的哲学，注重接口，而不是实现，依赖接口，而不是实现。接口是抽象是稳定的，实现则是多种多样的。</li>
<li>Command-Query Separation (CQS)  – 命令-查询分离原则</li>
<li>You Ain’t Gonna Need It (YAGNI)- 只考虑和设计必须的功能，避免过度设计。</li>
<li>Law of Demeter – 迪米特法则 - “最少知识原则”</li>
<li>面向对象的S.O.L.I.D 原则<ul>
<li>Single Responsibility Principle (SRP) – 职责单一原则</li>
<li>Open/Closed Principle (OCP) – 开闭原则</li>
<li>Liskov substitution principle (LSP) – 里氏代换原则</li>
<li>Interface Segregation Principle (ISP) – 接口隔离原则</li>
<li>Dependency Inversion Principle (DIP) – 依赖倒置原则</li>
</ul>
</li>
</ul>
<hr>
<h3 id="设计的基本原则"><a href="#设计的基本原则-1" class="headerlink" title="设计的基本原则"></a>设计的基本原则</h3><ul>
<li>Common Closure Principle（CCP）– 共同封闭原则<br>一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包，便影响了包中所有的类。一个更简短的说法是：一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</li>
<li>Common Reuse Principle (CRP) – 共同重用原则<br>CRP原则帮助我们决定哪些类应该被放到同一个包里。</li>
<li>Hollywood Principle – 好莱坞原则<br>“don’t call us, we’ll call you.”意思是，好莱坞的经纪人们不希望你去联系他们，而是他们会在需要的时候来联系你。也就是说，所有的组件都是被动的，所有的组件初始化和调用都由容器负责。组件处在一个容器当中，由容器负责管理。<br>好莱坞原则就是IoC（Inversion of Control）或DI（Dependency Injection ）的基础原则。这个原则很像依赖倒置原则，依赖接口，而不是实例，</li>
</ul>
<hr>
<h3 id="设计的基本原则"><a href="#设计的基本原则-2" class="headerlink" title="设计的基本原则"></a>设计的基本原则</h3><ul>
<li>High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合<br>UNIX操作系统设计的经典原则，把模块间的耦合降到最低，而努力让一个模块做到精益求精。<br>内聚：一个模块内各个元素彼此结合的紧密程度<br>耦合：一个软件结构内不同模块之间互连程度的度量</li>
<li>Convention over Configuration（CoC）– 惯例优于配置原则</li>
<li>Separation of Concerns (SoC) – 关注点分离</li>
<li>Design by Contract (DbC) – 契约式设计</li>
<li>Acyclic Dependencies Principle (ADP) – 无环依赖原则</li>
</ul>
<p><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">一些软件设计的原则</a></p>
<hr>
<h2 id="最小可用产品mvp理念"><a href="#最小可用产品-MVP-理念" class="headerlink" title="最小可用产品(MVP)理念"></a>最小可用产品(MVP)理念</h2><p>做出最小可用产品(Minimum Viable Product， MVP)，尽快丢给用户试用，快速获取客户反馈，在此基础上不断迭代和演化架构和产品。</p>
<p><img src="http://img2.tuicool.com/2aQ3A3.jpg!web" alt=""></p>
<hr>
<h2 id="过度工程over-engineering的问题"><a href="#过度工程（Over-Engineering）的问题" class="headerlink" title="过度工程（Over Engineering）的问题"></a>过度工程（Over Engineering）的问题</h2><p>讲产品架构和用户之间没有形成有效的反馈闭环，架构师想的和客户想的不在一个方向上，通过最小可用产品，<strong>快速迭代反馈</strong>的策略，可以避免这种问题。</p>
<p><img src="http://img0.tuicool.com/bYRrMfV.jpg!web" alt=""></p>
<hr>
<h3 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h3><ul>
<li>分层架构(n层架构)<ul>
<li>SOLID原则的通用架构</li>
</ul>
</li>
<li>事件驱动架构:一种流行的分布式异步架构模式<ul>
<li>用于小规模或者大规模的应用程序</li>
<li>可以与 调停者拓扑（Mediator Topology） 或者 代理者拓扑（Broker Topology） 一起使用</li>
</ul>
</li>
<li>微内核架构(插件架构)<ul>
<li>核心系统和插件模块</li>
</ul>
</li>
<li>微服务架构<ul>
<li>核心概念是具备高可伸缩性、易于部署和交付的独立部署单元（Separately Deployable Units）</li>
<li>最重要的概念是包含业务逻辑和处理流程的服务组件（Service Component）</li>
</ul>
</li>
</ul>
<p><a href="http://www.uml.org.cn/zjjs/201607081.asp" target="_blank" rel="external">架构原则和模式</a></p>
<hr>
<h1 id="如何呈现设计的架构"><a href="#如何呈现设计的架构" class="headerlink" title="如何呈现设计的架构?"></a>如何呈现设计的架构?</h1><hr>
<h2 id="可视化软件"><a href="#可视化软件" class="headerlink" title="可视化软件"></a>可视化软件</h2><ul>
<li>画有效的草图</li>
<li>模式设计工具(UML,工具:staruml)</li>
</ul>
<p>UML的5视图方法:4+1视图始终是架构师界最通用的东西，寻找一种向世界妥协的方式。</p>
<ul>
<li>职责划分（逻辑视图）</li>
<li>程序单元组织（开发视图）</li>
<li>控制流组织（运行视图）</li>
<li>物理节点安排（物理视图）</li>
<li>持久化设计（数据视图）</li>
</ul>
<p><a href="http://www.tuicool.com/articles/IbMzay" target="_blank" rel="external">一线架构师实践指南（二）</a><br><a href="http://www.tuicool.com/articles/jQzuyu" target="_blank" rel="external">软件架构师书籍</a></p>
<hr>
<h2 id="架构可视化一图胜千文图文并茂"><a href="#架构可视化-一图胜千文-图文并茂" class="headerlink" title="架构可视化:一图胜千文,图文并茂"></a>架构可视化:一图胜千文,图文并茂</h2><p>建模工具对比</p>
<table>
<thead>
<tr>
<th>建模工具</th>
<th>利</th>
<th>弊</th>
</tr>
</thead>
<tbody>
<tr>
<td>UML</td>
<td>善于表达静态与动态结构</td>
<td>不善于表达概念、约束与行为</td>
</tr>
<tr>
<td>文字</td>
<td>不善于表达概念、约束与行为</td>
<td>善于表达静态与动态结构</td>
</tr>
<tr>
<td>(伪)代码</td>
<td>好的代码有很强表达能力</td>
<td>太细、难以反映意图、不便于非程度员阅读(非通用语言)</td>
</tr>
</tbody>
</table>
<p>以文字为主体，配合以图形（可以用UML）；图形不要太大、太细；不但要表达是什么，而且要表达为什么。</p>
<p><a href="http://www.tuicool.com/articles/YvAzmua" target="_blank" rel="external">不画图的专家不是好的架构师</a><br><a href="http://blog.csdn.net/shulianghan/article/details/16880717" target="_blank" rel="external">【UML 建模】UML建模语言入门-视图,事物,关系,通用机制</a><br><a href=""></a></p>
<hr>
<h2 id="恰如其分的预先设计"><a href="#恰如其分的预先设计" class="headerlink" title="恰如其分的预先设计"></a>恰如其分的预先设计</h2><ul>
<li>方法学<ul>
<li>瀑布模型: 大型预先设计,推崇写代码前每件事情都经过讨论和评审</li>
<li>敏捷开发: 充分自由度,快速行动,拥抱变化,反馈和交付价值. 演化架构和浮现式设计</li>
</ul>
</li>
<li>恰如其分很难具体量化<ul>
<li>过少设计</li>
<li>过分设计</li>
<li>为设计设置语境</li>
</ul>
</li>
</ul>
<p>最关键是明确自己的需求</p>
<hr>
<h2 id="为软件生成轻量的文档"><a href="#为软件生成轻量的文档" class="headerlink" title="为软件生成轻量的文档"></a>为软件生成轻量的文档</h2><ul>
<li>代码不会讲完整的故事</li>
<li>软件文档即指南<ul>
<li>语境</li>
<li>功能性概览</li>
<li>质量属性</li>
<li>约束</li>
<li>原则</li>
</ul>
</li>
<li>软件架构</li>
<li>外部接口</li>
<li>代码: 呈现底层细节,解释工作原理<ul>
<li>文档化的代码</li>
<li>支持自动化生产部分文档</li>
</ul>
</li>
<li>数据文档<ul>
<li>数据字典</li>
<li>数据模型</li>
</ul>
</li>
<li>物理架构<ul>
<li>服务器架构</li>
<li>网络架构</li>
</ul>
</li>
<li>部署文档</li>
</ul>
<hr>
<h3 id="架构实例剖析"><a href="#架构实例剖析" class="headerlink" title="架构实例剖析"></a>架构实例剖析</h3><p>包括聘宝平台的Web端系统架构、推荐系统架构、分布式存储/计算系统、底层服务器架构</p>
<ul>
<li>聘宝系统架构演进路线</li>
<li>其中一些的问题</li>
</ul>
<p>人员架构: 应对需求与团队规模</p>
<ul>
<li>两个人</li>
<li>5个人</li>
<li>20个人</li>
</ul>
<p>服务器架构:</p>
<ul>
<li>2台服务器: 1+1</li>
<li>10台服务器: 5+5</li>
<li>30台: 10+20</li>
<li>60台+: 15+35</li>
</ul>
<hr>
<h3 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h3><ul>
<li>web端系统:<ul>
<li>MVC模式–&gt;前端分离</li>
</ul>
</li>
<li>web端架构<ul>
<li>微内核架构: 核心系统 和 插件模块</li>
</ul>
</li>
<li>web端系统与推荐系统解耦<ul>
<li>RPC架构: 消息队列</li>
</ul>
</li>
</ul>
<hr>
<h3 id="华为内部如何实施微服务架构"><a href="#华为内部如何实施微服务架构？" class="headerlink" title="华为内部如何实施微服务架构？"></a>华为内部如何实施微服务架构？</h3><p><img src="http://img1.tuicool.com/UzuaauE.jpg!web" alt="服务化架构的演进历史"><br><a href="http://www.tuicool.com/articles/IjUbEnv" target="_blank" rel="external">华为内部如何实施微服务架构？</a></p>
<hr>
<h3 id="架构之道-规划-简化和演化"><a href="#架构之道-规划、简化和演化" class="headerlink" title="架构之道-规划、简化和演化"></a>架构之道-规划、简化和演化</h3><p>规划还是演化</p>
<ul>
<li>好的架构是设计出来的</li>
<li>好的性能,好的质量主要源于好的设计,而不是依赖测试</li>
<li>架构设计的质量直接影响演化的难以程度</li>
</ul>
<p><a href="http://www.tuicool.com/articles/zuIZvi" target="_blank" rel="external">联想高级架构师分享：架构之道-规划、简化和演化</a></p>
<hr>
<h3 id="缺少规划难以演化"><a href="#缺少规划难以演化" class="headerlink" title="缺少规划难以演化"></a>缺少规划难以演化</h3><p>单靠演化，即使能使架构越来越优化，也可能需要很长的周期，而对于产品或者项目，时间这个约束条件往往是苛刻的。<br>迭代是有条件的。建议：在有规划的基础上进行演化。我们无法得到普适的架构，但可以得到确定领域的通用架构，可以在特定领域通过演化使应用架构逐步优化，逐步与业务架构想适应，提高匹配度。</p>
<p><img src="http://img1.tuicool.com/QnMRZb3.jpg!web" alt="缺少规划难以演化"></p>
<hr>
<h1 id="四架构师日常工作享受什么样的苦与乐"><a href="#四-架构师日常工作-享受什么样的苦与乐" class="headerlink" title="四.架构师日常工作,享受什么样的苦与乐?"></a>四.架构师日常工作,享受什么样的苦与乐?</h1><hr>
<p>##软件架构师的职责</p>
<ul>
<li>架构师的基本分类<ul>
<li>根据职能: 前端架构师,后端架构师,算法架构师,分布式架构师,运维架构师</li>
</ul>
</li>
<li>其承担的责任<ul>
<li>确保概念的完整性，合理的切分工作，制定接口</li>
</ul>
</li>
</ul>
<p>架构师是最重要的，以确保概念的完整性，合理的切分工作，制定接口。行政领导应当尊重架构师的权威。</p>
<p><a href="http://www.tuicool.com/articles/6ZBjQfM" target="_blank" rel="external">软件架构师的职责</a><br>架构师需要参与项目开发的全部过程，包括需求分析、架构设计、系统实现、集成、测试和部署各个阶段，负责在整个项目中对技术活动和技术说明进行指导和协调。</p>
<hr>
<h2 id="小组讨论"><a href="#小组讨论-2" class="headerlink" title="小组讨论:"></a>小组讨论:</h2><p style="
    text-align: center;
    font-size: 40px;
    margin-top: 200px;
">架构师需要写代码么???</p>

<hr>
<h2 id="尽可能要写找到合理的平衡"><a href="#尽可能要写-找到合理的平衡" class="headerlink" title="尽可能要写,找到合理的平衡"></a>尽可能要写,找到合理的平衡</h2><p>架构师要尽可能写代码，做测试，纸上谈兵式做架构而后丢给团队的作法非常不靠谱（除非是已经非常清晰成熟的领域）</p>
<hr>
<h3 id="软件工程师角色和职责区别"><a href="#软件工程师角色和职责区别" class="headerlink" title="软件工程师角色和职责区别"></a>软件工程师角色和职责区别</h3><p>简单地将写程序的工程师分成三类:</p>
<ul>
<li>第一，写程序的人 （Coder、Employee、Worker）<br>这种类型的人单纯的只是为了工作、功课、任务而写程序，虽然职务名称叫做工程师，但是写程序对他们来说只是获取成绩、金钱的工具，写程序对他们来说枯燥无味，但为了生活，他们继续产出他们的程序码。</li>
<li>第二，有目标而写程序的人 （Hacker、Doer、Entrepreneur）<br>这种类型的人并不是因为热爱「程序」本身而开始写程序，他们写程序是为了要达成某些目的。</li>
<li>第三，热爱程序本身的人 （Architect、Theorists、Change Maker、Geek）<br>这类工程师喜欢程序本身，他们欣赏程序设计的架构、可扩充性、可被测试性。他们喜欢最新的科技，并且会主动的去接触、试用它们。他们喜欢写有架构、能够被别人重复使用的套件 （Library）。</li>
</ul>
<p>在我们的环境中，有太多的 Coder、也有许多从 Coder 变成的 Hacker（他们的差别只在有没有目标，还有去实作的毅力），但比较少真正愿意奉献、热爱程序的 Architect。</p>
<p><a href="http://www.tuicool.com/articles/EreIZb6" target="_blank" rel="external">三种软件工程师——编码员、程序师和架构师</a></p>
<hr>
<h3 id="coder-vs-hacker"><a href="#coder-vs-hacker" class="headerlink" title="coder vs hacker"></a>coder vs hacker</h3><p style="margin-top: -8px;"><br><img alt="" src="http://img0.tuicool.com/NJjqMnV.gif" style="
    height: 610px;
    width: 600px;
    margin-top: -10px;
    margin-bottom: -70px;"><br></p>

<hr>
<h2 id="架构师的必备技能"><a href="#架构师的必备技能" class="headerlink" title="架构师的必备技能"></a>架构师的必备技能</h2><p><img src="http://img.pinbot.me:8080/uploads/2016/9/22/blob_1474503395836.png" alt="2016-9-22-截图 - blob_1474503395836.png"></p>
<hr>
<h3 id="架构师的必备技能"><a href="#架构师的必备技能-1" class="headerlink" title="架构师的必备技能"></a>架构师的必备技能</h3><ul>
<li>项目技能</li>
<li>技术技能</li>
<li>想象力技能</li>
</ul>
<p>1.一个好的架构师首先是一个合格的工程师；<br>2.具有抽象的思维能力，能把业务抽象在抽象；<br>3.了解技术前沿知识，并深知其优劣；<br>4.沟通；<br>5.权衡取舍，能够在设计系统时综合考虑；<br>6.业务精良，同时具有多领域知识，因为有时候业务是相通的;</p>
<hr>
<h3 id="进度评估"><a href="#进度评估" class="headerlink" title="进度评估"></a>进度评估</h3><p>人月 换算</p>
<p>&lt;人月神话&gt;</p>
<p>“测试的时间至少需要整个开发流程时间的一半”。</p>
<hr>
<h3 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h3><p>外科手术队伍: 专业</p>
<ul>
<li>用好tower进行任务分配和进度管理</li>
<li>用好版本管理工具(git)</li>
<li>用好github,进行代码review</li>
</ul>
<p>一个人每天200行有效代码 vs 20个人 * 150行/每天</p>
<hr>
<h3 id="团队文化建设"><a href="#团队文化建设" class="headerlink" title="团队文化建设"></a>团队文化建设</h3><p>你不是一个人在战斗. 谦逊、尊重、信任-HRT(Honest,Respect,Trust)原则.</p>
<ul>
<li>团队技术分享</li>
<li>拥抱开源社区</li>
<li>极客与团队</li>
</ul>
<p>&lt;极客与团队-软件工程师的团队生存秘笈&gt;</p>
<hr>
<h3 id="与人打交道"><a href="#与人打交道" class="headerlink" title="与人打交道"></a>与人打交道</h3><ul>
<li>架构师与研发团队</li>
<li>关系技能: 架构师和各个业务需求方</li>
<li>商务技能</li>
</ul>
<hr>
<h3 id="必要的会议"><a href="#必要的会议" class="headerlink" title="必要的会议"></a>必要的会议</h3><ul>
<li>项目产品需求评审</li>
<li>每日研发内部站立晨会</li>
<li>研发内部关键模块技术评审</li>
<li>除此之外还有一些非研发团队沟通会议</li>
</ul>
<hr>
<h3 id="架构师必知"><a href="#架构师必知" class="headerlink" title="架构师必知"></a>架构师必知</h3><p><a href="http://www.tuicool.com/articles/AjABFv" target="_blank" rel="external">软件架构师应该知道的97件事（极致总结）</a></p>
<hr>
<h3 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h3><p><span>讲义中提到的各个工具集 </span></p>
<table>
<thead>
<tr>
<th>用途</th>
<th>推荐工具</th>
<th>你喜欢的</th>
</tr>
</thead>
<tbody>
<tr>
<td>版本管理</td>
<td>git</td>
<td></td>
</tr>
<tr>
<td>番茄工作法</td>
<td>番茄工作法</td>
<td></td>
</tr>
<tr>
<td>….</td>
<td>…</td>
<td></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="架构师的每日工作流程案例"><a href="#架构师的每日工作流程案例" class="headerlink" title="架构师的每日工作流程案例"></a>架构师的每日工作流程案例</h3><p>敏捷开发总的流程如下：</p>
<ol>
<li>需求规划和分期</li>
<li>需求评审</li>
<li>需求讲解</li>
<li>方案评审</li>
<li>每日晨会</li>
<li>性能测试</li>
<li>CodeReview</li>
<li>Demo</li>
<li>测试阶段<br>10.线上Bug修改流程</li>
</ol>
<hr>
<h3 id="程序员简易成长指南学习"><a href="#程序员简易成长指南-学习" class="headerlink" title="程序员简易成长指南:学习"></a>程序员简易成长指南:学习</h3><ul>
<li>如何更高效地学习？<ul>
<li>做一个全流程的demo,即使不理解也要做完</li>
<li>体系化的学习。抱着厚书硬啃了一遍，突然有种豁然开朗的感觉.</li>
<li>做笔记,画思维导图</li>
<li>再去看一些文章</li>
</ul>
</li>
<li>带着问题学习更有效率</li>
<li>架构师应不应该写代码？<ul>
<li>应该</li>
<li>在代码和和其他工作之间平衡</li>
</ul>
</li>
</ul>
<hr>
<h3 id="程序员简易成长指南职责"><a href="#程序员简易成长指南-职责" class="headerlink" title="程序员简易成长指南:职责"></a>程序员简易成长指南:职责</h3><p>从菜鸟码农到架构师</p>
<ul>
<li>架构师职责<ul>
<li>在代码中第一时间发现可能存在的问题，向其他人提出警告，</li>
<li>或是给予其他人改进的意见，</li>
<li>必要的时候或是给其他人演示一下正确的姿势。</li>
<li>保持大局观需要适度参与“核心模块”开发<br>总的来说，架构师和程序员在某些方面上有点像产品经理和用户的关系，大部分程序员并不会主动告诉你他们想要什么、哪里需要优化，甚至自己也不知道这些。想要做出好的产品，捷径之一就是跟用户做同样的事情。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="程序员简易成长指南沟通"><a href="#程序员简易成长指南-沟通" class="headerlink" title="程序员简易成长指南:沟通"></a>程序员简易成长指南:沟通</h3><ul>
<li>实践：开会是个技术活吗？<ul>
<li>是</li>
<li>大多数的会议都是在毫无意义的交流中浪费时间</li>
<li>这并不是会议才有的问题</li>
<li>大多数时候，沟通的核心不是你说了什么，而是你想要让对方了解什么、让他做什么。</li>
<li>良好的沟通能在工作中显著提升效率，但很多人忽略了这个事情。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="程序员简易成长指南沟通"><a href="#程序员简易成长指南-沟通-1" class="headerlink" title="程序员简易成长指南:沟通"></a>程序员简易成长指南:沟通</h3><ul>
<li>恰到好处的进行沟通的原则<ul>
<li>确保各方对背景的理解一致，<br>比如开会之前先简单通过邮件交流一下，对新加入会议的人花个30秒钟做个前情提要，或者在讨论过程中让对方说一下他的理解。</li>
<li>去掉对方不能/不需要理解的内容，<br>比如跟产品说“这个队列在高并发下因为锁的实现有问题导致CPU性能瓶颈”不如改成“我们发现了性能问题，持续10分钟了，10万用户收不到运营发的无节操广告，大概5分钟后扩容解决”。</li>
<li>确保在对方失去注意力前尽快说出重点，</li>
<li>不要说没有意义的内容浪费其他人的时间，<br>比如”这需求做不了“或者”这里不可能出bug“，没有人想听到这些废话。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="程序员简易成长指南沟通"><a href="#程序员简易成长指南-沟通-2" class="headerlink" title="程序员简易成长指南:沟通"></a>程序员简易成长指南:沟通</h3><ul>
<li>还有更好的办法吗？<br>成为技术专家/架构师之后的工作可以说是痛并快乐着，会有很多人找你咨询问题，另一方面，会有太多人找你咨询问题。<br>甚至有一段时间每天的工作就是解答问题，小到工具使用中到疑难bug，大到架构设计，从早上到晚上基本都是在给各种各样的小伙伴提供咨询服务。</li>
<li>简化到三个问题:<ul>
<li>“他们要你解决什么问题？”</li>
<li>“你解决的是什么问题？“</li>
<li>”还有更好的办法吗？“</li>
</ul>
</li>
</ul>
<p>现在第三句已经很少问到了。</p>
<hr>
<h3 id="程序员简易成长指南门槛"><a href="#程序员简易成长指南-门槛" class="headerlink" title="程序员简易成长指南:门槛"></a>程序员简易成长指南:门槛</h3><ul>
<li><p>成为架构师最困难的门槛是？</p>
<ul>
<li>知易行难。架构师虽然听起来很高大上，但本质上 <strong>仍然是工程师</strong>，<strong>不是科学家</strong>，也不是忽悠人的江湖骗子。学习再多，也需要 <strong>实践落地</strong>。设计架构方案更多的是在做一些抽象和权衡：把复杂的需求抽象成简单的模型，从功能、性能、可用性、研发成本等等方面规划如何构建一个系统，这些内容需要更多的实践练习。</li>
<li>没有实战平台。没有工作在类似平台天天需要接触架构设计的地方，而很多公司没有架构方面的工作可供练级，于是就想办法从理论上下功夫，这类人的特征非常明显：在信息不足，甚至不了解实际场景的情况下就开始做架构设计，这种所谓的架构往往理解比较肤浅，经不住推敲。</li>
<li>需要经验和磨砺。每次招人之后我们都会做一些针对新人的架构方面的培训，课程材料基本上包括了系统架构相关的主要方面，但是学完这些材料之后就能成为独当一面的架构师了吗？并没有。相反，这仅仅是开始，新人真正做了实际生产的系统之后才算是正式入门：面对压力时才会懂得权衡，走过弯路之后才会寻找捷径。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="程序员简易成长指南"><a href="#程序员简易成长指南" class="headerlink" title="程序员简易成长指南"></a>程序员简易成长指南</h3><p>从菜鸟码农到架构师</p>
<p>1）大部分烂代码并不是架构师的设计问题；<br>2）想要做出好的产品，捷径之一就是跟用户做同样的事情；<br>3）大多数的会议都是在毫无意义的交流中浪费时间；<br>4）程序员之间的差距或许比人和猴子之间的差距还大</p>
<hr>
<h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><p><a href="http://item.jd.com/11671959.html" target="_blank" rel="external">人月神话</a><br><a href="http://item.jd.com/1049267685.html" target="_blank" rel="external">程序员的职业素养</a><br>作为公司的架构师，一直致力于如何更好的设计架构，如何优化项目架构，如何提高开发效率和质量，却很少让团队成员理解和明白，为何要这样做。下一个小目标，让团队每个人都理解设计。<br><a href="http://item.jd.com/10393278.html" target="_blank" rel="external">程序员修炼之道：从小工到专家</a><br><a href="http://item.jd.com/10064006.html" target="_blank" rel="external">代码整洁之道</a><br><a href="http://item.jd.com/1521764416.html" target="_blank" rel="external">代码大全</a><br><a href="">软件架构师的12项修炼</a><br><a href="http://item.jd.com/11020024.html" target="_blank" rel="external">软件架构设计：程序员向架构师转型必备</a><br><a href="http://item.jd.com/11586611.html" target="_blank" rel="external">程序员必读之软件架构:告诉你怎么像架构师一样思考</a><br><a href="http://item.jd.com/1027821396.html" target="_blank" rel="external">极客与团队</a><br><a href="http://item.jd.com/11728740.html" target="_blank" rel="external">重构 改善既有代码的设计</a><br><a href="http://item.jd.com/10360906.html" target="_blank" rel="external">深入理解计算机系统（原书第2版） [Computer Systems]</a><br><a href="http://item.jd.com/11765608.html" target="_blank" rel="external">编程珠玑（续 修订版）</a></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.jobbole.com/5886/" target="_blank" rel="external">StackOverflow讨论帖:哪本最具影响力的书，是每个程序员都应该读的 59本</a><br><a href="https://zhuanlan.zhihu.com/p/21381297" target="_blank" rel="external">物理量纲失效了-论《人月神话》</a><br><a href="http://weibo.com/p/1001604012008453333828" target="_blank" rel="external">程序员简易成长指南：从菜鸟码农到架构师</a><br>秦迪，微博平台及大数据技术专家. 爱折腾，喜欢研究从内核到前端的所有方向，近几年重点关注大规模系统的架构设计和性能优化，重度代码洁癖：以code review己任，重度工具控：有现成工具的问题就用工具解决，没有工具能解决的问题就写个工具解决。业余时间喜欢偶尔换个语言写代码放松一下。<br><a href="https://zhuanlan.zhihu.com/p/22137488" target="_blank" rel="external">程序员如何才能晋升为优秀的高薪架构师？</a><br><a href="http://wdxtub.com/2016/08/09/refactoring-clip/" target="_blank" rel="external">&lt;重构 改善既有代码的设计&gt;读书笔记</a><br><a href="http://www.vaikan.com/a-software-architect-is-not-a-senior-developer/" target="_blank" rel="external">软件架构师不等同于资深程序员</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzYzMzkyMQ==&amp;mid=2649826302&amp;idx=1&amp;sn=8faa9d98db2756cd260e9187c27c60f5#rd" target="_blank" rel="external">高质量的工程代码为什么难写</a><br>不是实现了业务需求就结束了呢，其实远没有，这其实只是写代码的开始，除了正向的逻辑实现外，任何一个点的异常的分支逻辑怎么处理才是工程化的代码中更难处理的部分，这个问题在单机式的系统中会相对还好处理，在分布式的环境会变得非常的复杂<br>异常分支逻辑处理好后，通常还需要增加必要的日志信息，以便在出问题时方便排查<br>吃掉重要的异常信息不抛出这种行为在写代码中是非常可耻的<br>对于高质量的工程代码而言，其实实现业务逻辑只是其中占比很小的一部分，甚至花的时间是相对最少的一部分;<br>好的工程代码，说难也难，说不难也不难，均体现在“工程”二字之上。除了代码之外，想想其他被冠以“工程”二字的，如：大厦、桥梁、船舶、水电站等等等等，高质量“工程”都有共性：安全、易用、可维护、美观… 综合多个维度，缺一不可。</p>
<hr>
<h2 id="系统设计案例"><a href="#系统设计案例" class="headerlink" title="系统设计案例"></a>系统设计案例</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5ODMxNzY0MA==&amp;mid=2650919502&amp;idx=2&amp;sn=29475a79ea5d3b8808426546be802df2&amp;scene=1&amp;srcid=09118lagqsPP2D4b5XmQENfa#rd" target="_blank" rel="external">支付宝系统架构（内部架构图）</a></p>
<hr>
<h2 id="微信联系我"><a href="#微信联系我" class="headerlink" title="微信联系我"></a>微信联系我</h2><p><img src="http://img.pinbot.me:8080/uploads/2016/9/22/blob_1474494141371.png" alt="2016/9/22/截图 - blob_1474494141371.png"></p>
<hr>
<h1 id="thank-you"><a href="#THANK-YOU" class="headerlink" title="THANK YOU"></a>THANK YOU</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: likaiguo&lt;/p&gt;
&lt;h2 id=&quot;从程序员到架构师的成长之路&quot;&gt;&lt;a href=&quot;#从程序员到架构师的成长之路&quot; class=&quot;headerlink&quot; title=&quot;从程序员到架构师的成长之路&quot;&gt;&lt;/a&gt;从程序员到架构师的成长之路&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;课程大纲&quot;&gt;&lt;a href=&quot;#课程大纲&quot; class=&quot;headerlink&quot; title=&quot;课程大纲&quot;&gt;&lt;/a&gt;课程大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序员的技术发展道路和职业规划&lt;/li&gt;
&lt;li&gt;提升代码质量和开发效率的方法&lt;/li&gt;
&lt;li&gt;什么是适合业务发展的好架构?&lt;/li&gt;
&lt;li&gt;架构师日常工作,享受什么样的苦与乐?&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="UML" scheme="http://blog.pinbot.me/categories/UML/"/>
    
    
      <category term="面向对象" scheme="http://blog.pinbot.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="http://blog.pinbot.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>react入门介绍</title>
    <link href="http://blog.pinbot.me/2016/09/06/react%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.pinbot.me/2016/09/06/react入门介绍/</id>
    <published>2016-09-06T10:30:30.000Z</published>
    <updated>2017-06-29T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reactjs介绍"><a href="#react-js介绍" class="headerlink" title="react.js介绍"></a>react.js介绍</h2><h3 id="reactjs的提出"><a href="#react-js的提出" class="headerlink" title="react.js的提出"></a>react.js的提出</h3><p>react.js的首次提出是在2014年Facebook的f8大会上。顺便科普一下f8大会，f8大会是由Facebook组织的年度的技术峰会，之所以叫f8，就是看大家在8小时以内能做出哪些有意思的东西。<br>react.js称为颠覆式前端UI开发框架。目前基于html的前端开发变得越来越复杂，传统的开发方式基于来自服务器和来自用户输入的交互数据,动态反应到复杂界面的时候，代码量变得越来越大，难以维护。<br>比如，前端开发框架jquey，每次数据更新，必须手动把数据更新渲染到ui界面上,代码量极大。基于此，google推出的angular.js的双向数据绑定很好的解决了这个问题。但是angular.js也有自身的一些不足。1：angular过重，不适用于对性能要求特别高的站点。2：ui组件封装比较复杂，不利于重用。而react解决了所有的这些问题。<br>ReactJS官网地址：<a href="http://facebook.github.io/react/" target="_blank" rel="external">http://facebook.github.io/react/</a><br>Github地址：<a href="https://github.com/facebook/react" target="_blank" rel="external">https://github.com/facebook/react</a></p>
<a id="more"></a>
<h3 id="reactjs的特点"><a href="#react-js的特点" class="headerlink" title="react.js的特点"></a>react.js的特点</h3><h4 id="1-就是轻数据渲染响应非常快"><a href="#1、就是轻，数据渲染响应非常快。" class="headerlink" title="1、就是轻，数据渲染响应非常快。"></a>1、就是轻，数据渲染响应非常快。</h4><p>复杂或频繁的DOM操作通常是性能瓶颈产生的原因。React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。尽管每一次都需要构造完整的虚拟DOM树，但是因为虚拟DOM是内存数据，性能是极高的，而对实际DOM进行操作的仅仅是Diff部分，因而能达到提高性能的目的。</p>
<h4 id="2组件化开发思想"><a href="#2：组件化开发思想。" class="headerlink" title="2：组件化开发思想。"></a>2：组件化开发思想。</h4><p>React推荐以组件的方式去重新思考UI构成，将UI上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件，最终完成整体UI的构建。</p>
<h3 id="react试用场景"><a href="#react试用场景" class="headerlink" title="react试用场景"></a>react试用场景</h3><p>react 这么厉害到底适用于哪些场景呢？<br>1、复杂场景下的高性能要求。<br>2、重用组件库，组件组合。</p>
<h2 id="react-html-css基础实践"><a href="#react-html、css基础实践" class="headerlink" title="react html、css基础实践"></a>react html、css基础实践</h2><p>下面让我们来看看一组代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">   .redColor&#123;</div><div class="line">    color: red;</div><div class="line">   &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">      <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> styleObj = &#123;</div><div class="line">            <span class="attr">textDecoration</span>:<span class="string">'underline'</span></div><div class="line">          &#125;;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"redColor"</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>'<span class="attr">18px</span>'&#125;&#125;&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"World"</span>/&gt;</span>,</span></div><div class="line">      document.getElementById('example')</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在来解释一下这段代码<br>1.react用的是jsx，是facebook为react开发的一套语法糖。语法糖是计算机中添加的一种语法，对语言的功能没有影响，但是更方便程序员使用，增加可读性减少程序出错机会。类似的还有CoffeeScript、TypeScript等。最终都被解析库解析成js。这里引入的browser.js 就是jsx的解析库。作用是将 JSX 语法转为 JavaScript 语法。另外 <code>&lt;script&gt;</code> 标签的 type 属性为 <code>text/babel</code> 。表明这是jsx语法。</p>
<p>2.jsx为我们带来的便利就是，我们可以在js里写类dom的结构，比我们用原生js拼接字符串要简单方便许多。jsx语法允许我们生成原生的dom标签，还可以生成自定义标签。比如hello，这些统称为react components.通过调用ReactDOM将react components呈现在页面上。</p>
<p>3.ReactDOM.render是React的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。第一个参数是要插入的components，第二个参数是要插入的容器。<br>自定义的标签是通过React.createClass申明，参数是一个js的对象。return的内容就是渲染的结构。遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。</p>
<p>4.给标签添加css属性有两种：<br> 一种：用外联样式，注意这里是className，因为这是jsx语法，class在js中已经是一个保留关键字。<br> 二种：内联样式。在react中内联样式必须用样式对象来表示，在react中内联样式必须用样式对象来表示，必须用驼峰。且用｛｛｝｝包裹。这里为什么要用｛｛｝｝，让我们再看看另一种写法就一目了然了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> styleObj = &#123;</div><div class="line">          <span class="attr">fontSize</span>:<span class="string">'18px'</span></div><div class="line">        &#125;;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"redColor"</span> <span class="attr">style</span>=<span class="string">&#123;styleObj&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"World"</span>/&gt;</span>,</span></div><div class="line">    document.getElementById('example')</div><div class="line">  );</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里申明一个样式对象，用｛｝包裹就能以js的方式来解析。和<code>｛｛fontSize:&quot;18px&quot;｝｝</code>异曲同工。<br>可以隐约的看到，react的组件通过样式对象的申明可以，react组件是html、css、js的集合，成为真正意义上的独立组件。</p>
<p>这次我们简单介绍了react的由来、特点、应用场景。以及，jsx语法糖，如何生成自定义标签，插入节点，添加css样式，这些都是react的基础，接下来，我们继续react compenents的生命周期。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react-js介绍&quot;&gt;&lt;a href=&quot;#react-js介绍&quot; class=&quot;headerlink&quot; title=&quot;react.js介绍&quot;&gt;&lt;/a&gt;react.js介绍&lt;/h2&gt;&lt;h3 id=&quot;react-js的提出&quot;&gt;&lt;a href=&quot;#react-js的提出&quot; class=&quot;headerlink&quot; title=&quot;react.js的提出&quot;&gt;&lt;/a&gt;react.js的提出&lt;/h3&gt;&lt;p&gt;react.js的首次提出是在2014年Facebook的f8大会上。顺便科普一下f8大会，f8大会是由Facebook组织的年度的技术峰会，之所以叫f8，就是看大家在8小时以内能做出哪些有意思的东西。&lt;br&gt;react.js称为颠覆式前端UI开发框架。目前基于html的前端开发变得越来越复杂，传统的开发方式基于来自服务器和来自用户输入的交互数据,动态反应到复杂界面的时候，代码量变得越来越大，难以维护。&lt;br&gt;比如，前端开发框架jquey，每次数据更新，必须手动把数据更新渲染到ui界面上,代码量极大。基于此，google推出的angular.js的双向数据绑定很好的解决了这个问题。但是angular.js也有自身的一些不足。1：angular过重，不适用于对性能要求特别高的站点。2：ui组件封装比较复杂，不利于重用。而react解决了所有的这些问题。&lt;br&gt;ReactJS官网地址：&lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://facebook.github.io/react/&lt;/a&gt;&lt;br&gt;Github地址：&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/facebook/react&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
